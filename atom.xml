<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wangli&#39;s Blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="wanglilin.github.io/"/>
  <updated>2018-05-14T02:28:14.157Z</updated>
  <id>wanglilin.github.io/</id>
  
  <author>
    <name>Wangli Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LightGBM使用小结</title>
    <link href="wanglilin.github.io/2018/05/12/LightGBM-Cookbook/"/>
    <id>wanglilin.github.io/2018/05/12/LightGBM-Cookbook/</id>
    <published>2018-05-12T12:09:52.000Z</published>
    <updated>2018-05-14T02:28:14.157Z</updated>
    
    <content type="html"><![CDATA[<p>最近在参加一些数据竞赛，诸如腾讯校园算法大赛和蚂蚁金服风险识别大赛，在参赛的过程中，发现原生的LightGBM比sklearn接口的LIghtGBM方便的不要太多。因此，趁此之际，总结一波。</p>
<h4 id="数据接口"><a href="#数据接口" class="headerlink" title="数据接口"></a>数据接口</h4><h5 id="加载numpy数组到Dataset中："><a href="#加载numpy数组到Dataset中：" class="headerlink" title="加载numpy数组到Dataset中："></a>加载<code>numpy</code>数组到<code>Dataset</code>中：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 500个样本，每一个包含10个特征</span></div><div class="line">data = np.random.rand(<span class="number">500</span>, <span class="number">10</span>)</div><div class="line"><span class="comment"># 二元目标变量，0和1</span></div><div class="line">label = np.random.randint(<span class="number">2</span>, size=<span class="number">500</span>)</div><div class="line">train_data = lgb.Dataset(data, label=label)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="加载libsvm文本文件或者LightGBM二进制文件到Dataset中："><a href="#加载libsvm文本文件或者LightGBM二进制文件到Dataset中：" class="headerlink" title="加载libsvm文本文件或者LightGBM二进制文件到Dataset中："></a>加载libsvm文本文件或者LightGBM二进制文件到Dataset中：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">train_data = lgb.Dataset(<span class="string">'train.svm.bin'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>保存Dataset到LightGBM二进制文件将会使得加载更快速<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">train_data = lgb.Dataset(data, label=label)</div><div class="line">train_data.save_binary(<span class="string">'train.bin'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="指定feature-names（分类名称）和categorical-features（分类特征）："><a href="#指定feature-names（分类名称）和categorical-features（分类特征）：" class="headerlink" title="指定feature names（分类名称）和categorical features（分类特征）："></a>指定<code>feature names</code>（分类名称）和<code>categorical features</code>（分类特征）：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">train_data = lgb.Dataset(data, label=label, feature_name=[<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>], categorical_feature=[<span class="string">'c3'</span>])</div></pre></td></tr></table></figure>
<p>LightGBM可以直接使用<code>categorical features</code>作为输入，它不需要被转换为one-hot encoding（独热编码），并且它比one-hot更快。</p>
<h5 id="内存的高使用："><a href="#内存的高使用：" class="headerlink" title="内存的高使用："></a>内存的高使用：</h5><p>LightGBM中的<code>Dataset</code>对象由于只需要保存discrete bins（离散的数据块），因此，它具有很好的内存效率。然而，Numpy/Array/Pandas对象的内存开销较大，如果更关心内存消耗的时候，可以根据以下方式来节省内存：</p>
<ul>
<li>在构造<code>Dataset</code>时设置<code>free_raw_data=True</code> （默认为True）</li>
<li>在<code>Dataset</code>被构造完之后手动设置<code>raw_data=None</code></li>
<li>调用<code>gc</code></li>
</ul>
<h5 id="验证集的产生"><a href="#验证集的产生" class="headerlink" title="验证集的产生"></a>验证集的产生</h5><p>在LightGBM中，验证集的生成必须依赖于训练集，可用如下语句生成验证集：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val_data = train_data.create_valid(valid_x, label=valid_y)</div></pre></td></tr></table></figure>
<h4 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h4><p>LightGBM可以使用一个pair的list或一个字典来设置参数，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">param = &#123;<span class="string">'num_leaves'</span>: <span class="number">31</span>, <span class="string">'num_trees'</span>: <span class="number">100</span>, <span class="string">'objective'</span>: <span class="string">'binary'</span>&#125;</div><div class="line">param[<span class="string">'metric'</span>] = <span class="string">'auc'</span></div></pre></td></tr></table></figure></p>
<ul>
<li>可以指定多个eval指标<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">param[<span class="string">'metric'</span>] = [<span class="string">'auc'</span>, <span class="string">'binary_logloss'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><ul>
<li><p>训练一个模型时，需要一个parameter list（参数列表）和dataset（数据集）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 迭代次数</span></div><div class="line">num_round = <span class="number">10</span></div><div class="line"><span class="comment"># valid_sets中包含训练集和验证集 即可看到过拟合现象</span></div><div class="line">bst = lgb.train(param, train_data, num_round, valid_sets=[train_data, test_data])</div></pre></td></tr></table></figure>
</li>
<li><p>在训练完成后，可以使用如下方式来保存模型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bst.save_model(<span class="string">'model.txt'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>已保存模型也可以使用如下方式来加载</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bst = lgb.Booster(model_file=<span class="string">'model.txt'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h4><p>使用5-折方式的交叉验证来进行训练（4个训练集，1个测试集）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">num_round = <span class="number">10</span></div><div class="line">lgb.cv(param, train_data, num_round, nfold=<span class="number">5</span>)</div></pre></td></tr></table></figure>
<h4 id="早停策略"><a href="#早停策略" class="headerlink" title="早停策略"></a>早停策略</h4><p>如果含有验证集，则可以使用早停策略来找到最佳参数的boosting rounds（梯度次数）。提前停止需要在<code>valid_sets</code>中至少有一个集合，如果有多个，它们都会被使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bst = lgb.train(param, train_data, num_round, valid_sets=valid_sets, early_stopping_rounds=<span class="number">10</span>)</div><div class="line">bst.save_model(<span class="string">'model.txt'</span>, num_iteration=bst.best_iteration)</div></pre></td></tr></table></figure></p>
<p>该模型将开始训练，直到验证得分停止提高为止。</p>
<h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><p>已经训练或加载的模型都可以对数据集进行预测：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = np.random.rand(<span class="number">7</span>, <span class="number">10</span>)</div><div class="line">y_pred = bst.predict(data)</div></pre></td></tr></table></figure></p>
<p>如果在训练过程中启用了提前停止，可以用<code>bst.best_iteration</code>从最佳迭代中获得预测结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">y_pred = bst.predict(data, num_iteration=bst.best_iteration)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在参加一些数据竞赛，诸如腾讯校园算法大赛和蚂蚁金服风险识别大赛，在参赛的过程中，发现原生的LightGBM比sklearn接口的LIghtGBM方便的不要太多。因此，趁此之际，总结一波。&lt;/p&gt;
&lt;h4 id=&quot;数据接口&quot;&gt;&lt;a href=&quot;#数据接口&quot; class=&quot;headerlink&quot; title=&quot;数据接口&quot;&gt;&lt;/a&gt;数据接口&lt;/h4&gt;&lt;h5 id=&quot;加载numpy数组到Dataset中：&quot;&gt;&lt;a href=&quot;#加载numpy数组到Dataset中：&quot; class=&quot;headerlink&quot; title=&quot;加载numpy数组到Dataset中：&quot;&gt;&lt;/a&gt;加载&lt;code&gt;numpy&lt;/code&gt;数组到&lt;code&gt;Dataset&lt;/code&gt;中：&lt;/h5&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 500个样本，每一个包含10个特征&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data = np.random.rand(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 二元目标变量，0和1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;label = np.random.randint(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, size=&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;train_data = lgb.Dataset(data, label=label)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="机器学习" scheme="wanglilin.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="树模型系列" scheme="wanglilin.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A0%91%E6%A8%A1%E5%9E%8B%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="机器学习" scheme="wanglilin.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="LightGBM" scheme="wanglilin.github.io/tags/LightGBM/"/>
    
  </entry>
  
  <entry>
    <title>dp系列之子集系列</title>
    <link href="wanglilin.github.io/2018/05/05/dfs-subsets/"/>
    <id>wanglilin.github.io/2018/05/05/dfs-subsets/</id>
    <published>2018-05-05T12:40:33.000Z</published>
    <updated>2018-05-05T12:45:13.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-子集"><a href="#1-子集" class="headerlink" title="1. 子集"></a>1. 子集</h3><p><a href="https://www.lintcode.com/problem/subsets/description" target="_blank" rel="external">题目详情</a></p>
<blockquote>
<p>给定一个含不同整数的集合，返回其所有的子集<br><strong>样例：</strong><br>如果 S = [1,2,3]，有如下的解：<br>[<br>      [3],<br>      [1],<br>      [2],<br>      [1,2,3],<br>      [1,3],<br>      [2,3],<br>      [1,2],<br>      []<br>]</p>
</blockquote>
<a id="more"></a>
<h4 id="思路-–-递归解法"><a href="#思路-–-递归解法" class="headerlink" title="思路 – 递归解法"></a>思路 – 递归解法</h4><ul>
<li>深度优先搜索</li>
<li>由于样例中的输出需要满足从小到大排列，所以在将数组传入<code>helper()</code>中时需要先对数组进行排序处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> nums: A set of numbers</div><div class="line">     * <span class="doctag">@return</span>: A list of lists</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</div><div class="line">        <span class="comment">//为了使列表中的值按顺序排列</span></div><div class="line">        Arrays.sort(nums);</div><div class="line">        helper(result, list, nums, <span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; result,</span></span></div><div class="line">                        List&lt;Integer&gt; list,</div><div class="line">                        <span class="keyword">int</span>[] nums,</div><div class="line">                        <span class="keyword">int</span> index) &#123;</div><div class="line">        <span class="keyword">if</span> (list.size() == nums.length) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.length; i++) &#123;</div><div class="line">            list.add(nums[i]);</div><div class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</div><div class="line">            helper(result, list, nums, i+<span class="number">1</span>);</div><div class="line">            list.remove(list.size() - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="思路-–-非递归解法"><a href="#思路-–-非递归解法" class="headerlink" title="思路 – 非递归解法"></a>思路 – 非递归解法</h4><ul>
<li>n = nums.length, 1 &lt;&lt; n  =  2^n</li>
<li>each subset equals to an binary integer between 0 … 2^n - 1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0 - &gt; 000 - &gt; []</div><div class="line">1 - &gt; 001 - &gt; [1]</div><div class="line">2 - &gt; 010 - &gt; [2]</div><div class="line">...</div><div class="line">7 - &gt; 111 - &gt; [1, 2, 3]</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] S) &#123;</div><div class="line">        </div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">int</span> n = S.length;</div><div class="line">        Array.sort(S);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++) &#123;</div><div class="line">            ArrayList&lt;Integer&gt; subset = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> ((i &amp; (<span class="number">1</span> &lt;&lt; j)) != <span class="number">0</span>) &#123;</div><div class="line">                    subset.add(S[j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            result.add(subset);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-带重复元素的子集"><a href="#2-带重复元素的子集" class="headerlink" title="2. 带重复元素的子集"></a>2. 带重复元素的子集</h3><p><a href="https://www.lintcode.com/problem/subsets-ii/description" target="_blank" rel="external">题目详情</a></p>
<p>给定一个可能具有重复数字的列表，返回其所有可能的子集</p>
<blockquote>
<p><strong>样例：</strong><br>如果 S = [1,2,2]，有如下的解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [2],</div><div class="line">  [1],</div><div class="line">  [1,2,2],</div><div class="line">  [2,2],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul>
<li><p>在dfs函数中的for循环里面加条语句即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (i != index &amp;&amp; nums[i] == nums[i-<span class="number">1</span>])</div><div class="line">                <span class="keyword">continue</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>其余逻辑和不带重复元素的子集一样</p>
</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> nums: A set of numbers.</div><div class="line">     * <span class="doctag">@return</span>: A list of lists. All valid subsets.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line"></div><div class="line">        Arrays.sort(nums);</div><div class="line">        helper(result, list, nums, <span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">                </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; result,</span></span></div><div class="line">                        List&lt;Integer&gt; list,</div><div class="line">                        <span class="keyword">int</span>[] nums,</div><div class="line">                        <span class="keyword">int</span> index) &#123;</div><div class="line">                            </div><div class="line">        <span class="keyword">if</span> (list.size() == nums.length)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.length; i++) &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (i != index &amp;&amp; nums[i] == nums[i-<span class="number">1</span>])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            </div><div class="line">            list.add(nums[i]);</div><div class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</div><div class="line">            helper(result, list, nums, i+<span class="number">1</span>);</div><div class="line">            list.remove(list.size() - <span class="number">1</span>);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">                            </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-子集&quot;&gt;&lt;a href=&quot;#1-子集&quot; class=&quot;headerlink&quot; title=&quot;1. 子集&quot;&gt;&lt;/a&gt;1. 子集&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.lintcode.com/problem/subsets/description&quot;&gt;题目详情&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个含不同整数的集合，返回其所有的子集&lt;br&gt;&lt;strong&gt;样例：&lt;/strong&gt;&lt;br&gt;如果 S = [1,2,3]，有如下的解：&lt;br&gt;[&lt;br&gt;      [3],&lt;br&gt;      [1],&lt;br&gt;      [2],&lt;br&gt;      [1,2,3],&lt;br&gt;      [1,3],&lt;br&gt;      [2,3],&lt;br&gt;      [1,2],&lt;br&gt;      []&lt;br&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态规划" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="dp系列" scheme="wanglilin.github.io/tags/dp%E7%B3%BB%E5%88%97/"/>
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>链表系列之linked-list-cycle</title>
    <link href="wanglilin.github.io/2018/04/30/linked-list-circly/"/>
    <id>wanglilin.github.io/2018/04/30/linked-list-circly/</id>
    <published>2018-04-30T09:13:59.000Z</published>
    <updated>2018-04-30T09:18:25.248Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表是否有环-I"><a href="#链表是否有环-I" class="headerlink" title="链表是否有环 I"></a>链表是否有环 I</h4><h4 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a><a href="https://www.nowcoder.com/practice/650474f313294468a4ded3ce0f7898b9?tpId=46&amp;tqId=29039&amp;tPage=1&amp;rp=1&amp;ru=/ta/leetcode&amp;qru=/ta/leetcode/question-ranking" target="_blank" rel="external">题目详情</a></h4><blockquote>
<p>Given a linked list, determine if it has a cycle in it.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul>
<li>快慢指针，若快慢指针能相遇则说明链表存在环</li>
</ul>
<a id="more"></a>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123;</div><div class="line"> *         val = x;</div><div class="line"> *         next = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        ListNode fast = head;</div><div class="line">        ListNode slow = head;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</div><div class="line">            fast = fast.next.next;</div><div class="line">            slow = slow.next;</div><div class="line">            <span class="keyword">if</span> (fast == slow)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="链表是否有环-II"><a href="#链表是否有环-II" class="headerlink" title="链表是否有环 II"></a>链表是否有环 II</h4><h4 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a><a href="https://www.nowcoder.com/practice/6e630519bf86480296d0f1c868d425ad?tpId=46&amp;tqId=29038&amp;tPage=1&amp;rp=1&amp;ru=%2Fta%2Fleetcode&amp;qru=%2Fta%2Fleetcode%2Fquestion-ranking" target="_blank" rel="external">题目详情</a></h4><blockquote>
<p>Given a linked list, return the node where the cycle begins. If there is no cycle, returnnull.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
</blockquote>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p><img src="https://images0.cnblogs.com/blog/354747/201311/05171805-64db9f059a1641e7afaf3dd8223c4fe7.jpg" alt="enter image description here"></p>
<p>如上图所示：</p>
<ul>
<li>当快慢指针相遇时，<ul>
<li>快指针走过的长度：a + b + c + b</li>
<li>慢指针走过的长度：a + b</li>
</ul>
</li>
<li>因此，可以知道：<ul>
<li>2 * ( a + b ) = a + b + c + d</li>
</ul>
</li>
<li>所以，可以得到： a == c</li>
</ul>
<h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123;</div><div class="line"> *         val = x;</div><div class="line"> *         next = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        ListNode fast = head;</div><div class="line">        ListNode slow = head;</div><div class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</div><div class="line">            fast = fast.next.next;</div><div class="line">            slow = slow.next;</div><div class="line">            <span class="keyword">if</span> (slow == fast) &#123;</div><div class="line">                ListNode slow2 = head;</div><div class="line">                <span class="keyword">while</span> (slow != slow2) &#123;</div><div class="line">                    slow = slow.next;</div><div class="line">                    slow2 = slow2.next;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> slow;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;链表是否有环-I&quot;&gt;&lt;a href=&quot;#链表是否有环-I&quot; class=&quot;headerlink&quot; title=&quot;链表是否有环 I&quot;&gt;&lt;/a&gt;链表是否有环 I&lt;/h4&gt;&lt;h4 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink&quot; title=&quot;题目详情&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/650474f313294468a4ded3ce0f7898b9?tpId=46&amp;amp;tqId=29039&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/leetcode&amp;amp;qru=/ta/leetcode/question-ranking&quot;&gt;题目详情&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Given a linked list, determine if it has a cycle in it.&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;Can you solve it without using extra space?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;快慢指针，若快慢指针能相遇则说明链表存在环&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表系列" scheme="wanglilin.github.io/tags/%E9%93%BE%E8%A1%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>二叉树系列之zigzag打印二叉树</title>
    <link href="wanglilin.github.io/2018/04/28/zigzagTree/"/>
    <id>wanglilin.github.io/2018/04/28/zigzagTree/</id>
    <published>2018-04-28T08:59:43.000Z</published>
    <updated>2018-04-28T09:11:01.379Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a><a href="https://www.lintcode.com/zh-cn/problem/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="external">题目详情</a></h4><blockquote>
<p>给出一棵二叉树，返回其节点值的锯齿形层次遍历（先从左往右，下一层再从右往左，层与层之间交替进行） </p>
<p><strong>样例：</strong><br>给出一棵二叉树 {3,9,20,#,#,15,7},<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / \</div><div class="line">9  20</div><div class="line">  /  \</div><div class="line"> 15   7</div></pre></td></tr></table></figure></p>
<p>返回其锯齿形的层次遍历为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3],</div><div class="line">  [20,9],</div><div class="line">  [15,7]</div><div class="line">]</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ul>
<li>广度优先遍历</li>
<li>设置flag，看是正序还是逆序，决定如何加入list<ul>
<li>若是正序：<code>list.add(node.val)</code></li>
<li>若是逆序：<code>list.add(0, node.val)</code></li>
</ul>
</li>
</ul>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for binary tree</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</div><div class="line">        <span class="comment">//广度优先遍历</span></div><div class="line">        <span class="comment">//设个flag代表正序还是逆序</span></div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        queue.offer(root);</div><div class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">            <span class="keyword">int</span> size = queue.size();</div><div class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">                TreeNode treeNode = queue.poll();</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (flag) &#123;</div><div class="line">                    list.add(treeNode.val);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    list.add(<span class="number">0</span>, treeNode.val);</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</div><div class="line">                    queue.offer(treeNode.left);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</div><div class="line">                    queue.offer(treeNode.right);</div><div class="line">                &#125;</div><div class="line">               </div><div class="line">            &#125;</div><div class="line">            flag = !flag;</div><div class="line">            result.add(list);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><ul>
<li>利用堆栈来做</li>
</ul>
<p>直接上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition of TreeNode:</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     public int val;</div><div class="line"> *     public TreeNode left, right;</div><div class="line"> *     public TreeNode(int val) &#123;</div><div class="line"> *         this.val = val;</div><div class="line"> *         this.left = this.right = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param root: A Tree</div><div class="line">     * @return: A list of lists of integer include the zigzag level order traversal of its nodes' values.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">      </div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Stack&lt;TreeNode&gt; currLevel = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        Stack&lt;TreeNode&gt; nextLevel = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        Stack&lt;TreeNode&gt; tmp;</div><div class="line">        </div><div class="line">        currLevel.push(root);</div><div class="line">        <span class="keyword">boolean</span> normalOrder = <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (!currLevel.isEmpty()) &#123;</div><div class="line">            </div><div class="line">            ArrayList&lt;Integer&gt; currLevelResult = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            </div><div class="line">            <span class="keyword">while</span> (!currLevel.isEmpty()) &#123;</div><div class="line">                TreeNode node = currLevel.pop();</div><div class="line">                currLevelResult.add(node.val);</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (normalOrder) &#123;</div><div class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</div><div class="line">                        nextLevel.push(node.left);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</div><div class="line">                        nextLevel.push(node.right);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</div><div class="line">                        nextLevel.push(node.right);</div><div class="line">                    &#125; </div><div class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</div><div class="line">                        nextLevel.push(node.left);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            result.add(currLevelResult);</div><div class="line">            tmp = currLevel;</div><div class="line">            currLevel = nextLevel;</div><div class="line">            nextLevel = tmp;</div><div class="line">            normalOrder = !normalOrder;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink&quot; title=&quot;题目详情&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.lintcode.com/zh-cn/problem/binary-tree-zigzag-level-order-traversal/&quot;&gt;题目详情&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;给出一棵二叉树，返回其节点值的锯齿形层次遍历（先从左往右，下一层再从右往左，层与层之间交替进行） &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例：&lt;/strong&gt;&lt;br&gt;给出一棵二叉树 {3,9,20,#,#,15,7},&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; / \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9  20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /  \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 15   7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回其锯齿形的层次遍历为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [3],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [20,9],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [15,7]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;广度优先遍历&lt;/li&gt;
&lt;li&gt;设置flag，看是正序还是逆序，决定如何加入list&lt;ul&gt;
&lt;li&gt;若是正序：&lt;code&gt;list.add(node.val)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若是逆序：&lt;code&gt;list.add(0, node.val)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="tree系列" scheme="wanglilin.github.io/tags/tree%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>dp系列之房屋染色</title>
    <link href="wanglilin.github.io/2018/04/19/housePaint/"/>
    <id>wanglilin.github.io/2018/04/19/housePaint/</id>
    <published>2018-04-19T12:44:09.000Z</published>
    <updated>2018-04-19T12:46:37.641Z</updated>
    
    <content type="html"><![CDATA[<h4 id="房屋染色"><a href="#房屋染色" class="headerlink" title="房屋染色"></a><a href="http://www.lintcode.com/zh-cn/problem/paint-house/" target="_blank" rel="external">房屋染色</a></h4><blockquote>
<p>这里有n个房子在一列直线上，现在我们需要给房屋染色，分别有红色蓝色和绿色。每个房屋染不同的颜色费用也不同，你需要设计一种染色方案使得相邻的房屋颜色不同，并且费用最小。<br>费用通过一个nx3 的矩阵给出，比如cost[0][0]表示房屋0染红色的费用，cost[1][2]表示房屋1染绿色的费用。</p>
<p><strong>样例：</strong><br>costs = [[14,2,11],[11,14,5],[14,3,10]] return 10<br>房屋 0 蓝色, 房屋 1 绿色, 房屋 2 蓝色， 2 + 5 + 3 = 10</p>
</blockquote>
<a id="more"></a>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul>
<li>动态规划</li>
<li>状态转移公式：<code>costs[i][0] += Math.min(costs[i-1][1], costs[i-1][2])</code></li>
</ul>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> costs n x 3 cost matrix</div><div class="line">     * <span class="doctag">@return</span> an integer, the minimum cost to paint all houses</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</div><div class="line">        <span class="comment">// Write your code here</span></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 当决定当前房屋涂何种颜色时，也决定相邻房屋的可选颜色</div><div class="line">         * 将所有可能性枚举，选择费用最小的</div><div class="line">         * </div><div class="line">         * */</div><div class="line">         </div><div class="line">         <span class="keyword">if</span>(costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span>) &#123;</div><div class="line">             <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">         &#125;</div><div class="line">         </div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; costs.length; i++) &#123;</div><div class="line">             costs[i][<span class="number">0</span>] += Math.min(costs[i-<span class="number">1</span>][<span class="number">1</span>], costs[i-<span class="number">1</span>][<span class="number">2</span>]);</div><div class="line">             costs[i][<span class="number">1</span>] += Math.min(costs[i-<span class="number">1</span>][<span class="number">0</span>], costs[i-<span class="number">1</span>][<span class="number">2</span>]);</div><div class="line">             costs[i][<span class="number">2</span>] += Math.min(costs[i-<span class="number">1</span>][<span class="number">0</span>], costs[i-<span class="number">1</span>][<span class="number">1</span>]);</div><div class="line">         &#125;</div><div class="line">         </div><div class="line">         <span class="keyword">int</span> minCost = Math.min(costs[costs.length - <span class="number">1</span>][<span class="number">0</span>], costs[costs.length - <span class="number">1</span>][<span class="number">1</span>]);</div><div class="line">         minCost = Math.min(minCost, costs[costs.length - <span class="number">1</span>][<span class="number">2</span>]);</div><div class="line">         </div><div class="line">         <span class="keyword">return</span> minCost;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="房屋染色-II"><a href="#房屋染色-II" class="headerlink" title="房屋染色 II"></a><a href="http://www.lintcode.com/zh-cn/problem/paint-house-ii/" target="_blank" rel="external">房屋染色 II</a></h4><blockquote>
<p>这里有n个房子在一列直线上，现在我们需要给房屋染色，共有k种颜色。每个房屋染不同的颜色费用也不同，你需要设计一种染色方案使得相邻的房屋颜色不同，并且费用最小。</p>
<p>费用通过一个nxk 的矩阵给出，比如cost[0][0]表示房屋0染颜色0的费用，cost[1][2]表示房屋1染颜色2的费用。</p>
<p><strong>样例：</strong><br>costs = [[14,2,11],[11,14,5],[14,3,10]] return 10<br>房屋 0 颜色 1, 房屋 1 颜色 2, 房屋 2 颜色 1， 2 + 5 + 3 = 10</p>
</blockquote>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><ul>
<li>把<code>i</code>中for函数里面加个<code>for</code>循环即可</li>
<li>写个功能函数，算临近房屋涂其他颜色时候的最小值</li>
</ul>
<h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> costs: n x k cost matrix</div><div class="line">     * <span class="doctag">@return</span>: an integer, the minimum cost to paint all houses</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostII</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; costs.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; costs[<span class="number">0</span>].length; j++) &#123;</div><div class="line">                costs[i][j] += helper(costs, i, j);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//最后是求所有中最小的，这里用了个-1,可以算是小trick吧~</span></div><div class="line">        <span class="keyword">return</span> helper(costs, costs.length, -<span class="number">1</span>);</div><div class="line">                </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] costs, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; costs[<span class="number">0</span>].length; k++) &#123;</div><div class="line">            <span class="keyword">if</span> (k == j)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (min &gt; costs[i-<span class="number">1</span>][k])</div><div class="line">                min = costs[i-<span class="number">1</span>][k];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> min;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;房屋染色&quot;&gt;&lt;a href=&quot;#房屋染色&quot; class=&quot;headerlink&quot; title=&quot;房屋染色&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/paint-house/&quot;&gt;房屋染色&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这里有n个房子在一列直线上，现在我们需要给房屋染色，分别有红色蓝色和绿色。每个房屋染不同的颜色费用也不同，你需要设计一种染色方案使得相邻的房屋颜色不同，并且费用最小。&lt;br&gt;费用通过一个nx3 的矩阵给出，比如cost[0][0]表示房屋0染红色的费用，cost[1][2]表示房屋1染绿色的费用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例：&lt;/strong&gt;&lt;br&gt;costs = [[14,2,11],[11,14,5],[14,3,10]] return 10&lt;br&gt;房屋 0 蓝色, 房屋 1 绿色, 房屋 2 蓝色， 2 + 5 + 3 = 10&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态规划" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="dp系列" scheme="wanglilin.github.io/tags/dp%E7%B3%BB%E5%88%97/"/>
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>深搜系列之分割字符串</title>
    <link href="wanglilin.github.io/2018/04/19/splitwords/"/>
    <id>wanglilin.github.io/2018/04/19/splitwords/</id>
    <published>2018-04-19T08:58:53.000Z</published>
    <updated>2018-04-19T09:03:11.335Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a><a href="http://www.lintcode.com/zh-cn/problem/split-string/#" target="_blank" rel="external">题目详情</a></h4><blockquote>
<p>给一个字符串,你可以选择在一个字符或两个相邻字符之后拆分字符串,使字符串由仅一个字符或两个字符组成,输出所有可能的结果</p>
<p><strong>样例：</strong><br>给一个字符串”123”<br>返回[[“1”,”2”,”3”],[“12”,”3”],[“1”,”23”]]</p>
</blockquote>
<a id="more"></a>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul>
<li>深度优先搜索 + 回溯</li>
<li>for循环里面控制是一个字符还是两个字符</li>
</ul>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param : a string to be split</div><div class="line">     * @return: all possible split string array</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; splitString(String s) &#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        List&lt;List&lt;String&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> results;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</div><div class="line">            results.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">            <span class="keyword">return</span> results;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        dfsHelper(results, <span class="keyword">new</span> ArrayList&lt;&gt;(), <span class="number">0</span>, s);</div><div class="line">        <span class="keyword">return</span> results;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(List&lt;List&lt;String&gt;&gt; results,</span></span></div><div class="line">                           List&lt;String&gt; result,</div><div class="line">                           <span class="keyword">int</span> index,</div><div class="line">                           String s) &#123;</div><div class="line">        <span class="keyword">if</span> (index == s.length()) &#123;</div><div class="line">            results.add(<span class="keyword">new</span> ArrayList&lt;&gt;(result));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;                       </div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; index + <span class="number">2</span> &amp;&amp; i &lt; s.length(); i++) &#123;</div><div class="line">            String substring = s.substring(index, i+<span class="number">1</span>);</div><div class="line">            result.add(substring);</div><div class="line">            dfsHelper(results, result, i+<span class="number">1</span>, s);</div><div class="line">            result.remove(result.size() - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">                               </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink&quot; title=&quot;题目详情&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/split-string/#&quot;&gt;题目详情&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;给一个字符串,你可以选择在一个字符或两个相邻字符之后拆分字符串,使字符串由仅一个字符或两个字符组成,输出所有可能的结果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例：&lt;/strong&gt;&lt;br&gt;给一个字符串”123”&lt;br&gt;返回[[“1”,”2”,”3”],[“12”,”3”],[“1”,”23”]]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="深度优先搜索" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="dfs系列" scheme="wanglilin.github.io/tags/dfs%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>深搜系列之字符串全组合</title>
    <link href="wanglilin.github.io/2018/04/13/fullCombination/"/>
    <id>wanglilin.github.io/2018/04/13/fullCombination/</id>
    <published>2018-04-13T03:48:28.000Z</published>
    <updated>2018-04-13T03:52:38.165Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullCombination</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        helper(result, <span class="string">"abc"</span>, <span class="keyword">new</span> StringBuilder(), <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (String s : result)</div><div class="line">            System.out.println(s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(ArrayList&lt;String&gt; result, String s, StringBuilder sb, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; s.length(); i++) &#123;</div><div class="line">            sb.append(s.charAt(i));</div><div class="line">            result.add(sb.toString());</div><div class="line">            helper(result, s, sb, i + <span class="number">1</span>);</div><div class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="深度优先搜索" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="dfs系列" scheme="wanglilin.github.io/tags/dfs%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>dp系列之编辑距离</title>
    <link href="wanglilin.github.io/2018/04/13/editDistance/"/>
    <id>wanglilin.github.io/2018/04/13/editDistance/</id>
    <published>2018-04-13T03:16:18.000Z</published>
    <updated>2018-04-13T03:20:18.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><h4 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a><a href="http://www.lintcode.com/zh-cn/problem/edit-distance/" target="_blank" rel="external">题目详情</a></h4><blockquote>
<p>给出两个单词word1和word2，计算出将word1 转换为word2的最少操作次数。</p>
<p>你总共三种操作方法：</p>
<ul>
<li>插入一个字符</li>
<li>删除一个字符</li>
<li>替换一个字符</li>
</ul>
<p><strong>样例：</strong><br>给出 work1=”mart” 和 work2=”karma”<br>返回 3</p>
</blockquote>
<a id="more"></a>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul>
<li>动态规划求解</li>
<li><code>dp[i][j]:</code> word1的前i个字符转换成word2的前j个字符所需要的最少操作次数</li>
<li>其中，状态转移方程为：<code>dp[i][j] = Math.min {dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] (+1)}</code></li>
</ul>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> word1: A string</div><div class="line">     * <span class="doctag">@param</span> word2: A string</div><div class="line">     * <span class="doctag">@return</span>: The minimum number of steps.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (word1 == <span class="keyword">null</span> || word2 == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">char</span>[] chas1 = word1.toCharArray();</div><div class="line">        <span class="keyword">char</span>[] chas2 = word2.toCharArray();</div><div class="line">        <span class="keyword">int</span> row = chas1.length + <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> col = chas2.length + <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[row][col];</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</div><div class="line">            dp[i][<span class="number">0</span>] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</div><div class="line">            dp[<span class="number">0</span>][j] = j;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (chas1[i-<span class="number">1</span>] == chas2[j-<span class="number">1</span>])</div><div class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>; </div><div class="line">                    </div><div class="line">                dp[i][j] = Math.min(dp[i][j], dp[i][j-<span class="number">1</span>] + <span class="number">1</span>);  </div><div class="line">                dp[i][j] = Math.min(dp[i][j], dp[i-<span class="number">1</span>][j] + <span class="number">1</span>);  </div><div class="line">            &#125;</div><div class="line">          </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dp[row-<span class="number">1</span>][col-<span class="number">1</span>];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="编辑距离ii"><a href="#编辑距离ii" class="headerlink" title="编辑距离ii"></a>编辑距离ii</h3><h4 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a><a href="http://www.lintcode.com/zh-cn/problem/edit-distance-ii/" target="_blank" rel="external">题目详情</a></h4><blockquote>
<p>给你两个字符串 S 和 T, 判断他们是否只差一步编辑。</p>
<p><strong>样例：</strong><br>给你字符串 s = “aDb”, t= “adb”<br>返回 true</p>
</blockquote>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>只有以下三种可能性的时候才为只差一步编辑距离：</p>
<ul>
<li><code>abcd</code> &lt;–&gt; <code>abce</code></li>
<li><code>abc</code> &lt;–&gt; <code>abcd</code></li>
<li><code>abce</code> &lt;–&gt; <code>abc</code></li>
</ul>
<p>Ps：当两个字符串相等时，应该返回false</p>
<h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> s: a string</div><div class="line">     * <span class="doctag">@param</span> t: a string</div><div class="line">     * <span class="doctag">@return</span>: true if they are both one edit distance apart or false</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOneEditDistance</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (s.equals(t))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(s.length(), t.length()); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (s.charAt(i) != t.charAt(i)) &#123;</div><div class="line">                <span class="keyword">if</span> (s.length() == t.length())</div><div class="line">                    <span class="keyword">return</span> s.substring(i+<span class="number">1</span>).equals(t.substring(i+<span class="number">1</span>));</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s.length() &gt; t.length())</div><div class="line">                    <span class="keyword">return</span> s.substring(i+<span class="number">1</span>).equals(t.substring(i));</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s.length() &lt; t.length())</div><div class="line">                    <span class="keyword">return</span> t.substring(i+<span class="number">1</span>).equals(s.substring(i));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> Math.abs(s.length() - t.length()) &lt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;编辑距离&quot;&gt;&lt;a href=&quot;#编辑距离&quot; class=&quot;headerlink&quot; title=&quot;编辑距离&quot;&gt;&lt;/a&gt;编辑距离&lt;/h3&gt;&lt;h4 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink&quot; title=&quot;题目详情&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/edit-distance/&quot;&gt;题目详情&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;给出两个单词word1和word2，计算出将word1 转换为word2的最少操作次数。&lt;/p&gt;
&lt;p&gt;你总共三种操作方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入一个字符&lt;/li&gt;
&lt;li&gt;删除一个字符&lt;/li&gt;
&lt;li&gt;替换一个字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;样例：&lt;/strong&gt;&lt;br&gt;给出 work1=”mart” 和 work2=”karma”&lt;br&gt;返回 3&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态规划" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="dp系列" scheme="wanglilin.github.io/tags/dp%E7%B3%BB%E5%88%97/"/>
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>寻找旋转排序数组中的最小值</title>
    <link href="wanglilin.github.io/2018/04/09/findMin/"/>
    <id>wanglilin.github.io/2018/04/09/findMin/</id>
    <published>2018-04-09T03:51:04.000Z</published>
    <updated>2018-04-09T03:58:55.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a><a href="http://www.lintcode.com/zh-cn/problem/find-minimum-in-rotated-sorted-array/" target="_blank" rel="external">题目详情</a></h3><blockquote>
<p>假设一个旋转排序的数组其起始位置是未知的（比如0 1 2 4 5 6 7 可能变成是4 5 6 7 0 1 2）。</p>
<p>你需要找到其中最小的元素。</p>
<p>你可以假设数组中不存在重复的元素。</p>
</blockquote>
<a id="more"></a>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ul>
<li>顺序遍历，找到逆序对即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> nums: a rotated sorted array</div><div class="line">     * <span class="doctag">@return</span>: the minimum number in the array</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[i-<span class="number">1</span>])</div><div class="line">                <span class="keyword">return</span> nums[i];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>暴力解法虽然简单，但时间复杂度较高，因此我们寻找效率更高的二分查找法解决此类问题。</p>
<h3 id="二分查找解"><a href="#二分查找解" class="headerlink" title="二分查找解"></a>二分查找解</h3><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><ul>
<li>以数组最后一个最为target，寻找数组中第一个小于target的值</li>
<li>与常规的排序数组不同：<ul>
<li>当<code>nums[mid] &gt; target</code>时，我们可以知道最小值在<code>mid</code>的右边</li>
<li>当<code>nums[mid] &lt; target</code>时，我们可以知道最小值在<code>mid</code>的左边<br>如下图所示：<br><img src="https://img-blog.csdn.net/20151007185027403" alt="二分查找思路示意图"></li>
</ul>
</li>
</ul>
<p>因此，我们可以得到如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> nums: a rotated sorted array</div><div class="line">     * <span class="doctag">@return</span>: the minimum number in the array</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> mid;</div><div class="line">        <span class="keyword">int</span> target = nums[end];</div><div class="line">        <span class="comment">//找到第一个小于target的数</span></div><div class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</div><div class="line">            mid = start + ((end - start) &gt;&gt; <span class="number">1</span>);</div><div class="line">            <span class="comment">//如果nums[mid] &gt; target , 则最小值在mid左边</span></div><div class="line">            <span class="keyword">if</span> (nums[mid] &gt; target)</div><div class="line">                start = mid + <span class="number">1</span>;</div><div class="line">            <span class="comment">//如果nums[mid] &lt;= target, 则最小值在mid右边</span></div><div class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target)</div><div class="line">                end = mid - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> nums[end + <span class="number">1</span>];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink&quot; title=&quot;题目详情&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/find-minimum-in-rotated-sorted-array/&quot;&gt;题目详情&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;假设一个旋转排序的数组其起始位置是未知的（比如0 1 2 4 5 6 7 可能变成是4 5 6 7 0 1 2）。&lt;/p&gt;
&lt;p&gt;你需要找到其中最小的元素。&lt;/p&gt;
&lt;p&gt;你可以假设数组中不存在重复的元素。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>高频面试题总结之链表排序</title>
    <link href="wanglilin.github.io/2018/04/07/sortLinkedList/"/>
    <id>wanglilin.github.io/2018/04/07/sortLinkedList/</id>
    <published>2018-04-07T08:11:44.000Z</published>
    <updated>2018-04-07T08:15:12.396Z</updated>
    
    <content type="html"><![CDATA[<p>由于链表数据结构的特殊性，其实基于交换的排序算法已经不适用了，比较适用的是插入排序和归并排序。下面分别展示具体的求解思路。</p>
<h3 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h3><blockquote>
<p>Sort a linked list in O(n log n) time using constant space complexity.</p>
</blockquote>
<a id="more"></a>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123;</div><div class="line"> *         val = x;</div><div class="line"> *         next = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        </div><div class="line">        ListNode midNode = getMid(head);</div><div class="line">        ListNode midNext = midNode.next;</div><div class="line">        midNode.next = <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> merge(sortList(head), sortList(midNext));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">getMid</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode slow = head;</div><div class="line">        ListNode fast = head;</div><div class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</div><div class="line">            slow = slow.next;</div><div class="line">            fast = fast.next.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> slow;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">merge</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</div><div class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</div><div class="line">        ListNode curNode = dummy;</div><div class="line">        <span class="keyword">while</span> (head1 != <span class="keyword">null</span> &amp;&amp; head2 != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (head1.val &lt;= head2.val) &#123;</div><div class="line">                curNode.next = head1;</div><div class="line">                head1 = head1.next;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                curNode.next = head2;</div><div class="line">                head2 = head2.next;</div><div class="line">            &#125;</div><div class="line">            curNode = curNode.next;</div><div class="line">        &#125;</div><div class="line">        curNode.next = head1 == <span class="keyword">null</span> ? head2 : head1;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="链表插入排序"><a href="#链表插入排序" class="headerlink" title="链表插入排序"></a>链表插入排序</h3><p><a href="http://www.lintcode.com/submission/13892356/" target="_blank" rel="external">题目详情</a></p>
<blockquote>
<p>用插入排序对链表排序</p>
</blockquote>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for ListNode.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int val) &#123;</div><div class="line"> *         this.val = val;</div><div class="line"> *         this.next = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param head: The first node of linked list.</div><div class="line">     * @return: The head of linked list.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="comment">//将head中的值都加到该变量后面</span></div><div class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</div><div class="line">            ListNode node = dummy;</div><div class="line">            <span class="keyword">while</span> (node.next != <span class="keyword">null</span> &amp;&amp; node.next.val &lt; head.val) &#123;</div><div class="line">                node = node.next;</div><div class="line">            &#125;</div><div class="line">            ListNode temp = head.next;</div><div class="line">            head.next = node.next;</div><div class="line">            node.next = head;</div><div class="line">            head = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于链表数据结构的特殊性，其实基于交换的排序算法已经不适用了，比较适用的是插入排序和归并排序。下面分别展示具体的求解思路。&lt;/p&gt;
&lt;h3 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink&quot; title=&quot;题目详情&quot;&gt;&lt;/a&gt;题目详情&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Sort a linked list in O(n log n) time using constant space complexity.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>SQL典型例题总结</title>
    <link href="wanglilin.github.io/2018/04/04/sql-1/"/>
    <id>wanglilin.github.io/2018/04/04/sql-1/</id>
    <published>2018-04-04T04:16:05.000Z</published>
    <updated>2018-04-04T04:22:31.944Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-统计出当前各个title类型对应的员工当前薪水对应的平均工资。"><a href="#1-统计出当前各个title类型对应的员工当前薪水对应的平均工资。" class="headerlink" title="1. 统计出当前各个title类型对应的员工当前薪水对应的平均工资。"></a>1. 统计出当前各个title类型对应的员工当前薪水对应的平均工资。</h3><p>表结构：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</div></pre></td></tr></table></figure></p>
<p>思路：</p>
<ul>
<li><code>INNER JOIN</code>的使用</li>
<li><code>GROUP BY</code> + <code>AVG( )</code>的使用</li>
</ul>
<a id="more"></a>
<p>代码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> titles.title <span class="keyword">AS</span> title, <span class="keyword">AVG</span>(salaries.salary) <span class="keyword">AS</span> <span class="keyword">avg</span></div><div class="line"><span class="keyword">FROM</span> titles</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries</div><div class="line"><span class="keyword">ON</span> salaries.emp_no = titles.emp_no <span class="keyword">AND</span> salaries.to_date = titles.to_date <span class="keyword">AND</span> salaries.to_date = <span class="string">'9999-01-01'</span></div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> titles.title;</div></pre></td></tr></table></figure></p>
<h3 id="2-获取当前（to-date-’9999-01-01’）薪水第二多的员工的emp-no以及其对应的薪水salary"><a href="#2-获取当前（to-date-’9999-01-01’）薪水第二多的员工的emp-no以及其对应的薪水salary" class="headerlink" title="2. 获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary"></a>2. 获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary</h3><p>表结构：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</div></pre></td></tr></table></figure></p>
<p>思路：</p>
<ul>
<li><code>distinct</code> 和 <code>limit</code>的使用</li>
</ul>
<p>代码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 第一种解法</span></div><div class="line"><span class="keyword">SELECT</span> emp_no, <span class="keyword">max</span>(salary) <span class="keyword">FROM</span> salaries</div><div class="line"><span class="keyword">WHERE</span> salary &lt; (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(SALARY) <span class="keyword">FROM</span> salaries) <span class="keyword">and</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span>;</div><div class="line"></div><div class="line"><span class="comment">--第二种解法</span></div><div class="line"><span class="keyword">select</span> emp_no, salary <span class="keyword">from</span> salaries</div><div class="line"><span class="keyword">where</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span> <span class="keyword">and</span> salary = (<span class="keyword">select</span> <span class="keyword">distinct</span> salary <span class="keyword">from</span> salaries <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<h3 id="3-查找所有员工的last-name和first-name以及对应的dept-name，也包括暂时没有分配部门的员工"><a href="#3-查找所有员工的last-name和first-name以及对应的dept-name，也包括暂时没有分配部门的员工" class="headerlink" title="3. 查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工"></a>3. 查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工</h3><p>表结构：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`departments`</span> (</div><div class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`dept_name`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`dept_no`</span>));</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</div></pre></td></tr></table></figure></p>
<p>思路：</p>
<ul>
<li><code>left join</code> +  三表联合查询</li>
</ul>
<p>代码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> employees.last_name, employees.first_name, departments.dept_name </div><div class="line"><span class="keyword">FROM</span> (employees <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">ON</span> employees.emp_no = dept_emp.emp_no)</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments <span class="keyword">ON</span> dept_emp.dept_no = departments.dept_no;</div></pre></td></tr></table></figure></p>
<h3 id="4-查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp-noy以及其对应的薪水涨幅growth，并按照growth进行升序"><a href="#4-查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp-noy以及其对应的薪水涨幅growth，并按照growth进行升序" class="headerlink" title="4. 查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_noy以及其对应的薪水涨幅growth，并按照growth进行升序"></a>4. 查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_noy以及其对应的薪水涨幅growth，并按照growth进行升序</h3><p>表结构：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</div></pre></td></tr></table></figure></p>
<p>思路：</p>
<ul>
<li>看清题意~~</li>
<li><code>b</code>表为当前工资，<code>c</code>表为入职工资</li>
</ul>
<p>代码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.emp_no, (b.salary - c.salary) <span class="keyword">as</span> growth</div><div class="line"><span class="keyword">from</span></div><div class="line">    employees <span class="keyword">as</span> a</div><div class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> b</div><div class="line">    <span class="keyword">on</span> a.emp_no = b.emp_no <span class="keyword">and</span> b.to_date = <span class="string">'9999-01-01'</span></div><div class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> c</div><div class="line">    <span class="keyword">on</span> a.emp_no = c.emp_no <span class="keyword">and</span> a.hire_date = c.from_date</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> growth <span class="keyword">asc</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-统计出当前各个title类型对应的员工当前薪水对应的平均工资。&quot;&gt;&lt;a href=&quot;#1-统计出当前各个title类型对应的员工当前薪水对应的平均工资。&quot; class=&quot;headerlink&quot; title=&quot;1. 统计出当前各个title类型对应的员工当前薪水对应的平均工资。&quot;&gt;&lt;/a&gt;1. 统计出当前各个title类型对应的员工当前薪水对应的平均工资。&lt;/h3&gt;&lt;p&gt;表结构：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`salaries`&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`emp_no`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`salary`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`from_date`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`to_date`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`emp_no`&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;`from_date`&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;titles&quot;&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`emp_no`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`title`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`from_date`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`to_date`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INNER JOIN&lt;/code&gt;的使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GROUP BY&lt;/code&gt; + &lt;code&gt;AVG( )&lt;/code&gt;的使用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SQL" scheme="wanglilin.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="wanglilin.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>连续特征离散化的优点</title>
    <link href="wanglilin.github.io/2018/04/01/continuous-discretization/"/>
    <id>wanglilin.github.io/2018/04/01/continuous-discretization/</id>
    <published>2018-04-01T07:47:52.000Z</published>
    <updated>2018-04-07T08:18:08.305Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>模型是使用离散特征还是连续特征，其实是一个“海量离散特征 + 简单模型” 同 “少量连续特征 + 复杂模型”的权衡，既可以离散化用线性模型，也可以用连续特征加深度学习。就看是喜欢折腾特征还是喜欢折腾模型了。通常来说，前者容易，可以n个人一起并行做，有成功经验；后者目前看起来很赞，能走多远还需拭目以待。<br>                                    ——李沐</p>
</blockquote>
<p>在CTR预估中，通常都会用到离散特征特征 + LR，很少直接将连续值作为逻辑回归模型的特征输入，而是将连续特征离散化为一系列0、1类别特征交给逻辑回归模型，这样做的优势主要有以下几点：</p>
<a id="more"></a>
<p>1.离散特征的增加和减少都很容易，易于模型的快速迭代。<br>2.稀疏向量内积乘法运算速度快，计算结果方便存储，容易扩展；<br>3.离散化后的特征对异常数据具有很强的鲁棒性；<br>4.逻辑回归属于广义线性模型，表达能力有限；单变量离散化为<code>N</code>个后，每个变量有单独的权重，相当于为模型引入了非线性能力，能够提升模型的表达能力：</p>
<ul>
<li>加大拟合：在LR模型中，特征A作为连续特征对应的权重是Wa。A是线性特征，因为<code>y = Wa*A</code>,y对于A的导数就是Wa,如果离散化后，A按区间离散化为A_1,A_2,A_3。那么<code>y = w_1*A_1+w_2*A_2+w_3*A_3</code>.那么y对于A的函数就相当于分段的线性函数，y对于A的导数也随A的取值变动，所以，相当于引入了非线性。</li>
<li>防止过拟合：当使用连续特征时，一个特征对应于一个权重，那么，如果这个特征权重较大，模型就会很依赖于这个特征，这个特征的一个微小变化可能会导致最终结果产生很大的变化，这样子的模型很危险，当遇到新样本的时候很可能因为对这个特征过分敏感而得到错误的分类结果，也就是泛化能力差，容易过拟合。而使用离散特征的时候，一个特征变成了多个，权重也变为多个，那么之前连续特征对模型的影响力就被分散弱化了，从而降低了过拟合的风险。</li>
</ul>
<p>5.离散化后进行特征交叉，加入特征A离散化为M个值，特征B离散为N个值，那么交叉之后会有M*N个变量，进一步引入非线性，提升表达能力；<br>6.特征离散化后，模型更稳定，比如如果对用户年龄离散化，20-30作为一个区间，不会因为一个用户年龄长了一岁就变成一个完成不同的人，当然，需要注意的是，如何合理的划分区间。</p>
<h3 id="离散方法"><a href="#离散方法" class="headerlink" title="离散方法"></a>离散方法</h3><h4 id="等距离散"><a href="#等距离散" class="headerlink" title="等距离散"></a>等距离散</h4><p>取值范围均匀划成n等份，每份的间距相等</p>
<h4 id="等频离散"><a href="#等频离散" class="headerlink" title="等频离散"></a>等频离散</h4><p>均匀分为n等份，每份内包含的观察点数相同</p>
<h4 id="优化离散"><a href="#优化离散" class="headerlink" title="优化离散"></a>优化离散</h4><p>大致有两类方法：<br>1.卡方检验方法：（统计样本的实际观测值与理论推断值之间的偏离程度，卡方值越大，越不符合；卡方值越小，偏差越小，越趋于符合） </p>
<ul>
<li>分裂方法：找到一个分裂点看，左右2个区间，在目标值上分布是否有- 显著差异，有显著差异就分裂，否则就忽略。这个点可以每次找差异最大的点 </li>
<li>合并方法：先划分如果很小单元区间，按顺序合并在目标值上分布不显著的相邻区间，直到收敛 </li>
</ul>
<p>2.信息增益方法： </p>
<ul>
<li>分裂方法：找到一个分裂点看，左右2个区间，看分裂前后信息增益变化阈值，如果差值超过阈值（正值，分列前-分裂后信息熵），则分裂。每次找差值最大的点做分裂点，直到收敛 </li>
<li>合并方法：先划分 如果很小单元区间，按顺序合并信息增益小于阈值的相邻区间，直到收敛</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;模型是使用离散特征还是连续特征，其实是一个“海量离散特征 + 简单模型” 同 “少量连续特征 + 复杂模型”的权衡，既可以离散化用线性模型，也可以用连续特征加深度学习。就看是喜欢折腾特征还是喜欢折腾模型了。通常来说，前者容易，可以n个人一起并行做，有成功经验；后者目前看起来很赞，能走多远还需拭目以待。&lt;br&gt;                                    ——李沐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在CTR预估中，通常都会用到离散特征特征 + LR，很少直接将连续值作为逻辑回归模型的特征输入，而是将连续特征离散化为一系列0、1类别特征交给逻辑回归模型，这样做的优势主要有以下几点：&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="wanglilin.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="wanglilin.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征工程" scheme="wanglilin.github.io/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>高频面试题总结之带重复元素的排列</title>
    <link href="wanglilin.github.io/2018/04/01/permutations/"/>
    <id>wanglilin.github.io/2018/04/01/permutations/</id>
    <published>2018-04-01T07:41:24.000Z</published>
    <updated>2018-04-01T07:43:41.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h3><p><a href="http://www.lintcode.com/zh-cn/problem/permutations-ii/" target="_blank" rel="external">LintCode No.16</a></p>
<blockquote>
<p>给出一个具有重复数字的列表，找出列表所有不同的排列。</p>
<p>样例<br>给出列表 <code>[1,2,2]</code>，不同的排列有：<br><code>[
     [1,2,2],
     [2,1,2],
     [2,2,1]
]</code></p>
</blockquote>
<a id="more"></a>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>回溯法 + 判断语句即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">        <span class="comment">//判断语句</span></div><div class="line">          <span class="keyword">if</span> (visited[i] == <span class="number">1</span> || </div><div class="line">              (i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] &amp;&amp; visited[i-<span class="number">1</span>] == <span class="number">0</span>))</div><div class="line">              <span class="keyword">continue</span>;</div><div class="line">          </div><div class="line">        <span class="comment">//回溯</span></div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>上面的判断主要是为了去除重复元素影响。<br>比如，给出一个排好序的数组，[1,2,2]，那么第一个2和第二2如果在结果中互换位置，我们也认为是同一种方案，所以我们强制要求相同的数字，原来排在前面的，在结果当中也应该排在前面，这样就保证了唯一性。所以当前面的2还没有使用的时候，就 不应该让后面的2使用。</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param :  A list of integers</div><div class="line">     * @return: A list of unique permutations</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        ArrayList&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) &#123;</div><div class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Arrays.sort(nums);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            visited[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        helper(result, list, nums, visited);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(ArrayList&lt;List&lt;Integer&gt;&gt; result,</span></span></div><div class="line">                        List&lt;Integer&gt; list, <span class="keyword">int</span>[] nums, <span class="keyword">int</span>[] visited) &#123;</div><div class="line">                            </div><div class="line">        <span class="keyword">if</span> (list.size() == nums.length) &#123;</div><div class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">1</span> || </div><div class="line">                (i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] &amp;&amp; visited[i-<span class="number">1</span>] == <span class="number">0</span>))</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            </div><div class="line">            list.add(nums[i]);</div><div class="line">            visited[i] = <span class="number">1</span>;</div><div class="line">            helper(result, list, nums, visited);</div><div class="line">            visited[i] = <span class="number">0</span>;</div><div class="line">            list.remove(list.size() - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">           </div><div class="line">                            </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">   </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink&quot; title=&quot;题目详情&quot;&gt;&lt;/a&gt;题目详情&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/permutations-ii/&quot;&gt;LintCode No.16&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给出一个具有重复数字的列表，找出列表所有不同的排列。&lt;/p&gt;
&lt;p&gt;样例&lt;br&gt;给出列表 &lt;code&gt;[1,2,2]&lt;/code&gt;，不同的排列有：&lt;br&gt;&lt;code&gt;[
     [1,2,2],
     [2,1,2],
     [2,2,1]
]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>高频面试题总结之最长上升子序列</title>
    <link href="wanglilin.github.io/2018/03/31/longest-inceasing-subsequence/"/>
    <id>wanglilin.github.io/2018/03/31/longest-inceasing-subsequence/</id>
    <published>2018-03-31T14:00:59.000Z</published>
    <updated>2018-03-31T14:04:39.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h3><p><a href="http://www.lintcode.com/zh-cn/problem/longest-increasing-subsequence/" target="_blank" rel="external">LintCode No.76</a></p>
<blockquote>
<p>给定一个整数序列，找到最长上升子序列（LIS），返回LIS的长度。</p>
<p><strong>最长上升子序列的定义：</strong><br>最长上升子序列问题是在一个无序的给定序列中找到一个尽可能长的由低到高排列的子序列，这种子序列不一定是连续的或者唯一的。</p>
<p><strong>样例</strong><br>给出 <code>[5,4,1,2,3]</code>，LIS 是 <code>[1,2,3]</code>，返回 3<br>给出 <code>[4,2,4,5,3,7]</code>，LIS 是 <code>[2,4,5,7]</code>，返回 4</p>
</blockquote>
<a id="more"></a>
<h3 id="解法1-动态规划"><a href="#解法1-动态规划" class="headerlink" title="解法1 动态规划"></a>解法1 动态规划</h3><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p> 两个<code>for</code>循环遍历数组：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">               <span class="keyword">if</span>(nums[i] &gt; nums[j]) &#123;</div><div class="line">                   dp[i] = Math.max(dp[j] + <span class="number">1</span>, dp[i]);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>状态转移：<br><code>dp[i] = Math.max(dp[j] + 1, dp[i])</code><br>时间复杂度：<br><code>O(n^2)</code></p>
<p>完整代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestIncreasingSubsequence</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            dp[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j]) &#123;</div><div class="line">                    dp[i] = Math.max(dp[j] + <span class="number">1</span>, dp[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Arrays.sort(dp);</div><div class="line">        <span class="keyword">return</span> dp[nums.length-<span class="number">1</span>];</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>可以尝试使用二分查找来优化，具体思路如下：</p>
<ol>
<li>建个数组，令数组中的每个数的值都为<code>Integer.MAX_VALUE</code></li>
<li>从题目所给序列中，依次取出每个值，更新数组</li>
<li>更新数组的规则为：找到第一个大于取出值的数组元素，替代其值</li>
<li>最后，从后往前对数组进行遍历，找到第一个非<code>Integer.MAX_VALUE</code>的数组元素的<code>index</code>即为我们所求的结果。</li>
</ol>
<p>完整代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestIncreasingSubsequence</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] minLast = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</div><div class="line">        minLast[<span class="number">0</span>] = Integer.MIN_VALUE;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</div><div class="line">            minLast[i] = Integer.MAX_VALUE;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            <span class="comment">// find the first number in minLast &gt;= nums[i]</span></div><div class="line">            <span class="keyword">int</span> index = binarySearch(minLast, nums[i]);</div><div class="line">            minLast[index] = nums[i];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">            <span class="keyword">if</span> (minLast[i] != Integer.MAX_VALUE) &#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// find the first number &gt; num</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] minLast, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = minLast.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = ((end - start) &gt;&gt; <span class="number">1</span>) + start;</div><div class="line">            <span class="keyword">if</span> (minLast[mid] &lt; num) &#123;</div><div class="line">                start = mid + <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                end = mid - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> end + <span class="number">1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>时间复杂度为<code>O(nlogn)</code>，相比动规，做到了一定程度上的优化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink&quot; title=&quot;题目详情&quot;&gt;&lt;/a&gt;题目详情&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/longest-increasing-subsequence/&quot;&gt;LintCode No.76&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个整数序列，找到最长上升子序列（LIS），返回LIS的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最长上升子序列的定义：&lt;/strong&gt;&lt;br&gt;最长上升子序列问题是在一个无序的给定序列中找到一个尽可能长的由低到高排列的子序列，这种子序列不一定是连续的或者唯一的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例&lt;/strong&gt;&lt;br&gt;给出 &lt;code&gt;[5,4,1,2,3]&lt;/code&gt;，LIS 是 &lt;code&gt;[1,2,3]&lt;/code&gt;，返回 3&lt;br&gt;给出 &lt;code&gt;[4,2,4,5,3,7]&lt;/code&gt;，LIS 是 &lt;code&gt;[2,4,5,7]&lt;/code&gt;，返回 4&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>高频面试题之二分查找</title>
    <link href="wanglilin.github.io/2018/03/31/binarysearch/"/>
    <id>wanglilin.github.io/2018/03/31/binarysearch/</id>
    <published>2018-03-31T09:56:25.000Z</published>
    <updated>2018-03-31T10:01:06.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分查找二三事"><a href="#二分查找二三事" class="headerlink" title="二分查找二三事"></a>二分查找二三事</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>华为综合面碰到一个Cloud BU的大佬，唉，我明明面的是算法岗，这位大佬死抓我没有计算机基础不放，先是针对进程和线程死磕，而后怀疑我的开发水平，最后让我白板写二分查找，第一次白板写代码，很简单的题目，觉得最重要的是理清思路，先写个代码流程图再动手写代码相对会好点，以后面试再遇到白板编程就这么干吧，那天虽然把整体思路都理出来了，也写了个大概，但觉得还是不熟练，还是想复习下二分查找，二分查找说是简单，但其中关于边界的处理其实需要一波思考。这篇文章主要以一道lintcode题目，引发对二分查找的边界值的思考，以及一些变形题的实现，好吧，废话不多说，让我们开始吧…</p>
<a id="more"></a>
<h3 id="一道LintCode题引发的思考"><a href="#一道LintCode题引发的思考" class="headerlink" title="一道LintCode题引发的思考"></a>一道LintCode题引发的思考</h3><blockquote>
<p>Guess Number Game<br>We are playing the Guess Game. The game is as follows:<br>I pick a number from 1 to n. You have to guess which number I picked.Every time you guess wrong, I’ll tell you whether the number is higher or lower.You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):</p>
<p><strong>样例</strong><br>n = 10, I pick 4 (but you don’t know)<br>Return 4. Correct !</p>
</blockquote>
<p>思路：一开始觉得这就是普通的二分查找问题，便写出如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* The guess API is defined in the parent class GuessGame.</span></div><div class="line">   @param num, your guess</div><div class="line">   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</div><div class="line">      int guess(int num); */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">GuessGame</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> n an integer</div><div class="line">     * <span class="doctag">@return</span> the number you guess</div><div class="line">     **/</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">guessNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="comment">// Write your code here</span></div><div class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> right = n;</div><div class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (right + left) /<span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> res = guess(mid);</div><div class="line">            <span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(res == -<span class="number">1</span>) &#123;</div><div class="line">                right = mid - <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                left = mid + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果在下列测试用例时发生错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">输入</div><div class="line">2147483647</div><div class="line">2147483647</div><div class="line"></div><div class="line">期望答案</div><div class="line">2147483647</div><div class="line"></div><div class="line">提示</div><div class="line">Your code ran too much time than we expected. Check your time complexity. Time limit exceeded usually caused by infinite loop if your time complexity is the best.</div></pre></td></tr></table></figure></p>
<p>感觉是发生了溢出，因此将mid的计算方式改成如下形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>这句简单的代码做了两个改进：</p>
<ul>
<li>通过加的形式计算mid，而非直接除以2防止溢出</li>
<li>利用位运算进行除以2的计算更加方便</li>
<li>注意加号和<code>&gt;&gt;</code>的优先级，所以要加个括号</li>
</ul>
<p>最后顺利AC。<br>这就引发了我对二分查找的思考。</p>
<p>先来看看什么是二分查找：</p>
<blockquote>
<p>在计算机科学中，二分搜索（binary search），也称折半搜索（half-interval search）、对数搜索（logarithmic search），是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p>
</blockquote>
<p>常规套路：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> n, <span class="keyword">int</span> value)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> right = n - <span class="number">1</span>;</div><div class="line">    <span class="comment">//如果这里是int right = n 的话，那么下面有两处地方需要修改，以保证一一对应：</span></div><div class="line">    <span class="comment">//1、下面循环的条件则是while(left &lt; right)</span></div><div class="line">    <span class="comment">//2、循环内当 array[middle] &gt; value 的时候，right = mid</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (left &lt;= right)  <span class="comment">//循环条件，适时而变</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);  <span class="comment">//防止溢出，移位也更高效。同时，每次循环都需要更新。</span></div><div class="line">        <span class="keyword">if</span> (array[middle] &gt; value)</div><div class="line">            right = middle - <span class="number">1</span>;  <span class="comment">//right赋值，适时而变</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (array[middle] &lt; value)</div><div class="line">            left = middle + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> middle;</div><div class="line">        <span class="comment">//可能会有读者认为刚开始时就要判断相等，但毕竟数组中不相等的情况更多</span></div><div class="line">        <span class="comment">//如果每次循环都判断一下是否相等，将耗费时间</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="题目变形"><a href="#题目变形" class="headerlink" title="题目变形"></a>题目变形</h3><h4 id="1-LintCode-14题"><a href="#1-LintCode-14题" class="headerlink" title="1. LintCode 14题"></a>1. <a href="">LintCode 14题</a></h4><p><strong>题目描述：</strong></p>
<blockquote>
<p>给定一个排序的整数数组（升序）和一个要查找的整数target，用O(logn)的时间查找到target第一次出现的下标（从0开始），如果target不存在于数组中，返回-1。</p>
<p><strong>样例：</strong><br>在数组 [1, 2, 3, 3, 4, 5, 10] 中二分查找3，返回2。</p>
</blockquote>
<p><strong>思路：</strong><br>改变判断条件的临界值</p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> nums: The integer array.</div><div class="line">     * <span class="doctag">@param</span> target: Target to find.</div><div class="line">     * <span class="doctag">@return</span>: The first position of target. Position starts from 0.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span> || nums == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</div><div class="line">            mid = start + ((end - start) &gt;&gt; <span class="number">1</span>);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target)</div><div class="line">                end = mid - <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                start = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">       <span class="keyword">return</span> nums[end+<span class="number">1</span>] == target ? end + <span class="number">1</span> : -<span class="number">1</span>;</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-LintCode-60题"><a href="#2-LintCode-60题" class="headerlink" title="2. LintCode 60题"></a>2. <a href="http://www.lintcode.com/zh-cn/problem/search-insert-position/" target="_blank" rel="external">LintCode 60题</a></h4><p><strong>题目描述：</strong></p>
<blockquote>
<p>给定一个排序数组和一个目标值，如果在数组中找到目标值则返回索引。如果没有，返回到它将会被按顺序插入的位置。<br>你可以假设在数组中无重复元素。</p>
<p><strong>样例：</strong><br>[1,3,5,6]，5 → 2</p>
<p>[1,3,5,6]，2 → 1</p>
<p>[1,3,5,6]， 7 → 4</p>
<p>[1,3,5,6]，0 → 0</p>
</blockquote>
<p>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> A: an integer sorted array</div><div class="line">     * <span class="doctag">@param</span> target: an integer to be inserted</div><div class="line">     * <span class="doctag">@return</span>: An integer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (A.length == <span class="number">0</span> || A == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> right = A.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</div><div class="line">            mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (A[mid] &lt; target) &#123;</div><div class="line">                left = mid + <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &gt;= target) &#123;</div><div class="line">                right = mid - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//right是数组最后一个元素的情况</span></div><div class="line">        <span class="keyword">if</span> (right == A.length - <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> right+<span class="number">1</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> A[right+<span class="number">1</span>] &gt;= target ? right+<span class="number">1</span> : right;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二分查找二三事&quot;&gt;&lt;a href=&quot;#二分查找二三事&quot; class=&quot;headerlink&quot; title=&quot;二分查找二三事&quot;&gt;&lt;/a&gt;二分查找二三事&lt;/h2&gt;&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;华为综合面碰到一个Cloud BU的大佬，唉，我明明面的是算法岗，这位大佬死抓我没有计算机基础不放，先是针对进程和线程死磕，而后怀疑我的开发水平，最后让我白板写二分查找，第一次白板写代码，很简单的题目，觉得最重要的是理清思路，先写个代码流程图再动手写代码相对会好点，以后面试再遇到白板编程就这么干吧，那天虽然把整体思路都理出来了，也写了个大概，但觉得还是不熟练，还是想复习下二分查找，二分查找说是简单，但其中关于边界的处理其实需要一波思考。这篇文章主要以一道lintcode题目，引发对二分查找的边界值的思考，以及一些变形题的实现，好吧，废话不多说，让我们开始吧…&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>高频面试题总结 —— 动规之拼凑面额</title>
    <link href="wanglilin.github.io/2018/03/28/dp-money/"/>
    <id>wanglilin.github.io/2018/03/28/dp-money/</id>
    <published>2018-03-28T07:47:57.000Z</published>
    <updated>2018-03-28T07:51:23.123Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高频面试题总结-——-动规之拼凑面额"><a href="#高频面试题总结-——-动规之拼凑面额" class="headerlink" title="高频面试题总结 —— 动规之拼凑面额"></a>高频面试题总结 —— 动规之拼凑面额</h3><p><a href="https://www.nowcoder.com/practice/14cf13771cd840849a402b848b5c1c93?tpId=85&amp;tqId=29884&amp;tPage=3&amp;rp=3&amp;ru=/ta/2017test&amp;qru=/ta/2017test/question-ranking" target="_blank" rel="external">原题地址</a></p>
<h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote>
<p>给你六种面额1、5、10、20、50、100元的纸币，假设每种币值的数量都足够多，编写程序求组成N元（N为0-10000的非负整数）的不同组合的个数。</p>
<p><strong>样例：</strong><br>输入<br><code>5</code><br>输出<br><code>2</code></p>
</blockquote>
<a id="more"></a>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul>
<li>很明显，这是背包问题的变种，需要用到动态规划来解</li>
<li>用<code>dp[i][j]</code>表示当有前<code>i</code>种面额时，组成<code>j</code>元的不同组合的个数</li>
</ul>
<p><strong>状态转移方程：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i-<span class="number">1</span>][j-coins[i]]</div></pre></td></tr></table></figure></p>
<p><strong>tips：</strong><br>每一次都是基于前面一次的结果，即无后效性，为了降低空间复杂度，我们可以做如下改进：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dp[j] = dp[j] + dp[j-coins[i]]</div></pre></td></tr></table></figure></p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> sum = scan.nextInt();</div><div class="line">        <span class="comment">//为int时只能 ac 80%</span></div><div class="line">        <span class="keyword">long</span>[] dp = <span class="keyword">new</span> <span class="keyword">long</span>[sum+<span class="number">1</span>];</div><div class="line">        dp[<span class="number">0</span>] = <span class="number">1L</span>;</div><div class="line">        <span class="keyword">int</span>[] coins = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coins.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sum; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (j &gt;= coins[i])</div><div class="line">                    dp[j] = dp[j] + dp[j - coins[i]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(dp[sum]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;高频面试题总结-——-动规之拼凑面额&quot;&gt;&lt;a href=&quot;#高频面试题总结-——-动规之拼凑面额&quot; class=&quot;headerlink&quot; title=&quot;高频面试题总结 —— 动规之拼凑面额&quot;&gt;&lt;/a&gt;高频面试题总结 —— 动规之拼凑面额&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/14cf13771cd840849a402b848b5c1c93?tpId=85&amp;amp;tqId=29884&amp;amp;tPage=3&amp;amp;rp=3&amp;amp;ru=/ta/2017test&amp;amp;qru=/ta/2017test/question-ranking&quot;&gt;原题地址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;给你六种面额1、5、10、20、50、100元的纸币，假设每种币值的数量都足够多，编写程序求组成N元（N为0-10000的非负整数）的不同组合的个数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例：&lt;/strong&gt;&lt;br&gt;输入&lt;br&gt;&lt;code&gt;5&lt;/code&gt;&lt;br&gt;输出&lt;br&gt;&lt;code&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>高频面试题之最长公共系列</title>
    <link href="wanglilin.github.io/2018/03/27/longest-common/"/>
    <id>wanglilin.github.io/2018/03/27/longest-common/</id>
    <published>2018-03-27T04:32:14.000Z</published>
    <updated>2018-03-27T04:36:27.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高频面试题总结-——-最长公共系列"><a href="#高频面试题总结-——-最长公共系列" class="headerlink" title="高频面试题总结 —— 最长公共系列"></a>高频面试题总结 —— 最长公共系列</h3><h4 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h4><blockquote>
<p>给出两个字符串，找到最长公共子串，并返回其长度。</p>
<p><strong>样例:</strong><br>给出A=“ABCD”，B=“CBCE”，返回 2</p>
</blockquote>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>动态规划求解：</p>
<ul>
<li>当<code>A.charAt(i) == B.charAt(j)</code>, 状态转移：<code>dp[i][j] = dp[i-1][j-1] + 1</code></li>
<li>否则：<code>dp[i][j] = 0</code></li>
<li>最后求<code>max(dp)</code></li>
</ul>
<a id="more"></a>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param A: A string</div><div class="line">     * @param B: A string</div><div class="line">     * @return: the length of the longest common substring.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(String A, String B)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">int</span> lenA = A.length();</div><div class="line">        <span class="keyword">int</span> lenB = B.length();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[lenA + <span class="number">1</span>][lenB + <span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenA; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenB; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (A.charAt(i - <span class="number">1</span>) == B.charAt(j - <span class="number">1</span>)) &#123;</div><div class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    dp[i][j] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenA; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenB; j++) &#123;</div><div class="line">                max = Math.max(dp[i][j], max);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><blockquote>
<p>给出两个字符串，找到最长公共子序列(LCS)，返回LCS的长度。</p>
<p><strong>样例:</strong><br>给出”ABCD” 和 “EDCA”，这个LCS是 “A” (或 D或C)，返回1<br>给出 “ABCD” 和 “EACB”，这个LCS是”AC”返回 2</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param A: A string</div><div class="line">     * @param B: A string</div><div class="line">     * @return: The length of longest common subsequence of A and B</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String A, String B)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        </div><div class="line">        <span class="keyword">int</span> lenA = A.length();</div><div class="line">        <span class="keyword">int</span> lenB = B.length();</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[lenA + <span class="number">1</span>][lenB + <span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (lenA == <span class="number">0</span> || lenB == <span class="number">0</span> || A == <span class="keyword">null</span> || B == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenA; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenB; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (A.charAt(i - <span class="number">1</span>) == B.charAt(j - <span class="number">1</span>))</div><div class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> dp[lenA][lenB];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="网易面试题"><a href="#网易面试题" class="headerlink" title="网易面试题"></a>网易面试题</h3><blockquote>
<p>牛牛拿到了一个藏宝图，顺着藏宝图的指示，牛牛发现了一个藏宝盒，藏宝盒上有一个机关，机关每次会显示两个字符串 s 和 t，根据古老的传说，牛牛需要每次都回答 t 是否是 s 的子序列。注意，子序列不要求在原字符串中是连续的，例如串 abc，它的子序列就有 {空串, a, b, c, ab, ac, bc, abc} 8 种。</p>
<p><strong>样例：</strong><br>输入:<br><code>x.nowcoder.com</code><br><code>ooo</code><br>输出:<br><code>Yes</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        String s = scan.nextLine();</div><div class="line">        String t = scan.nextLine();</div><div class="line">        <span class="keyword">int</span> lenS = s.length();</div><div class="line">        <span class="keyword">int</span> lenT = t.length();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[lenS+<span class="number">1</span>][lenT+<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (lenT == <span class="number">0</span> || lenS == <span class="number">0</span> || s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"No"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenS; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenT; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) == t.charAt(j-<span class="number">1</span>)) &#123;</div><div class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (dp[lenS][lenT] == lenT) &#123;</div><div class="line">            System.out.println(<span class="string">"Yes"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"No"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;高频面试题总结-——-最长公共系列&quot;&gt;&lt;a href=&quot;#高频面试题总结-——-最长公共系列&quot; class=&quot;headerlink&quot; title=&quot;高频面试题总结 —— 最长公共系列&quot;&gt;&lt;/a&gt;高频面试题总结 —— 最长公共系列&lt;/h3&gt;&lt;h4 id=&quot;最长公共子串&quot;&gt;&lt;a href=&quot;#最长公共子串&quot; class=&quot;headerlink&quot; title=&quot;最长公共子串&quot;&gt;&lt;/a&gt;最长公共子串&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;给出两个字符串，找到最长公共子串，并返回其长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例:&lt;/strong&gt;&lt;br&gt;给出A=“ABCD”，B=“CBCE”，返回 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h4&gt;&lt;p&gt;动态规划求解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当&lt;code&gt;A.charAt(i) == B.charAt(j)&lt;/code&gt;, 状态转移：&lt;code&gt;dp[i][j] = dp[i-1][j-1] + 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则：&lt;code&gt;dp[i][j] = 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后求&lt;code&gt;max(dp)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>高频面试题总结之翻转链表</title>
    <link href="wanglilin.github.io/2018/03/27/reverse-linked-list/"/>
    <id>wanglilin.github.io/2018/03/27/reverse-linked-list/</id>
    <published>2018-03-27T02:53:02.000Z</published>
    <updated>2018-03-27T03:03:56.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高频面试题总结-——-翻转链表"><a href="#高频面试题总结-——-翻转链表" class="headerlink" title="高频面试题总结 —— 翻转链表"></a>高频面试题总结 —— 翻转链表</h3><p>翻转链表是面试中常见的题目，这并不是什么难题，因为要实现翻转，所以一般需要有两个ListNode，通过改变这两个ListNode的前后节点及循环移动这两个节点从而实现链表的翻转。</p>
<a id="more"></a>
<h4 id="初级翻转链表"><a href="#初级翻转链表" class="headerlink" title="初级翻转链表"></a>初级翻转链表</h4><blockquote>
<p>给出一个链表1-&gt;2-&gt;3-&gt;null，这个翻转后的链表为3-&gt;2-&gt;1-&gt;null</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for ListNode.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int val) &#123;</div><div class="line"> *         this.val = val;</div><div class="line"> *         this.next = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param head: n</div><div class="line">     * @return: The new head of reversed linked list.</div><div class="line">     */</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 1.</div><div class="line">         * </div><div class="line">         * */</div><div class="line">        <span class="comment">/**非递归实现</span></div><div class="line">        if (head == null || head.next == null) &#123;</div><div class="line">            return head;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ListNode cur = head;</div><div class="line">        ListNode dummy = new ListNode(-1);</div><div class="line">        </div><div class="line">        while (cur != null) &#123;</div><div class="line">            ListNode temp = cur.next;</div><div class="line">            cur.next = dummy.next;</div><div class="line">            dummy.next = cur;</div><div class="line">            cur = temp;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return dummy.next;**/</div><div class="line">        </div><div class="line">        <span class="comment">//递归实现</span></div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        &#125;</div><div class="line">        ListNode nextNode = head.next;</div><div class="line">        head.next = <span class="keyword">null</span>;</div><div class="line">        ListNode reverseResourse = reverse(nextNode);</div><div class="line">        nextNode.next = head;</div><div class="line">        <span class="keyword">return</span> reverseResourse;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="翻转部分链表"><a href="#翻转部分链表" class="headerlink" title="翻转部分链表"></a>翻转部分链表</h4><blockquote>
<p>翻转链表中第m个节点到第n个节点的部分<br>给出链表1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null， m = 2 和n = 4，返回1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;null</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for ListNode</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123;</div><div class="line"> *         val = x;</div><div class="line"> *         next = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> head: ListNode head is the head of the linked list </div><div class="line">     * <span class="doctag">@param</span> m: An integer</div><div class="line">     * <span class="doctag">@param</span> n: An integer</div><div class="line">     * <span class="doctag">@return</span>: The head of the reversed ListNode</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</div><div class="line">        dummy.next = head;</div><div class="line">        ListNode pre = dummy;</div><div class="line">        ListNode cur = head;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</div><div class="line">            pre = pre.next;</div><div class="line">            cur = cur.next;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//与翻转链表的不同是要保持第一个节点不变</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - m; i++) &#123;</div><div class="line">            ListNode temp = cur.next;</div><div class="line">            cur.next = temp.next;</div><div class="line">            temp.next = pre.next;</div><div class="line">            pre.next = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;高频面试题总结-——-翻转链表&quot;&gt;&lt;a href=&quot;#高频面试题总结-——-翻转链表&quot; class=&quot;headerlink&quot; title=&quot;高频面试题总结 —— 翻转链表&quot;&gt;&lt;/a&gt;高频面试题总结 —— 翻转链表&lt;/h3&gt;&lt;p&gt;翻转链表是面试中常见的题目，这并不是什么难题，因为要实现翻转，所以一般需要有两个ListNode，通过改变这两个ListNode的前后节点及循环移动这两个节点从而实现链表的翻转。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="高频面试题总结" scheme="wanglilin.github.io/tags/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>天池比赛小结</title>
    <link href="wanglilin.github.io/2018/03/05/ksum/"/>
    <id>wanglilin.github.io/2018/03/05/ksum/</id>
    <published>2018-03-05T03:45:50.000Z</published>
    <updated>2018-03-05T03:58:40.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="天池比赛小结1"><a href="#天池比赛小结1" class="headerlink" title="天池比赛小结1"></a>天池比赛小结1</h3><h4 id="巧妙利用回溯法解决路径提交所引发的血案"><a href="#巧妙利用回溯法解决路径提交所引发的血案" class="headerlink" title="巧妙利用回溯法解决路径提交所引发的血案"></a><strong>巧妙利用回溯法解决路径提交所引发的血案</strong></h4><h4 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h4><p>前一阵子参加了天池比赛<a href="https://tianchi.aliyun.com/competition/introduction.htm?spm=5176.100150.711.8.48172009pOnD7K&amp;raceId=231622" target="_blank" rel="external">气象数据领航无人飞行器线路优化大赛</a>，凭借着初赛一步步的稳扎稳打以及最后时刻的一波套磁 + 人品爆发，以第三名的成绩进入了决赛。但在决赛阶段，我们所遇到的最大问题并不是此次赛题中的两个重点：气象数据回归或路径规划算法，令我们差点止步前 10 的是提交路径之后，由于不同路径之间的各种组合导致的无法推知到底是哪些路径成功抵达。后来我们用了一些巧妙的解法在某种程度上解决了这个问题（并没有完全解决，下文会细讲），因此，这也是此篇博客诞生的原因，想要记录下解决这一个问题的思路。</p>
<a id="more"></a>
<h4 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h4><p>该比赛要求我们规划 5 天之中的 10 条飞行路线，即总共要规划 5*10 = 50 条，并要求时间最短，安全性最高。那么，这就会引发如下问题：</p>
<ul>
<li>某几条路径都是最短路径，所以其耗时是一样的。譬如：从起始点飞往城市 2 所耗费的最短时间是 200 min，那么如果我们所提交的路径之中5天的飞往城市2的时间都是最短时间，那么我们则无法推知到底是哪几条过了。</li>
<li>不同路径之间的组合导致同一个分数有多种方案。譬如：飞往城市 1 用了 150 min， 飞往城市 2 用了250 min , 飞往城市 3 用了 100 min，飞往城市 4 用了 300 min，那么，如果最后的成绩显示是 400 min，那么我们将无法得知是路径1和2到达，还是路径3和4到达。</li>
</ul>
<p>好，那我们其实在决赛前有想到会出现这种情况，不过我们还是too young，忽略了问题的复杂性，我们一开始的想法是只要对每条路径进行微调（在时间允许范围内+2/+4/+8啥的）从而区分耗时相同的路径即可，然而…这种解决方式会加剧问题 2 （譬如路径<code>A+B = C+D</code>，微调过后仍会出现 <code>（A+2）+ （B+6）= (C+4) + (C+4)</code> 等情况的出现），即会出现更多的不同路径组合而总消耗时间相同的情况。 所以还要花很多时间在微调数的设置上，并没有从根本上解决问题。</p>
<h4 id="2-伪解决方案"><a href="#2-伪解决方案" class="headerlink" title="2 伪解决方案"></a>2 伪解决方案</h4><p>为什么说其是伪解决方案呢，因为该解决方案并没有完全解决我们的问题，但是可以某种程度上解决我们的问题。话不多说，我们最终采用的方案如下：</p>
<ul>
<li>Step 1 : 每次提交只提交少量的线路，比如，一次提交只涉及5天中某一天的10条路线</li>
<li>Step 2：通过基于<code>dfs</code>的<code>改进k数和算法</code>检验这些线路是否存在不同组合而消耗相同时间的问题</li>
<li>Step 3：若有，则继续微调每条线路的耗时，若没有，则可以提交</li>
</ul>
<h4 id="3-K数和"><a href="#3-K数和" class="headerlink" title="3 K数和"></a>3 K数和</h4><p>其实这个问题究其本质，就是K数和问题。<br>K数和问题定义：</p>
<blockquote>
<p>Given n unique integers, number k (1&lt;=k&lt;=n) and target.<br>Find all possible k integers where their sum is target.</p>
</blockquote>
<p><code>样例：</code></p>
<blockquote>
<p>给出[1,2,3,4]，k=2， target=5，返回 [[1,4],[2,3]]</p>
</blockquote>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>利用递归与回溯来解</p>
<h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><ul>
<li><p>Java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> A: an integer array.</div><div class="line">     * <span class="doctag">@param</span> k: a positive integer (k &lt;= length(A))</div><div class="line">     * <span class="doctag">@param</span> target: a integer</div><div class="line">     * <span class="doctag">@return</span> a list of lists of integer </div><div class="line">     */ </div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; kSumII(<span class="keyword">int</span> A[], <span class="keyword">int</span> k, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        ArrayList&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        helper(result, path, A, k, target, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result,ArrayList&lt;Integer&gt; path,<span class="keyword">int</span> [] A,<span class="keyword">int</span> k ,<span class="keyword">int</span> remain,<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(path.size() == k)&#123;</div><div class="line">            <span class="keyword">if</span>(remain ==<span class="number">0</span>)</div><div class="line">                result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(path));</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i&lt; A.length; i++)&#123;</div><div class="line">            path.add(A[i]);</div><div class="line">            helper(result, path, A, k, remain - A[i], i+<span class="number">1</span>);</div><div class="line">            path.remove(path.size() - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Python</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    @param A: An integer array.</div><div class="line">    @param k: A positive integer (k &lt;= length(A))</div><div class="line">    @param target: Integer</div><div class="line">    @return a list of lists of integer </div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kSumII</span><span class="params">(self, A, k, target)</span>:</span></div><div class="line">        <span class="comment"># write your code here</span></div><div class="line">        path = []</div><div class="line">        result = []</div><div class="line">        self.helper(result,path,A,k,target,<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self,result , path ,A ,k,target,index)</span>:</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> len(path) == k:</div><div class="line">            <span class="keyword">if</span> target==<span class="number">0</span>:</div><div class="line">                result.append(path[:])</div><div class="line">        <span class="keyword">else</span>: </div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index,len(A)):</div><div class="line">                path.append(A[i])</div><div class="line">                self.helper(result,path,A,k,target - A[i] ,i + <span class="number">1</span>)</div><div class="line">                path.pop()</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="4-K数和-amp-字典"><a href="#4-K数和-amp-字典" class="headerlink" title="4 K数和&amp;字典"></a>4 K数和&amp;字典</h4><p>要将K数和与本问题结合，还需要做一点小小的处理。即我们希望最后是直接输出路径的组合，而非路径耗时的组合，因此，最终我们的代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetSuccessPath</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, results_len, path, len_list, target, index)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        DFS+回溯法</div><div class="line">        :param results_len: 成功到达的每条路径所耗时长组成的list</div><div class="line">        :param path: 成功到达的路径组合</div><div class="line">        :param len_list: 提交结果中每条路径所耗时长组成的list</div><div class="line">        :param target: 总共耗时</div><div class="line">        :param index: 当前路径的index</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> target == <span class="number">0</span>:</div><div class="line">            results_len.append(path[:])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index, len(len_list)):</div><div class="line">                path.append(len_list[i])</div><div class="line">                self.helper(results_len, path, len_list, target - len_list[i], i + <span class="number">1</span>)</div><div class="line">                path.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span><span class="params">(self, dict_path_len, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        用于快速求得提交路径中成功到达的路径</div><div class="line">        :param dict_path_len: 将提交结果用字典形式表示出来，&#123;key: path 形如"day6path5", value: len 路径所耗时长&#125;</div><div class="line">        :param target: 提交之后得到的总时间</div><div class="line">        :return: 成功到达的路径，每个list代表一种可能，如[['day6path5', 'day6path6'], ['day6path7']]</div><div class="line">        """</div><div class="line">        len_list = [value <span class="keyword">for</span> key, value <span class="keyword">in</span> dict_path_len.items()]  <span class="comment"># 求提交结果中每条路径所耗时长组成的list</span></div><div class="line">        <span class="comment"># key value对调，为后续依靠路径长度得到成功到达的路径做准备</span></div><div class="line">        dict_len_path = &#123;value: key <span class="keyword">for</span> key, value <span class="keyword">in</span> dict_path_len.items()&#125;</div><div class="line">        path = []</div><div class="line">        results_len = []</div><div class="line">        self.helper(results_len, path, len_list, target, <span class="number">0</span>)</div><div class="line">        <span class="comment"># 根据成功到达路径长度的组合得到成功到达的各个路径名</span></div><div class="line">        results_path = []</div><div class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results_len:</div><div class="line">            result_path = [dict_len_path.get(length) <span class="keyword">for</span> length <span class="keyword">in</span> result]</div><div class="line">            results_path.append(result_path)</div><div class="line">        <span class="keyword">return</span> results_path</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    dict_path_len = &#123;<span class="string">"day6path5"</span>: <span class="number">1</span>, <span class="string">"day6path6"</span>: <span class="number">15</span>, <span class="string">"day6path7"</span>: <span class="number">3</span>, <span class="string">"day6path8"</span>: <span class="number">4</span>, <span class="string">"day6path9"</span>: <span class="number">5</span>&#125;</div><div class="line">    g = GetSuccessPath()</div><div class="line">    print(g.get_path(dict_path_len, <span class="number">16</span>))</div></pre></td></tr></table></figure></p>
<p>以上代码未考虑到线上评分机制：<br><strong>目标函数值 = 24<em>60</em>飞行器坠毁数 + 顺利到达的飞行器总飞行时长（分钟）</strong></p>
<p>考虑以上机制后，我们的代码改进为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Time    : 2018/2/2 16:50</span></div><div class="line"><span class="comment"># @Author  : WangliLin</span></div><div class="line"><span class="comment"># @Site    : </span></div><div class="line"><span class="comment"># @File    : get_success_path.py</span></div><div class="line"><span class="comment"># @Software: PyCharm</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetSuccessPath</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, results_len, path, len_list, target, index)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        DFS+回溯法</div><div class="line">        :param results_len: 成功到达的每条路径所耗时长组成的list</div><div class="line">        :param path: 成功到达的路径组合</div><div class="line">        :param len_list: 提交结果中每条路径所耗时长组成的list</div><div class="line">        :param target: 总共耗时</div><div class="line">        :param index: 当前路径的index</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> target == <span class="number">0</span>:</div><div class="line">            results_len.append(path[:])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(index, len(len_list)):</div><div class="line">                path.append(len_list[i])</div><div class="line">                self.helper(results_len, path, len_list, target - len_list[i], i + <span class="number">1</span>)</div><div class="line">                path.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span><span class="params">(self, dict_path_len, online_score)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        用于快速求得提交路径中成功到达的路径</div><div class="line">        :param dict_path_len: 将提交结果用字典形式表示出来，&#123;key: path 形如"day6path5", value: len 路径所耗时长&#125;</div><div class="line">        :param online_score: 线上成绩</div><div class="line">        :return: 成功到达的路径，每个list代表一种可能，如[['day6path5', 'day6path6'], ['day6path7']]</div><div class="line">        """</div><div class="line">        target = <span class="number">24</span>*<span class="number">60</span>*<span class="number">50</span> - online_score</div><div class="line">        len_list = [<span class="number">24</span>*<span class="number">60</span>-value <span class="keyword">for</span> key, value <span class="keyword">in</span> dict_path_len.items()]</div><div class="line">        <span class="comment"># key value对调，为后续依靠路径长度得到成功到达的路径做准备</span></div><div class="line">        dict_len_path = &#123;<span class="number">24</span>*<span class="number">60</span>-value: key <span class="keyword">for</span> key, value <span class="keyword">in</span> dict_path_len.items()&#125;</div><div class="line">        path = []</div><div class="line">        results_len = []</div><div class="line">        self.helper(results_len, path, len_list, target, <span class="number">0</span>)</div><div class="line">        <span class="comment"># 根据成功到达路径长度的组合得到成功到达的各个路径名</span></div><div class="line">        results_path = []</div><div class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results_len:</div><div class="line">            result_path = [dict_len_path.get(length) <span class="keyword">for</span> length <span class="keyword">in</span> result]</div><div class="line">            results_path.append(result_path)</div><div class="line">        <span class="keyword">return</span> results_path</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="string">"""</span></div><div class="line">    24*60*总条数 - 线上总成绩 = 24*60*成功到达的路径 - Sum(成功到达的路径耗时)</div><div class="line">    """</div><div class="line">    dict_path_len = &#123;</div><div class="line">            <span class="string">"day10path2"</span>: <span class="number">202</span>,</div><div class="line">            <span class="string">"day10path9"</span>: <span class="number">130</span>,</div><div class="line">            <span class="string">"day6path10"</span>: <span class="number">222</span>,</div><div class="line">            <span class="string">"day6path2"</span> : <span class="number">200</span>,</div><div class="line">            <span class="string">"day6path5"</span> : <span class="number">904</span>,</div><div class="line">            <span class="string">"day6path9"</span> : <span class="number">128</span>,</div><div class="line">            <span class="string">"day7path2"</span> : <span class="number">204</span>,</div><div class="line">            <span class="string">"day7path9"</span> : <span class="number">132</span>,</div><div class="line">            <span class="string">"day8path2"</span> : <span class="number">206</span>,</div><div class="line">            <span class="string">"day8path5"</span> : <span class="number">460</span>,</div><div class="line">            <span class="string">"day8path7"</span> : <span class="number">660</span>,</div><div class="line">            <span class="string">"day8path8"</span> : <span class="number">706</span>,</div><div class="line">            <span class="string">"day9path2"</span> : <span class="number">208</span>,</div><div class="line">            <span class="string">"day9path9"</span> : <span class="number">136</span>,</div><div class="line">            <span class="string">"day8path6"</span> : <span class="number">550</span></div><div class="line">        &#125;</div><div class="line">    online_score = <span class="number">56338</span></div><div class="line">    g = GetSuccessPath()</div><div class="line">    print(g.get_path(dict_path_len, online_score))</div></pre></td></tr></table></figure></p>
<p>全部思路大致如上。接下来即可实现两个功能：</p>
<ol>
<li>线下模拟评测不同耗时下的路线组合数，从而对路线进行微调</li>
<li>根据线上成绩，快速得到成功到达的路径组合</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;天池比赛小结1&quot;&gt;&lt;a href=&quot;#天池比赛小结1&quot; class=&quot;headerlink&quot; title=&quot;天池比赛小结1&quot;&gt;&lt;/a&gt;天池比赛小结1&lt;/h3&gt;&lt;h4 id=&quot;巧妙利用回溯法解决路径提交所引发的血案&quot;&gt;&lt;a href=&quot;#巧妙利用回溯法解决路径提交所引发的血案&quot; class=&quot;headerlink&quot; title=&quot;巧妙利用回溯法解决路径提交所引发的血案&quot;&gt;&lt;/a&gt;&lt;strong&gt;巧妙利用回溯法解决路径提交所引发的血案&lt;/strong&gt;&lt;/h4&gt;&lt;h4 id=&quot;0-引言&quot;&gt;&lt;a href=&quot;#0-引言&quot; class=&quot;headerlink&quot; title=&quot;0 引言&quot;&gt;&lt;/a&gt;0 引言&lt;/h4&gt;&lt;p&gt;前一阵子参加了天池比赛&lt;a href=&quot;https://tianchi.aliyun.com/competition/introduction.htm?spm=5176.100150.711.8.48172009pOnD7K&amp;amp;raceId=231622&quot;&gt;气象数据领航无人飞行器线路优化大赛&lt;/a&gt;，凭借着初赛一步步的稳扎稳打以及最后时刻的一波套磁 + 人品爆发，以第三名的成绩进入了决赛。但在决赛阶段，我们所遇到的最大问题并不是此次赛题中的两个重点：气象数据回归或路径规划算法，令我们差点止步前 10 的是提交路径之后，由于不同路径之间的各种组合导致的无法推知到底是哪些路径成功抵达。后来我们用了一些巧妙的解法在某种程度上解决了这个问题（并没有完全解决，下文会细讲），因此，这也是此篇博客诞生的原因，想要记录下解决这一个问题的思路。&lt;/p&gt;
    
    </summary>
    
      <category term="天池大数据竞赛" scheme="wanglilin.github.io/categories/%E5%A4%A9%E6%B1%A0%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="天池" scheme="wanglilin.github.io/tags/%E5%A4%A9%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>UnionFind</title>
    <link href="wanglilin.github.io/2017/12/27/UnionFind/"/>
    <id>wanglilin.github.io/2017/12/27/UnionFind/</id>
    <published>2017-12-27T09:13:27.000Z</published>
    <updated>2017-12-27T09:22:43.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>写该篇博客的初衷是由于在做天池大数据比赛中用到了并查集的相关概念，因此，想要巩固下这个知识点。</p>
<p>在计算机科学中，<strong>并查集</strong>是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个用于此数据结构的操作：</p>
<ul>
<li><strong>Find</strong>：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。</li>
<li><strong>Union</strong>：将两个子集合并成同一个集合。</li>
</ul>
<p>由于支持这两种操作，一个不相交集也常被称为联合-查找数据结构（union-find data structure）或合并-查找集合（merge-find set）。</p>
<a id="more"></a>
<h3 id="并查集用途"><a href="#并查集用途" class="headerlink" title="并查集用途"></a>并查集用途</h3><ul>
<li>维护无向图的连通性，支持判断两个点是否在同一个连通块内，和判断增加一条边是否会产生环</li>
<li>用在求解最小生成树的Kruskal算法里</li>
</ul>
<p>为了更加准确的定义这些方法，需要首先定义集合。一种常用的策略是为每个集合选定一个固定的元素，称为代表，以表示整个集合。接着，Find(x)返回x所属集合的代表，而Union使用两个集合的代表作为参数。</p>
<h3 id="代表元"><a href="#代表元" class="headerlink" title="代表元"></a>代表元</h3><p>用集合中的某个元素来代表这个集合，该元素称为集合的代表元。</p>
<ul>
<li>一个集合内的所有元素组织成以代表元为根的树形结构</li>
<li>对于每一个元素，<code>parent[x]</code>指向在树形结构上的父亲节点。如果x是根节点，则令<code>parent[x] = x</code></li>
<li>对于查找操作，假设需要确定x所在的集合，也就是确定集合的代表元，可以沿着<code>parent[x]</code>不断在树形结构中向上移动，直到到达根节点。<br><strong>判断两个元素是否属于同一个集合，只需要看他们的代表元是否相同即可</strong></li>
</ul>
<h2 id="并查集森林"><a href="#并查集森林" class="headerlink" title="并查集森林"></a>并查集森林</h2><p>并查集森林是一种将每一个集合以树表示的数据结构，其中每一个节点保存着它的父节点的引用，在并查集森林中，每个集合的代表即是集合的根节点。“查找”根据其父节点的引用向根行进直到树根。“联合”将两棵树合并到一起，这通过将一棵树的根连接到另一棵树的根。实现该操作的代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">MakeSet</span><span class="params">(x)</span>:</span></div><div class="line">    x.parent = x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x.parent = x:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> Find(x.parent)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Union</span><span class="params">(x, y)</span>:</span></div><div class="line">    xRoot = Find(x)</div><div class="line">    yRoot = Find(y)</div><div class="line">    xRoot.parent = yRoot</div></pre></td></tr></table></figure>
<p>这是并查集森林的最基础的表示方法，这个方法并不好，因为创建的树可能会严重不平衡；可以用两种方法优化：</p>
<ul>
<li><strong>按秩合并</strong><br>即总是将更小的树连接至更大的树上。因为影响运行时间的是树的深度，更小的树添加到更深的树的根上将不会增加秩除非他们的秩相同。在这个算法中，术语“秩”替代了“深度”，因为同时应用了路径压缩时秩将不会与高度相同，单元素的树的秩定义为0，当两棵秩同为<code>r</code>的树联合时，他们的秩为<code>r+1</code>。只使用这个方法将使最坏的运行时间提高至每个MakeSet、Union或Find操作<code>O(logn)</code>。</li>
<li><strong>路径压缩</strong><br>是一种在执行“查找”时扁平化树结构的方法。关键在于在路径上的每个节点都可以直接连接到根上；他们都有同样的表示方法。为了达到这样的效果，<code>Find</code>递归地经过树，改变每一个节点的引用到根节点，得到的树将更加扁平，为以后直接或者间接引用节点的操作加速。</li>
</ul>
<p>这两种方法的优势互补，同时使用二者的程序每个操作的平均时间仅为<code>O(a(n))</code>。因为a(n)在n十分巨大时还是小于5，因此，平均运行时间是一个极小的常数。</p>
<h3 id="并查集应用"><a href="#并查集应用" class="headerlink" title="并查集应用"></a>并查集应用</h3><h4 id="1-LintCode-178-判断图是否为树（Java实现）"><a href="#1-LintCode-178-判断图是否为树（Java实现）" class="headerlink" title="1. LintCode 178 判断图是否为树（Java实现）"></a>1. LintCode 178 判断图是否为树（Java实现）</h4><blockquote>
<p>给出 n 个节点，标号分别从 0 到 n - 1 并且给出一个 无向 边的列表 (给出每条边的两个顶点), 写一个函数去判断这张｀无向｀图是否是一棵树</p>
</blockquote>
<ul>
<li><p><strong>注意事项</strong><br>你可以假设我们不会给出重复的边在边的列表当中. 无向边　[0, 1] 和 [1, 0]　是同一条边， 因此他们不会同时出现在我们给你的边的列表当中。</p>
</li>
<li><p><strong>样例</strong><br>给出n = 5 并且 edges = [[0, 1], [0, 2], [0, 3], [1, 4]], 返回 <code>true</code><br>给出n = 5 并且 edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], 返回 <code>false</code>.</p>
</li>
</ul>
<p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @param n: An integer</div><div class="line">     * @param edges: a list of undirected edges</div><div class="line">     * @return: true if it's a valid tree, or false</div><div class="line">     */</div><div class="line">     </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</div><div class="line">        HashMap&lt;Integer, Integer&gt; father = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">        UnionFind(<span class="keyword">int</span> n) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">                father.put(i, i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">compressed_find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> parent = father.get(x);</div><div class="line">            <span class="keyword">while</span>(parent != father.get(parent)) &#123;</div><div class="line">                parent = father.get(parent);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> temp = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> fa = father.get(x);</div><div class="line">            <span class="keyword">while</span> (fa != father.get(fa)) &#123;</div><div class="line">                temp = father.get(fa);</div><div class="line">                father.put(fa, parent);</div><div class="line">                fa = temp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> parent;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> fa_x = compressed_find(x);</div><div class="line">            <span class="keyword">int</span> fa_y = compressed_find(y);</div><div class="line">            <span class="keyword">if</span> (fa_x != fa_y)</div><div class="line">                father.put(fa_x, fa_y);</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validTree</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] edges)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (n - <span class="number">1</span> != edges.length) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(n);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (uf.compressed_find(edges[i][<span class="number">0</span>]) == uf.compressed_find(edges[i][<span class="number">1</span>])) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            uf.union(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-天池比赛中用于图之间任意两个节点是否有连接（Python实现）"><a href="#2-天池比赛中用于图之间任意两个节点是否有连接（Python实现）" class="headerlink" title="2. 天池比赛中用于图之间任意两个节点是否有连接（Python实现）"></a>2. 天池比赛中用于图之间任意两个节点是否有连接（Python实现）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, groups)</span>:</span></div><div class="line">        self.groups = groups <span class="comment"># 外部传入的相连接的点</span></div><div class="line">        self.items = [] <span class="comment"># 所有的元素</span></div><div class="line">        <span class="keyword">for</span> group <span class="keyword">in</span> groups:</div><div class="line">            self.items += list(group)</div><div class="line">        self.items = set(self.items)</div><div class="line">        self.parent = &#123;&#125; <span class="comment"># 父亲节点</span></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.items:</div><div class="line">            self.parent[item] = item</div><div class="line">        self.create_tree()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findroot</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        查找根节点</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> r == self.parent[r]:</div><div class="line">            <span class="keyword">return</span> r</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 路径压缩</span></div><div class="line">            self.parent[r] = self.findroot(self.parent[r])</div><div class="line">            <span class="keyword">return</span> self.parent[r]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, p, q)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        合并p和q两个节点</div><div class="line">        """</div><div class="line">        p_root = self.findroot(p)</div><div class="line">        q_root = self.findroot(q)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> p_root == q_root:</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        <span class="comment"># 将父节点指向另一个节点</span></div><div class="line">        self.parent[p_root] = q_root</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        根据groups来构造树结构</div><div class="line">        """</div><div class="line">        <span class="keyword">for</span> group <span class="keyword">in</span> self.groups:</div><div class="line">            <span class="keyword">if</span> len(group) &lt; <span class="number">2</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(group) - <span class="number">1</span>):</div><div class="line">                <span class="keyword">if</span> self.findroot(group[i]) != self.findroot(group[i + <span class="number">1</span>]):</div><div class="line">                    self.union(group[i], group[i + <span class="number">1</span>])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, p, q)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        判断两个节点是否连接</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> p <span class="keyword">not</span> <span class="keyword">in</span> self.items <span class="keyword">or</span> q <span class="keyword">not</span> <span class="keyword">in</span> self.items:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> self.findroot(p) == self.findroot(q)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_groups</span><span class="params">(self, groups)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        增加连接</div><div class="line">        """</div><div class="line">        self.groups = self.groups + groups</div><div class="line">        <span class="keyword">for</span> group <span class="keyword">in</span> groups:</div><div class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> group:</div><div class="line">                <span class="keyword">if</span> item <span class="keyword">in</span> self.items:</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                self.items = list(self.items)</div><div class="line">                self.items.append(item)</div><div class="line">                self.parent[item] = item</div><div class="line">        self.items = set(self.items)</div><div class="line">        self.create_tree()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_trees</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        打印出相连接的树结构</div><div class="line">        """</div><div class="line">        rs = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.items:</div><div class="line">            root = self.findroot(item)</div><div class="line">            rs.setdefault(root, [])</div><div class="line">            rs[root].append(item)</div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> rs:</div><div class="line">            <span class="keyword">print</span> (rs[key])</div><div class="line">            <span class="keyword">print</span> (<span class="string">'*************************'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_items</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        获取所有的元素</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> self.items</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 测试功能</span></div><div class="line">    groups = [((<span class="number">1</span>,<span class="number">1</span>), (<span class="number">1</span>,<span class="number">2</span>)), ((<span class="number">3</span>,<span class="number">4</span>), (<span class="number">3</span>,<span class="number">3</span>)), ((<span class="number">1</span>,<span class="number">1</span>), (<span class="number">0</span>,<span class="number">1</span>))]</div><div class="line">    u = UnionFind(groups)</div><div class="line">    u.print_trees()</div><div class="line">    u.add_groups([((<span class="number">3</span>,<span class="number">4</span>), (<span class="number">3</span>,<span class="number">5</span>))])</div><div class="line">    <span class="keyword">print</span> (<span class="string">'after adding'</span>)</div><div class="line">    u.print_trees()</div><div class="line">    <span class="keyword">print</span> (u.is_connected((<span class="number">1</span>,<span class="number">1</span>), (<span class="number">3</span>,<span class="number">4</span>)))</div><div class="line">    print(u.is_connected((<span class="number">1</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">1</span>)))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;p&gt;写该篇博客的初衷是由于在做天池大数据比赛中用到了并查集的相关概念，因此，想要巩固下这个知识点。&lt;/p&gt;
&lt;p&gt;在计算机科学中，&lt;strong&gt;并查集&lt;/strong&gt;是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个用于此数据结构的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Find&lt;/strong&gt;：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Union&lt;/strong&gt;：将两个子集合并成同一个集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于支持这两种操作，一个不相交集也常被称为联合-查找数据结构（union-find data structure）或合并-查找集合（merge-find set）。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="wanglilin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="wanglilin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
