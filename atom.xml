<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wangli&#39;s Blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="wanglilin.github.io/"/>
  <updated>2017-03-11T13:17:27.612Z</updated>
  <id>wanglilin.github.io/</id>
  
  <author>
    <name>Wangli Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础之异常</title>
    <link href="wanglilin.github.io/2017/03/11/java-exception/"/>
    <id>wanglilin.github.io/2017/03/11/java-exception/</id>
    <published>2017-03-11T12:51:50.000Z</published>
    <updated>2017-03-11T13:17:27.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>A clever person solves a problem, a wise person avoids it.<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;   ——那你，会如何处理异常，try or throw？</p>
</blockquote>
<h2 id="1-异常是什么"><a href="#1-异常是什么" class="headerlink" title="1 异常是什么"></a>1 异常是什么</h2><p>我有一辆车（不是自行车，四轮的！！诶，更不是拖拉机！！！），我要开车去隔壁村见小王（不是隔壁老王），开到半路爆胎了，此时，我有两个选择：</p>
<ul>
<li>如果我车上有备胎（诶，可惜我备胎这东西是建立在有女朋友的基础之上的，女朋友是个好东西，然而我并没有），我可以选择在当前就换个轮胎，然后将坏了的车胎放到后备箱，车子仍然可以继续开；</li>
<li>我车上没有备胎，那我只能放个警示牌，打个电话给能处理这个车爆胎的人来处理，而这并不妨碍我走着去见隔壁村的小王。</li>
</ul>
<p>这就是在Java中遇到异常的两个常用的方法，你可以处理它（try）或抛出它（throw），即将锅交给别人去处理。</p>
<a id="more"></a>
<blockquote>
<p>“异常”这个词通常有“我对此感到很意外”的意思。问题出现了，你也许不清楚该如何处理，但你的确知道不应该置之不理；你要停下来，看看是不是有别人或在别的地方，能够处理这个问题。只是在当前的环境中，还没有足够的信息来解决这个问题，所以就把这个问题提交到一个更高级别的环境中，在那里将做出正确的决定。<br>&emsp;&emsp;&emsp;——《Java编程思想》 P248</p>
</blockquote>
<p>异常指不期而遇的各种状况，如：文件找不到、网络连接失败，非法参数等。异常是一个事件，它发生在程序运行期间，干扰了正常的指令流程。Java通过API中Throwable类的众多子类描述各种不同的异常。因而，Java异常都是对象，是Throwable子类的实例。Java异常类的层次结构图如下：<br><img src="http://omdld2kxe.bkt.clouddn.com/1354020417_5176.jpg" alt="Java异常类层次结构图"></p>
<ul>
<li>Throwable：Java语言中所有错误或异常的超类，有两个重要的子类，Exception（异常）和Error（错误），二者都是Java异常处理的重要子类，各自都包含大量子类。</li>
<li>Error：表示仅靠程序本身无法恢复的严重错误。与代码编写者无关，是代码运行时JVM出现的错误，发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（VirtualMachineError）、类定义错误（NoClassDefFoundError）等。这些错误都是不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li>
<li>Exception：表示程序本身可以处理的异常。<ul>
<li>RuntimeException：那些可能在Java虚拟机正常运行期间抛出的异常的超类。Java编译器不去检查它，也就是说，当程序中可能出现这类异常时，即使没有用<code>try...catch</code>语句捕获它，也没有用<code>throws</code>子句声明抛出它，也还是会编译通过。例如：若试图使用空值对象引用、除数为零或数组越界，则分别引发运行时异常（NullPointerException/ArithmeticException/ArrayIndexOutOfBoundException）。</li>
<li>CheckedException：正确的程序在运行中，很容易出现的、情理可容的异常状况，可查异常状况虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。即Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用<code>try-catch</code>语句捕获它，要么用throws字句声明抛出它，否则编译不会通过。如IOException/SQLException等。</li>
</ul>
</li>
</ul>
<p>PS：Java中RuntimeException这个类名起的并不恰当，因为任何异常都是运行时出现的。（在编译时出现的错误并不是异常，换句话说，异常就是为了解决程序运行时出现的的错误）。</p>
<p>PPS：如何区分，如果出现RuntimeException，那么一定是程序员的错误。例如，可以通过检查数组下标和数组边界来避免数组越界访问异常。 非RutimeException一般是外部错误，例如试图从文件尾后读取数据等，这并不是程序本身的错误，而是在应用环境中出现的外部错误。</p>
<h2 id="2-异常处理机制"><a href="#2-异常处理机制" class="headerlink" title="2 异常处理机制"></a>2 异常处理机制</h2><p> 异常机制是指当程序出现错误后，程序如何处理。具体来说，异常机制提供了程序退出的安全通道。当出现错误后，程序执行的流程发生改变，程序的控制权转移到异常处理器。在Java应用程序中，异常处理机制为：抛出异常、捕获异常。异常处理的流程：</p>
<ul>
<li>遇到错误，方法立即结束，并不返回一个值；同时，抛出一个异常对象 。</li>
<li>调用该方法的程序也不会继续执行下去，而是搜索一个可以处理该异常的异常处理器，并执行其中的代码。</li>
</ul>
<h3 id="2-1-try-catch"><a href="#2-1-try-catch" class="headerlink" title="2.1 try-catch"></a>2.1 try-catch</h3><ul>
<li><p><strong>抛出异常：</strong> 当遇到异常情形时，程序无法继续向下执行，因为在当前的环境下无法获得必要的信息来解决问题。只能从当前环境跳出，将问题提交至上一级环境。当抛出异常后，会有几件事情随之发生：</p>
<ul>
<li>将使用<code>new</code>在堆上创建异常对象。</li>
<li>当前的执行路径（它不能继续下去了）被终止，并且从当前环境中弹出对异常对象的引用。</li>
<li>异常处理机制接管程序，并开始寻找一个恰当的地方来执行程序。这个恰当的地方就是<strong>异常处理程序</strong>，它的任务是将程序从错误状态中恢复，以使程序要么换一种方式运行，要么继续运行下去。</li>
</ul>
</li>
<li><p><strong>捕获异常：</strong> Java中，异常的捕获通常通过<code>try-catch</code>或<code>try-catch-finally</code>语句实现，即监控区域（一段可能产生异常的代码+处理这些异常的代码）</p>
<ul>
<li>try块：<br>如果在方法内部抛出了异常，这个方法将在抛出异常的过程中结束。要是不希望方法就此结束，可以在方法内设置一个特殊的块来捕获异常。因为在这块里，尝试了各种可能产生异常的方法的调用，所以称为try块。它是跟在try关键字之后的普通程序块：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//code that might generate exceptions</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>catch子句：<br>  抛出的异常必须在某处得到处理。这个地点就是异常处理程序，<strong>而且针对每个要捕获的异常，得准备相应的处理程序。异常程序紧跟在try块之后，以关键字catch表示：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//  code that might generate exceptions</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id1)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type1</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id2)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type2</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id3)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个catch子句看起来就像是接收一个且仅接受一个特殊类型的参数的方法。当异常被抛出后，异常处理机制将负责搜寻参数与异常类型相匹配的第一个处理程序，然后进入catch子句之中执行。只有匹配的catch子句才能得到执行。<br>异常匹配的原则是：如果抛出的异常对象属于catch子句的异常类，或者该异常类的子类，则认为生成的异常类对象与catch块捕获的异常类型相匹配。<br>下面举个例子：</p>
<p><strong>捕获throw语句抛出的“除数为0”异常</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"a/b的值是："</span> + a / b);</div><div class="line">        &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</div><div class="line">            System.out.println(<span class="string">"变量b不能为0"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"程序正常结束"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果：</strong><br>变量b不能为0<br>程序正常结束</p>
<p>事实上，“除数为0”等ArithmeticException，是RuntimeException的子类，而运行时异常将由运行时系统自动抛出，不需要使用throw语句。故可将代码改成如下形式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            System.out.println(<span class="string">"a/b的值是："</span> + a / b);</div><div class="line">        &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</div><div class="line">            System.out.println(<span class="string">"变量b不能为0"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"程序正常结束"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>运行结果：</strong><br> 变量b不能为0<br>程序正常结束</p>
<p>由于检查运行时异常的代价远大于捕捉异常所带来的益处，Java编译器允许忽略运行时异常，一个方法可以既不捕捉，也不声明抛出运行时异常。如下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">        System.out.println(<span class="string">"a/b的值是："</span> + a / b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>运行结果：</strong><br> Exception in thread “main” java.lang.ArithmeticException: / by zero</p>
<h4 id="2-1-1-catch子句注意事项"><a href="#2-1-1-catch子句注意事项" class="headerlink" title="2.1.1 catch子句注意事项"></a>2.1.1 catch子句注意事项</h4><ol>
<li>一旦某个catch子句捕获到匹配的异常类型，将进入异常处理代码。一经处理结束，就意味着整个<code>try-catch</code>语句结束。其他的catch子句不再有匹配和捕获异常类型的机会。</li>
<li>Java通过异常类描述异常类型，对于有多个catch子句的异常程序而言，应该尽量将捕获底层异常类的catch子句放在前面，同时尽量将捕获相对高层的异常类的catch子句放在后面。否则，捕获底层异常类的catch子句可能会被屏蔽。</li>
<li>RuntimeException异常类包括运行时各种常见的异常，ArithmeticException类和ArrayIndexOutOfBoundsException类都是它的子类。因此，RuntimeException异常类的catch子句应该放在最后面，否则可能会屏蔽其后的特定异常处理或引起编译错误。</li>
</ol>
<h3 id="2-2-try-catch-finally"><a href="#2-2-try-catch-finally" class="headerlink" title="2.2 try-catch-finally"></a>2.2 try-catch-finally</h3><p><code>try-catch</code>语句还可以包括第三部分，就是finally子句。它表示无论是否出现异常，都应该执行的内容，<code>try-catch-finally</code>语句的一般语法形式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//  code that might generate exceptions</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id1)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type1</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id2)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type2</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id3)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type3</span></div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">    <span class="comment">//Activities that happen every time</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于一些代码，可能会希望无论try块中的异常是否抛出，它们都能得到执行。图示如下：<br><img src="http://omdld2kxe.bkt.clouddn.com/d0vCr.jpg" alt="try-catch-finally执行顺序"><br>这通常适用于内存回收之外的情况（因为回收由垃圾回收器完成）。为了达到这个效果，可以在异常处理程序后面架上finally子句。如下例所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  </div><div class="line">        String greetings[] = &#123; <span class="string">" Hello world !"</span>, <span class="string">" Hello World !! "</span>,  </div><div class="line">                <span class="string">" HELLO WORLD !!!"</span> &#125;;  </div><div class="line">        <span class="keyword">while</span> (i &lt; <span class="number">4</span>) &#123;  </div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line">                <span class="comment">// 特别注意循环控制变量i的设计，避免造成无限循环  </span></div><div class="line">                System.out.println(greetings[i++]);  </div><div class="line">            &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;  </div><div class="line">                System.out.println(<span class="string">"数组下标越界异常"</span>);  </div><div class="line">            &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">                System.out.println(<span class="string">"--------------------------"</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-1-finally子句注意事项"><a href="#2-2-1-finally子句注意事项" class="headerlink" title="2.2.1 finally子句注意事项"></a>2.2.1 finally子句注意事项</h4><ol>
<li>对于没有垃圾回收和析构函数自动调用机制的语言来说，finally非常重要。它能使程序员保证：无论try块里发生了什么，内存总能得到释放。但Java有垃圾回收机制，所以内存释放不再是问题。而且，Java也没有析构函数可供调用。在Java中，用到finallyde情况主要是在，当要把除内存之外的资源恢复到它们的初始状态时。这种需要清理的资源包括：已经打开的文件或网络连接，在屏幕上画的图形，甚至可以是外部世界的某个开关。</li>
<li>当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。</li>
<li>finally语句块不能给变量赋新值来改变return的返回值，也不建议在finally块中使用return语句。没有意义还容易造成混淆。</li>
</ol>
<h3 id="2-3-throw-throws"><a href="#2-3-throw-throws" class="headerlink" title="2.3 throw/throws"></a>2.3 throw/throws</h3><p>任何Java代码都可以抛出异常，如：自己编写的代码、来自Java开发环境包中的代码，或者Java运行时系统。Java对于处理不了的异常或者要转型的异常，一般用throw/throws语句抛出异常。如果一个方法没有捕获一个检查性异常，那么该方法必须使用throws关键字来声明。throws关键字放在方法签名的尾部，也可以使用throw关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>
<h4 id="2-3-1-throws"><a href="#2-3-1-throws" class="headerlink" title="2.3.1 throws"></a>2.3.1 throws</h4><p>如果与一个方法可能会出现异常，但没有能力处理这种异常，可以在方法声明处用throws子句来声明抛出异常。就好像，初中时经常会有打架时间，几个人打一个人，这个人被打之后，想报仇又无力报仇，所以叫一帮兄弟帮他报仇。<br>throws语句用在方法定义时声明该方法要抛出的异常类型，如果抛出的是Exception异常类型，则该方法被声明为抛出所有de异常；多个异常用逗号分隔，throws语句的语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">methodName <span class="keyword">throws</span> Exception1, Exception2, Exception3&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>throws后为声明要抛出的异常列表。当方法抛出异常列表中的异常的时候，方法将不对这些类型及其子类型进行异常处理，而将异常抛向调用该方法的方法。<br>举例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.Exception;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> NegativeArraySizeException </span>&#123;  </div><div class="line">        <span class="comment">// 定义方法并抛出NegativeArraySizeException异常  </span></div><div class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[-<span class="number">3</span>]; <span class="comment">// 创建数组  </span></div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 主方法  </span></div><div class="line">        <span class="keyword">try</span> &#123; <span class="comment">// try语句处理异常信息  </span></div><div class="line">            pop(); <span class="comment">// 调用pop()方法  </span></div><div class="line">        &#125; <span class="keyword">catch</span> (NegativeArraySizeException e) &#123;  </div><div class="line">            System.out.println(<span class="string">"pop()方法抛出的异常"</span>);<span class="comment">// 输出异常信息  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>pop方法没有处理异常NegativeArraySizeException，而是由main函数来处理。</p>
<p> <strong>throws抛出异常的规则：</strong></p>
<ol>
<li>如果是不可检查异常（Unchecked Exception），即Error、RuntimeException或它们的子类，那么可以不使用throws关键字来声明要抛出的异常，编译仍然能通过，但运行时会被系统抛出。</li>
<li>必须声明方法可抛出的任何可查异常（Checked Exception），即如果一个方法可能出现可查异常，要么用try-catch语句捕获，要么用throws语句声明将它抛出，否则会导致编译错误。</li>
<li>该方法的调用者必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。</li>
<li>调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。</li>
</ol>
<h4 id="2-3-2-throw"><a href="#2-3-2-throw" class="headerlink" title="2.3.2 throw"></a>2.3.2 throw</h4><p><code>throw</code>总是出现在函数体中，用来抛出一个Throwable的异常，程序会在throw语句后立即终止，它后面的语句总是执行不到的。<br>异常是异常类的实力对象，我们可以创建异常类的实例对象通过throw语句抛出，该语句的语法格式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExceptionName();</div></pre></td></tr></table></figure></p>
<p>如果抛出了检查异常，则还应该在方法头部声明方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常，如果所有方法都层层上抛获取的异常，最终JVM会进行处理。处理方式也很简单，即打印异常消息和堆栈消息。</p>
<h4 id="2-3-3-Throwable类中的常用方法"><a href="#2-3-3-Throwable类中的常用方法" class="headerlink" title="2.3.3 Throwable类中的常用方法"></a>2.3.3 Throwable类中的常用方法</h4><p>catch关键字后面括号中的Exception类型的参数e。Exception就是try代码块传递给catch代码块的变量类型，e就是变量名。通常异常处理常用3个函数来获取异常的有关信息：<br><code>getCause()</code>: 返回抛出异常的原因。如果 cause 不存在或未知，则返回 null。<br><code>getMeage()</code>: 返回异常的消息信息。<br><code>printStackTrace()</code>:  对象的堆栈跟踪输出至错误输出流，作为字段 System.err 的值。</p>
<p>有时为了简单会忽略掉catch语句后的代码，这样try-catch语句就成了一种摆设，一旦程序在运行过程中出现了异常，就会忽略处理异常，而错误发生的原因很难查找。</p>
<h3 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3 自定义异常"></a>3 自定义异常</h3><p>所谓自定义异常，通常就是指定义了一个继承自Exception类的子类，那么这个类就是一个自定义异常类。通常情况下，我们都会继承自Exception类，一般不会继承某个运行时的异常类。基于特定的需求，自定义异常在项目中的使用还是很普遍的。</p>
<p>自定义异常类MyException：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String messeage)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(messeage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然也可选用Throwable作为父类。其中无参数构造器为创建缺省参数对象提供了方便。第二个构造器将在创建这个异常对象时提供描述这个异常信息的字符串，通过调用父类构造器向上传递给父类，对父类中的toString()方法中返回的原有信息进行覆盖。作为该异常的异常信息。</p>
<p>测试自定义异常类代码：</p>
<p>1.抛出异常throws：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExxceptionTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String string)</span> <span class="keyword">throws</span> MyException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == string)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"传入的字符串参数不能为null"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(string);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MyException </span>&#123;</div><div class="line">   </div><div class="line">      ExxceptionTest test = <span class="keyword">new</span> ExxceptionTest();</div><div class="line">      test.method(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>运行结果：</strong><br>Exception in thread “main” MyException: 传入的字符串参数不能为null<br>    at ExxceptionTest.method(ExxceptionTest.java:9)<br>    at ExxceptionTest.main(ExxceptionTest.java:29)<br>    ……</p>
<p>2.处理异常try-catch：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String string)</span> <span class="keyword">throws</span> MyException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == string)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"传入的字符串参数不能为null"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(string);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            ExceptionTest test = <span class="keyword">new</span> ExceptionTest();</div><div class="line">            test.method(<span class="keyword">null</span>);</div><div class="line">        &#125;<span class="keyword">catch</span> (MyException e)&#123;</div><div class="line">            <span class="comment">//将错误信息在System.out流中打印出来</span></div><div class="line">            e.printStackTrace(System.out);</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            System.out.println(<span class="string">"异常处理完毕"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"程序执行完毕"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>运行结果：</strong><br>MyException: 传入的字符串参数不能为null<br>        at ExxceptionTest.method(ExceptionTest.java:9)<br>        at ExxceptionTest.main(ExceptionTest.java:19)<br>            ….<br>异常处理完毕<br>程序执行完毕</p>
<p>毋庸置疑，我们不可能期待JVM自动抛出一个自定义异常，也不能够期待JVM会自动处理一个自定义异常。发现异常、抛出异常以及处理异常的工作必须靠编程人员在代码中利用异常处理机制自己完成。而打印异常处理信息可以在抛出时包括在构造器的参数中，或者包括在处理这个异常的catch中。</p>
<p>不定期更新…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A clever person solves a problem, a wise person avoids it.&lt;br&gt;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;   ——那你，会如何处理异常，try or throw？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-异常是什么&quot;&gt;&lt;a href=&quot;#1-异常是什么&quot; class=&quot;headerlink&quot; title=&quot;1 异常是什么&quot;&gt;&lt;/a&gt;1 异常是什么&lt;/h2&gt;&lt;p&gt;我有一辆车（不是自行车，四轮的！！诶，更不是拖拉机！！！），我要开车去隔壁村见小王（不是隔壁老王），开到半路爆胎了，此时，我有两个选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我车上有备胎（诶，可惜我备胎这东西是建立在有女朋友的基础之上的，女朋友是个好东西，然而我并没有），我可以选择在当前就换个轮胎，然后将坏了的车胎放到后备箱，车子仍然可以继续开；&lt;/li&gt;
&lt;li&gt;我车上没有备胎，那我只能放个警示牌，打个电话给能处理这个车爆胎的人来处理，而这并不妨碍我走着去见隔壁村的小王。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是在Java中遇到异常的两个常用的方法，你可以处理它（try）或抛出它（throw），即将锅交给别人去处理。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaSE" scheme="wanglilin.github.io/categories/JavaSE/"/>
    
    
      <category term="Java基础" scheme="wanglilin.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaSE" scheme="wanglilin.github.io/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之字符串</title>
    <link href="wanglilin.github.io/2017/03/04/javase-string/"/>
    <id>wanglilin.github.io/2017/03/04/javase-string/</id>
    <published>2017-03-04T08:08:41.000Z</published>
    <updated>2017-03-11T13:09:38.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h2><p>public final class String<br>extends Object<br>implements Serializable, Comparable, CharSequence</p>
<h2 id="类概述"><a href="#类概述" class="headerlink" title="类概述"></a>类概述</h2><p>Java把内存划分为两种：一种是栈内存，一种是堆内存。<strong>在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配</strong>。当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量分配的内存空间，该内存空间可以立即被另作它用。<br><a id="more"></a></p>
<p><strong>堆内存用来存放由new创建的对象和数组，在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。</strong>在堆中产生了一个数组或者对象之后，还可以在栈中定义一个特殊的变量，让栈中的这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量（以后就可以在程序中使用栈中的引用变量来访问堆中的数组或者对象，引用变量相当于是为数组或者对象起的一个名称）。</p>
<p><strong>PS：</strong>引用变量是普通的变量，定义时在栈中分配，引用变量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，引用变量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，即使程序运行到使用new产生的数组或者对象所在的代码块之外，数组和对象本身占据的内存不会被释放，数组和对象在没有引用变量指向它的时候，才变为垃圾，不能再被使用，但仍然占据内存空间不放，在随后的一个不确定的时间被垃圾回收器收走（释放）。- &gt;这也是Java比较占内存的原因。</p>
<p>String类是一个很特殊的类，它本身是final的，它是不可变的，String类是的本质是字符数组char[], 并且其值不可改变,但StringBuilder也是final，为什么StringBuilder是可变的呢？ 究其原因，String类的内部是char[]数组构成，而String的加号（+）运算符的底层是由StringBuilder实现的，一个String每次“+“上一个String,都会创建一个新的StringBuilder，然后调用它的append()方法，该方法返回一个新形成的String。所以字符串的一些合并操作可以使用StringBuilder来提高效率。</p>
<p>用new String()创建的字符串不是常量，不能在编译期就确定，而因为String是类，所以new String()创建的字符串不放入常量池中，它们有自己的地址空间。即Java中，只要使用new关键字来创建对象，则一定会（在堆区或栈区）创建一个新的对象。而直接初始化则会形成字符串常量，分配到运行时常量池中，这会在编译时确定。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>Java程序中的所有字面值（string literals），即双引号括起来的字符串，如“bia”，都是作为String类的实例实现的。</li>
<li>String类是一个很特殊的类，它本身是final的，它是不可变的，String类的本质是字符数组char[ ]， 并且其值不可改变。String是常量，其对象一旦构造就不能被改变。In other words，String对象是不可变的，每一个看起来会修改String值的方法，实际上都是创造了一个全新的String对象（<strong>构建一个新的StringBuilder，然后调用它的append()方法，该方法方法返回一个新创建的String对象</strong>），以包含修改后的字符串内容。</li>
<li>String对象具有只读特性，指向它的任何引用都不可能改变它的值，因此，也不会对其他的引用有什么影响。</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>1.创建字符串</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World"</span>;</div><div class="line">String str1 = <span class="keyword">new</span> String(<span class="string">"Hello World"</span>);</div><div class="line">String str2 = <span class="keyword">new</span> String();</div><div class="line">str2 = <span class="string">"Hello World"</span></div><div class="line">System.out.println(<span class="string">"str:"</span> + str + <span class="string">"str1:"</span> + str1 + <span class="string">"str2:"</span> + str2);</div></pre></td></tr></table></figure>
<ul>
<li>String类有11种构造方法，这些方法提供不同的参数来初始化字符串</li>
<li>String类是不可改变的，所以一旦创建了String对象，其值就无法改变了</li>
</ul>
<p><strong>2.字符串长度</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World"</span>;</div><div class="line"><span class="keyword">int</span> i = str.length();</div><div class="line">System.out.println(i);</div></pre></td></tr></table></figure>
<p> String类的一个访问器方法是length( )方法，它返回字符串对象包含的字符数。</p>
<p><strong>3.连接字符串</strong></p>
<ul>
<li>字符串常量使用concat( )方法连接</li>
<li>使用’+’操作符来连接字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World"</span>;</div><div class="line">String str1 = <span class="string">"Good Friends"</span>;</div><div class="line">str2 = str.concat(str1);</div><div class="line">str3 = str + str1;</div></pre></td></tr></table></figure>
<p><strong>4.创建格式化字符串</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String str;</div><div class="line"><span class="keyword">int</span> i = <span class="number">100</span>;</div><div class="line"><span class="keyword">double</span> d = <span class="number">10.243</span>;</div><div class="line"><span class="keyword">float</span> f = <span class="number">124124</span>;</div><div class="line">str =  String.format(<span class="string">"NO1 : %d"</span> + <span class="string">"NO2 : %f"</span> + <span class="string">"NO3 : %f"</span>,i,f,d);    <span class="comment">//使用 .format() 方法格式化字符串</span></div><div class="line">System.out.printf(<span class="string">"NO1 : %d"</span> + <span class="string">"NO2 : %f"</span> + <span class="string">"NO3 : %f"</span>,i,f,d);  <span class="comment">//使用 printf()方法 格式化字符串</span></div><div class="line">System.out.println(str);</div></pre></td></tr></table></figure>
<p>我们知道输出格式化数字可以使用printf( )和format( )方法。String类使用静态方法format( )返回一个String对象而不是PrintStream对象。<br>String类的静态方法format( )能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p>
<p><strong>5.char charAt(int index)</strong><br>返回指定索引处的char值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"hello world"</span>;</div><div class="line"><span class="keyword">char</span> c = str.charAt(<span class="number">2</span>);</div><div class="line">System.out.println(c);</div><div class="line"></div><div class="line"><span class="comment">//output: l</span></div></pre></td></tr></table></figure></p>
<p><strong>6.int compareTo(Object o)</strong><br>把这个字符串和另一个对象比较<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello world"</span>;</div><div class="line">String str1 = <span class="string">"Good Friends"</span>;</div><div class="line"><span class="keyword">int</span> i = str.compareTo(str1);</div><div class="line">System.out.println(i);</div><div class="line"></div><div class="line"><span class="comment">//output: 1</span></div></pre></td></tr></table></figure></p>
<p>比较此对象与指定对象的顺序。如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数。<strong>返回整数，1，-1,0；返回1表示大于，返回-1表示小于，返回0表示相等。</strong></p>
<p><strong>7.boolean endsWith(String str)</strong><br>测试此字符串是否以指定的后缀结束。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World"</span>;</div><div class="line"><span class="keyword">boolean</span> b = str.endsWith(<span class="string">"d"</span>);</div><div class="line">System.out.println(b);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//output:true</span></div></pre></td></tr></table></figure></p>
<p><strong>8.boolean equals(Object object)</strong><br>将此字符串与指定的对象比较<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World !"</span>; </div><div class="line">String str1 = <span class="string">"Good Friends"</span>;</div><div class="line"><span class="keyword">boolean</span>  b =  str.equals(str1);</div><div class="line">System.out.println(b);</div></pre></td></tr></table></figure></p>
<p><strong>9.int indexOf(int char)</strong><br>返回指定字符在此字符串中第一次出现处的索引<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World !"</span>;</div><div class="line"><span class="keyword">int</span> i = str.indexOf(<span class="string">'e'</span>);</div><div class="line">System.out.println(i);</div><div class="line"></div><div class="line"><span class="comment">//output: 1</span></div><div class="line"><span class="comment">//若无此字符串，则返回-1</span></div></pre></td></tr></table></figure></p>
<p><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html" target="_blank" rel="external">更多String方法，点击查看</a></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="null和空字符串的区别s"><a href="#null和空字符串的区别s" class="headerlink" title="null和空字符串的区别s"></a>null和空字符串的区别s</h3><blockquote>
<p>String s=null;<br>string.trim()就会抛出为空的exception<br>String s=””;<br>string.trim()就不会抛,为什么?</p>
</blockquote>
<p><strong>答：</strong><br>1）null代表声明了一个空对象，根本就不是一个字符串，对空对象做任何操作都不行，除了 = 和 == ；<br>“”代表声明了一个对象实例，这个对象实例的值是一个长度为0的空字符串，其仍代表一个字符串，只是字符串里面没有内容。<br>2）String s = null;只是定义了一个句柄，也就是说你有了个引用，但是这个引用未指向任何内存空间；<br>String s = “”;这个引用指向了一块是空字符串的内存空间，可对其进行满足字符串操作的任何操作。</p>
<p>所以，题目中为何一个会抛异常，一个不会抛异常就得以解答。</p>
<blockquote>
<p> String s;和String s=null;和String s=”a”;有什么区别？<br> 针对这三种情况，使用out.println(s);的时候，第一个会出现异常，第二个会输出null.第三个则会输出a.<br> 这是为什么呢？这三句声明语句，各自作了什么呢？</p>
</blockquote>
<p><strong>答：</strong><br>第一个只是定义了一个String类型变量s，并没有给它赋值（若是类的成员变量，才默认赋值），在Java中，默认在使用一个对象的时候必须赋予它初值（降低风险）。<br>第二个和第三个都定义了String类型变量s，并赋予它初值，只不过第二个赋予的值为null；<br><strong>Attention：</strong>s为一个引用，它不是对象。第一个是没有初始化的引用，第二个为空引用，第三个是在字符串池里写入一个字符’a’，然后s指向它。<br><strong>Ps：</strong>String s = ‘a’ ;和 String s = new String(“a”);是有本质上的区别的。前者是在字符串池里写入一个字符’a’，然后s指向它，后者是在堆上创建一个内容为’a’的字符串对象。</p>
<blockquote>
<p>声明了一个string a;变量<br>在以后的判断中，a==””和a==null有何不同?</p>
</blockquote>
<p><strong>答：</strong><br>如果没有给a赋过值，a == “” 会导致异常。<br>在实际处理中，往往认为””和null代表相同的含义，即代表无值。<br>此时，建议用如下语法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a == <span class="keyword">null</span> || a == <span class="string">""</span>)&#123;</div><div class="line">   <span class="comment">//处理语句</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果a为null，则不会执行后面的判断，直接返回true。<br><strong>null是用来判断引用类型是否分配了存储空间，””是针对字符串的。</strong>所以如果没有给a赋过值，a == “”会导致异常。</p>
<blockquote>
<p>String abc=null;String abc=””;String abc;三种写法有什么区别？</p>
</blockquote>
<p><strong>答：</strong><br>1：创建一个空字符串对象，<br>2：创建一个字符串为空的字符串对象。<br>3：声明一个字符串对象，但并没有分配内存，而1，2已经分配了内存</p>
<p><strong>tips：</strong><br>在成员变量的定义中,String s;等同于String s=null;<br>而在本地变量(方法变量)的定义中,String s;不等同于String s=null;,这时要使用s必须显式地赋值。</p>
<p>还有一点要说明的是：<br>只要是在方法在中定义变量都要显示赋初值，main()方法也不例外，而在方法之外编译器回自动赋初值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类结构&quot;&gt;&lt;a href=&quot;#类结构&quot; class=&quot;headerlink&quot; title=&quot;类结构&quot;&gt;&lt;/a&gt;类结构&lt;/h2&gt;&lt;p&gt;public final class String&lt;br&gt;extends Object&lt;br&gt;implements Serializable, Comparable, CharSequence&lt;/p&gt;
&lt;h2 id=&quot;类概述&quot;&gt;&lt;a href=&quot;#类概述&quot; class=&quot;headerlink&quot; title=&quot;类概述&quot;&gt;&lt;/a&gt;类概述&lt;/h2&gt;&lt;p&gt;Java把内存划分为两种：一种是栈内存，一种是堆内存。&lt;strong&gt;在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配&lt;/strong&gt;。当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量分配的内存空间，该内存空间可以立即被另作它用。&lt;br&gt;
    
    </summary>
    
      <category term="JavaSE" scheme="wanglilin.github.io/categories/JavaSE/"/>
    
    
      <category term="Java基础" scheme="wanglilin.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaSE" scheme="wanglilin.github.io/tags/JavaSE/"/>
    
  </entry>
  
</feed>
