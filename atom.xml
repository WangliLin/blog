<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wangli&#39;s Blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="wanglilin.github.io/"/>
  <updated>2017-09-16T04:34:02.393Z</updated>
  <id>wanglilin.github.io/</id>
  
  <author>
    <name>Wangli Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java-hashmap-i</title>
    <link href="wanglilin.github.io/2017/09/16/java-hashmap-i/"/>
    <id>wanglilin.github.io/2017/09/16/java-hashmap-i/</id>
    <published>2017-09-16T04:19:25.000Z</published>
    <updated>2017-09-16T04:34:02.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap源码阅读（上）"><a href="#HashMap源码阅读（上）" class="headerlink" title="HashMap源码阅读（上）"></a>HashMap源码阅读（上）</h1><h2 id="1-HashMap数据结构简介"><a href="#1-HashMap数据结构简介" class="headerlink" title="1.HashMap数据结构简介"></a>1.HashMap数据结构简介</h2><p>HashMap就是数据结构中的散列表，是以key、value的形式进行存储数据的。数组具有查找定位快，但是插入操作性能差的特点；链表具有查找慢插入快的特点，而HashMap可以说是这两种方式的一种折中。<br>HashMap采用数组与链表相结合的方式实现，其数据结构示意图如下图所示：<br><img src="http://omdld2kxe.bkt.clouddn.com/3239635-41e5f95e197a5a8e.png" alt="HashMap数据结构示意图"></p>
<a id="more"></a>
<h3 id="HashMap的特点"><a href="#HashMap的特点" class="headerlink" title="HashMap的特点"></a>HashMap的特点</h3><ul>
<li>可以存储null值（HashMap可以接受为null的键或值）</li>
<li>非线程安全</li>
<li>存储查找速度快</li>
</ul>
<h3 id="HashMap的性能"><a href="#HashMap的性能" class="headerlink" title="HashMap的性能"></a>HashMap的性能</h3><p>影响HashMap性能的因素：</p>
<ul>
<li>哈希函数均匀：HashMap是通过hash函数来定位数组下标，进而确定对象存储位置的，最坏的情况是通过hash函数计算出的下标都为相同，那么HashMap就退化成链表了，最好的情况是都不相同那么就能达到O(1)的效率，所以hash计算出来冲突产生越多，那么查找效率就越低。冲突越少查找效率越高。</li>
<li>处理冲突的方法：既要有较高的查找性能，又要有较高的插入性能，那么冲突就无法避免，解决冲突的方式也决定了其性能的优劣。</li>
</ul>
<h2 id="2-HashMap具体实现"><a href="#2-HashMap具体实现" class="headerlink" title="2.HashMap具体实现"></a>2.HashMap具体实现</h2><h3 id="从key到数组的下标"><a href="#从key到数组的下标" class="headerlink" title="从key到数组的下标"></a>从key到数组的下标</h3><ul>
<li>首先根据key调用hashCode()方法生成hashCode</li>
<li>调用hash()方法根据生成的hashCode生成hash值</li>
<li>利用hash值与数组table的length - 1求余得到数组下标（为了使得到的数组在数组区间内）</li>
</ul>
<p><code>hash()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> h;</div><div class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这段代码叫扰动函数，大家都知道上面代码中的<code>key.hashCode()</code>函数调用的是key键值类型自带的哈希函数，返回int型散列值。<br>理论上散列值是一个int型，如果直接拿散列值作为下标访问HashMap主数组的话，考虑到带符号的int表值范围前后加起来大概40亿的映射空间，只要哈希函数映射得比较均匀松散，一般应用是很难出现碰撞的。<br>但问题是一个40亿长度的数组，内存是放不下的。HashMap扩容之前的数组初始大小才16，所以这个散列值是不能直接拿来用的。用之前还要先做对数组的长度取模运算，得到的余数才能用来访问数组下标。源码中模运算是在类似<code>indexFor()</code>函数里这样完成的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bucketIndex = indexFor(hash, table.length);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这正好解释了为什么HashMap的数组长度要取2的整次幂，因为这样（数组长度 - 1）正好相当于一个“低位掩码”，“与”操作的结果就是散列值得高位全部归零，只保留低位值，用来做下标访问。以初始长度为16示例，16 - 1 = 15，2进制表示就是<code>00000000 00000000 00001111</code>。和某散列值做“与”操作如下，结果就是截取了最低的四位值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    10100101 11000100 00100101</div><div class="line">&amp;   00000000 00000000 00001111</div><div class="line">----------------------------------</div><div class="line">    00000000 00000000 00000101    //高位全部归零，只保留末四位</div></pre></td></tr></table></figure></p>
<p>但这时候问题就来了，就算散列值分布再分散，要是只取最后几位的话，碰撞也会很严重，更要命的是如果散列本身做得不好，分布上成等差数列的漏洞，恰好使最后几个低位呈现规律性重复，就会造成很严重的后果。<br>这时候“扰动函数”的价值就体现出来了，如下图：<br><img src="http://omdld2kxe.bkt.clouddn.com/4acf898694b8fb53498542dc0c5f765a_b.png" alt="扰动函数计算过程"><br>右位移16位，正好是32bit的一半，自己的高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位参杂了高位的部分特征，这样高位的信息也被变相保留下来。<br>参考：<br><a href="https://www.zhihu.com/question/20733617" target="_blank" rel="external">JDK 源码中 HashMap 的 hash 方法原理是什么？</a></p>
<h3 id="数组大小"><a href="#数组大小" class="headerlink" title="数组大小"></a>数组大小</h3><p>这里涉及到一个非常有趣且niubi的函数<code>tableSizeFor()</code>，其源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPASITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line">     * Returns a power of two size for the given target capacity.</div><div class="line">     */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> n = cap - <span class="number">1</span>;</div><div class="line">      n |= n &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">      n |= n &gt;&gt;&gt; <span class="number">2</span>;</div><div class="line">      n |= n &gt;&gt;&gt; <span class="number">4</span>;</div><div class="line">      n |= n &gt;&gt;&gt; <span class="number">8</span>;</div><div class="line">      n |= n &gt;&gt;&gt; <span class="number">16</span>;</div><div class="line">      <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法被调用的地方：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">        <span class="comment">/**省略此处代码**/</span></div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面的方法就是数组大小生成的方法，永远生成的是一个2的幂的数，也就是说例如输入15，返回的结果就是16。<br>为什么这个方法总能在给定一个值之后返回一个大于它同时最接近它或者等于它的2次幂呢？<br>首先看下下面这段二进制数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>的<span class="number">0</span>次方<span class="number">2</span>进制  <span class="number">0000</span> <span class="number">0001</span>    十进制 <span class="number">1</span></div><div class="line"><span class="number">2</span>的<span class="number">1</span>次方<span class="number">2</span>进制  <span class="number">0000</span> <span class="number">0010</span>    十进制  <span class="number">2</span></div><div class="line"><span class="number">2</span>的<span class="number">2</span>次方<span class="number">2</span>进制  <span class="number">0000</span> <span class="number">0100</span>    十进制  <span class="number">4</span></div><div class="line"><span class="number">2</span>的<span class="number">3</span>次方<span class="number">2</span>进制  <span class="number">0000</span> <span class="number">1000</span>    十进制  <span class="number">8</span></div><div class="line"><span class="number">2</span>的<span class="number">4</span>次方<span class="number">2</span>进制  <span class="number">0001</span> <span class="number">0000</span>    十进制  <span class="number">16</span></div></pre></td></tr></table></figure>
<p>我们发现临近的两个2的幂的高位是相邻的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">例如7要取到8 所以将</div><div class="line">0000 0111</div><div class="line">无符号右移</div><div class="line">0000 0111 &gt;&gt;&gt;1 等于 0000 0011</div><div class="line">进行与操作 （只要存在1那么是1）</div><div class="line">0000 0111 | 0000 0011 等于 0000 0111</div><div class="line">n + 1（源码三目运算符）</div><div class="line">0000 0111 + 0000 0001=0000 1000</div><div class="line"></div><div class="line">给定数字为4最后通过右移变成8</div><div class="line">0000 0100</div><div class="line">无符号右移1</div><div class="line">0000 0100 &gt;&gt;&gt;1 等于 0000 0010</div><div class="line">进行与操作 （只要存在1那么是1）</div><div class="line">0000 0100   |    0000 0010  等于  0000 0110</div><div class="line">接着因为已经有2位达到变成1的目的，所以接着就是移动2位</div><div class="line">0000 0110   &gt;&gt;&gt;   0000 0011</div><div class="line">进行与操作 （只要存在1那么是1）</div><div class="line">0000 0110    |    0000 0011  等于  0000 0111</div><div class="line">n + 1（源码三目运算符）</div><div class="line">0000 0111 + 0000 1000 =8</div></pre></td></tr></table></figure>
<p>借助两个2的幂之间的高位是相邻的的方式。然后通过无符号右移使得给定的数高位以后全变成1这样最后进行n+1就获取到了最小大于它的2的幂。<br>至于源码为什么到了16就不操作了，是因为int类型是占4个字节，每个字节8位，共32位。而向右移动16位后，可以从高位第一个出现1的位置开始向右连续32位为1，已经超越了int的最大值，所以不用在进行位移操作了，这也是代码中只是移动16位后就结束的原因。<br>注意：得到的这个capacity却被赋值给了threshold：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</div></pre></td></tr></table></figure>
<p>按理说，应该这么写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity) * <span class="keyword">this</span>.loadFactor;</div></pre></td></tr></table></figure>
<p>但是，请注意，在构造方法中，并没有对table这个成员变量进行初始化，table的初始化被推迟到了put方法中，在put方法中会对threshold进行重新运算。</p>
<h3 id="HashMap是怎么进行扩容的"><a href="#HashMap是怎么进行扩容的" class="headerlink" title="HashMap是怎么进行扩容的"></a>HashMap是怎么进行扩容的</h3><p>扩容（resize）就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法转载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。</p>
<p><code>resize()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class="line">       Node&lt;K,V&gt;[] oldTab = table;</div><div class="line">       <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</div><div class="line">       <span class="keyword">int</span> oldThr = threshold;</div><div class="line">       <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class="line">               <span class="comment">//如果capcity超过最大阈值了，threshold也设为最大阈值</span></div><div class="line">               threshold = Integer.MAX_VALUE;</div><div class="line">               <span class="keyword">return</span> oldTab;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line">               newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></div><div class="line">           <span class="comment">//这里便是上面所讲的，一开始将值赋给了threshold,后面将值赋给capacity</span></div><div class="line">           newCap = oldThr;</div><div class="line">       <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></div><div class="line">           newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line">           newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">//这里有来了一轮threshold的赋值</span></div><div class="line">           <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</div><div class="line">           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</div><div class="line">                     (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</div><div class="line">       &#125;</div><div class="line">       threshold = newThr;</div><div class="line">       <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</div><div class="line">           Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</div><div class="line">       table = newTab;</div><div class="line">       <span class="comment">//非新建hashmap，扩容</span></div><div class="line">       <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</div><div class="line">               Node&lt;K,V&gt; e;</div><div class="line">               <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</div><div class="line">                   oldTab[j] = <span class="keyword">null</span>;</div><div class="line">                   <span class="comment">//如果在该位置上只有一个值</span></div><div class="line">                   <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</div><div class="line">                       newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</div><div class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                       ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</div><div class="line">                   <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></div><div class="line">                       <span class="comment">//链表优化重hash</span></div><div class="line">                       Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                       Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                       Node&lt;K,V&gt; next;</div><div class="line">                       <span class="comment">//使用尾插法</span></div><div class="line">                       <span class="keyword">do</span> &#123;</div><div class="line">                           next = e.next;</div><div class="line">                           <span class="comment">//lo - 原索引</span></div><div class="line">                           <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</div><div class="line">                               <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</div><div class="line">                                   loHead = e;</div><div class="line">                               <span class="keyword">else</span></div><div class="line">                                   loTail.next = e;</div><div class="line">                               loTail = e;</div><div class="line">                           &#125;</div><div class="line">                           <span class="comment">//hi - 原索引 + oldcap</span></div><div class="line">                           <span class="keyword">else</span> &#123;</div><div class="line">                               <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</div><div class="line">                                   hiHead = e;</div><div class="line">                               <span class="keyword">else</span></div><div class="line">                                   hiTail.next = e;</div><div class="line">                               hiTail = e;</div><div class="line">                           &#125;</div><div class="line">                       &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</div><div class="line">                       <span class="comment">//原索引放到bucket里</span></div><div class="line">                       <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</div><div class="line">                           loTail.next = <span class="keyword">null</span>;</div><div class="line">                           newTab[j] = loHead;</div><div class="line">                       &#125;</div><div class="line">                       <span class="comment">//原索引+oldCap放到bucket里</span></div><div class="line">                       <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</div><div class="line">                           hiTail.next = <span class="keyword">null</span>;</div><div class="line">                           newTab[j + oldCap] = hiHead;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> newTab;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。<br><img src="http://omdld2kxe.bkt.clouddn.com/hashMap.png" alt="扩容计算|center"></p>
<p>元素重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit（红色），因此新的index就会发生这样的变化：<br><img src="http://omdld2kxe.bkt.clouddn.com/hashMap2.png" alt="扩容计算2|center"></p>
<p>因此，我们在扩充HashMap的时候，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：<br><img src="http://omdld2kxe.bkt.clouddn.com/jdk1.8hashmap.png" alt="hashMap扩容机制|center"><br>参考：<a href="http://www.importnew.com/20386.html" target="_blank" rel="external">resize()函数解析</a></p>
<h3 id="HashMap中的内部类"><a href="#HashMap中的内部类" class="headerlink" title="HashMap中的内部类"></a>HashMap中的内部类</h3><p><code>Node类</code>：每个node都含有hash、key、value、next等成员变量</p>
<ul>
<li>hash：key的hash值</li>
<li>key、value：node的键和值</li>
<li>next：node的下一个node，在产生冲突的时候next才有值</li>
</ul>
<p><strong>注意Node类重写了<code>equals()</code>和<code>hashCode()</code>方法</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">        <span class="keyword">final</span> K key;</div><div class="line">        V value;</div><div class="line">        Node&lt;K,V&gt; next;</div><div class="line"></div><div class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class="line">            <span class="keyword">this</span>.hash = hash;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</div><div class="line"></div><div class="line">        <span class="comment">//重写了hashCode()方法</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</div><div class="line">            V oldValue = value;</div><div class="line">            value = newValue;</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//重写了equals方法，参考</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</div><div class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class="line">                    Objects.equals(value, e.getValue()))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Node中存储了key的hash值，键值对，同时还有下一个链表元素。我们重点关注一些equals这个方法，这个方法在什么时候会用到呢？当我们算出的key的hash值相同时，put方法并不会报错，而是继续向这个hash值的链表中添加元素。我们会调用equals方法来比对key和value是否相同，如果equals方法返回false，会继续向链表的尾部添加一个键值对。</p>
<p><strong>未完待续…</strong><br><strong>接下来将会就put和get方法展开源码的阅读…</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HashMap源码阅读（上）&quot;&gt;&lt;a href=&quot;#HashMap源码阅读（上）&quot; class=&quot;headerlink&quot; title=&quot;HashMap源码阅读（上）&quot;&gt;&lt;/a&gt;HashMap源码阅读（上）&lt;/h1&gt;&lt;h2 id=&quot;1-HashMap数据结构简介&quot;&gt;&lt;a href=&quot;#1-HashMap数据结构简介&quot; class=&quot;headerlink&quot; title=&quot;1.HashMap数据结构简介&quot;&gt;&lt;/a&gt;1.HashMap数据结构简介&lt;/h2&gt;&lt;p&gt;HashMap就是数据结构中的散列表，是以key、value的形式进行存储数据的。数组具有查找定位快，但是插入操作性能差的特点；链表具有查找慢插入快的特点，而HashMap可以说是这两种方式的一种折中。&lt;br&gt;HashMap采用数组与链表相结合的方式实现，其数据结构示意图如下图所示：&lt;br&gt;&lt;img src=&quot;http://omdld2kxe.bkt.clouddn.com/3239635-41e5f95e197a5a8e.png&quot; alt=&quot;HashMap数据结构示意图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java源码" scheme="wanglilin.github.io/categories/Java%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Java基础" scheme="wanglilin.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java源码阅读" scheme="wanglilin.github.io/tags/Java%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android-备忘录开发</title>
    <link href="wanglilin.github.io/2017/03/19/android-memo/"/>
    <id>wanglilin.github.io/2017/03/19/android-memo/</id>
    <published>2017-03-19T06:30:50.000Z</published>
    <updated>2017-03-19T06:37:56.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>由于项目需求，最近需要开发一个备忘录，备忘录对于Android是一个很普遍的功能。其实我内心os是每台手机自带的系统就有备忘录功能，在一个App中再开发一个备忘录功能实在是鸡肋。然鹅，做项目就是这样，老板喊做，那我就做着呗。由于为了毕业还要看文献看算法什么的，平时也没什么时间，所以这次只是简单的做了一个可以基于SQLite本地数据库进行备忘录增删查改操作的一个功能。主要实现以下几点功能：</p>
<ul>
<li>备忘录的增删查改功能</li>
<li>每条备忘录包含标题、内容、时间</li>
<li>备忘录的排列顺序按照时间来，后来居上</li>
</ul>
<a id="more"></a>
<h2 id="2-预备知识"><a href="#2-预备知识" class="headerlink" title="2 预备知识"></a>2 预备知识</h2><h3 id="2-1-SQLite基础"><a href="#2-1-SQLite基础" class="headerlink" title="2.1 SQLite基础"></a>2.1 SQLite基础</h3><p>在很多项目开发中，我们或多或少都会用到数据库。在Android中，我们一般使用SQLite。因为Android在<code>android.database.sqlite</code>包封装了很多SQLite的API。</p>
<h4 id="继承SQLiteOpenHelper"><a href="#继承SQLiteOpenHelper" class="headerlink" title="继承SQLiteOpenHelper"></a>继承SQLiteOpenHelper</h4><p>在使用SQLite时，首先创建一个继承<code>SQLiteOpenHelper</code>的类，并重写<code>onCreate()</code>和<code>onUpgrade()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDBHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"myTest.db"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME = <span class="string">"Orders"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderDBHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase)</span> </span>&#123;</div><div class="line">        <span class="comment">// create table Orders(Id integer primary key, CustomName text, OrderPrice integer, Country text);</span></div><div class="line">        String sql = <span class="string">"create table if not exists "</span> + TABLE_NAME + <span class="string">" (Id integer primary key, CustomName text, OrderPrice integer, Country text)"</span>;</div><div class="line">        sqLiteDatabase.execSQL(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"DROP TABLE IF EXISTS "</span> + TABLE_NAME;</div><div class="line">        sqLiteDatabase.execSQL(sql);</div><div class="line">        onCreate(sqLiteDatabase);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个类的作用主要是用来创建数据库和建表用，一般来说，我们会再创建一个OrderDao类用于处理所有的数据操作方法。在OrderDao中实例化OrderDBHelper：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderDao</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.context = context;</div><div class="line">    ordersDBHelper = <span class="keyword">new</span> OrderDBHelper(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="SQLite的增删查改操作"><a href="#SQLite的增删查改操作" class="headerlink" title="SQLite的增删查改操作"></a>SQLite的增删查改操作</h4><p>数据库操作无外乎“增删查改”，我们依据操作是否对数据库有改动将其分为两类：</p>
<ul>
<li><p><strong>“增删改”</strong><br>对于“增删改”这类对表内容变换的操作，我们需要先调用<code>getWritableDatabase()</code>,执行的时候可以调用通用的<code>excecSQL(String sql)</code>方法或对应的操作API：<code>insert()</code>、<code>delete()</code>、<code>update()</code>。</p>
</li>
<li><p><strong>“查”</strong><br>对于“查”这种对表内容无影响的操作，我们需要调用<code>getReadableDatabase()</code>，这时就不能用execSQL方法，而该改用<code>query()</code>或<code>rawQuery()</code>方法。</p>
</li>
</ul>
<h5 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h5><ul>
<li><strong>数据量较多时</strong><br>开启事物进行添加：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">db = ordersDBHelper.getWritableDatabase();</div><div class="line">db.beginTransaction();</div><div class="line"></div><div class="line">db.execSQL(<span class="string">"insert into "</span> + OrderDBHelper.TABLE_NAME + <span class="string">" (Id, CustomName, OrderPrice, Country) values (1, 'Arc', 100, 'China')"</span>);</div><div class="line">db.execSQL(<span class="string">"insert into "</span> + OrderDBHelper.TABLE_NAME + <span class="string">" (Id, CustomName, OrderPrice, Country) values (2, 'Bor', 200, 'USA')"</span>);</div><div class="line">db.execSQL(<span class="string">"insert into "</span> + OrderDBHelper.TABLE_NAME + <span class="string">" (Id, CustomName, OrderPrice, Country) values (3, 'Cut', 500, 'Japan')"</span>);</div><div class="line">db.execSQL(<span class="string">"insert into "</span> + OrderDBHelper.TABLE_NAME + <span class="string">" (Id, CustomName, OrderPrice, Country) values (4, 'Bor', 300, 'USA')"</span>);</div><div class="line">db.execSQL(<span class="string">"insert into "</span> + OrderDBHelper.TABLE_NAME + <span class="string">" (Id, CustomName, OrderPrice, Country) values (5, 'Arc', 600, 'China')"</span>);</div><div class="line">db.execSQL(<span class="string">"insert into "</span> + OrderDBHelper.TABLE_NAME + <span class="string">" (Id, CustomName, OrderPrice, Country) values (6, 'Doom', 200, 'China')"</span>);</div><div class="line"></div><div class="line">db.setTransactionSuccessful();</div></pre></td></tr></table></figure>
<ul>
<li><strong>插入一条新数据</strong><br>可以使用<code>insert(String table, String nullColumnHack, ContentValues values)</code>方法来插入，<code>ContentValues</code>内部实现就是HashMap，但是两者还是有区别的，<code>ContentValues</code>的Key只能存储String类型，Value只能存储基本数据类型以及String类型这些，不能存储对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">db = ordersDBHelper.getWritableDatabase();</div><div class="line">db.beginTransaction();</div><div class="line"></div><div class="line"><span class="comment">// insert into Orders(Id, CustomName, OrderPrice, Country) values (7, "Jne", 700, "China");</span></div><div class="line">ContentValues contentValues = <span class="keyword">new</span> ContentValues();</div><div class="line">contentValues.put(<span class="string">"Id"</span>, <span class="number">7</span>);</div><div class="line">contentValues.put(<span class="string">"CustomName"</span>, <span class="string">"Jne"</span>);</div><div class="line">contentValues.put(<span class="string">"OrderPrice"</span>, <span class="number">700</span>);</div><div class="line">contentValues.put(<span class="string">"Country"</span>, <span class="string">"China"</span>);</div><div class="line">db.insertOrThrow(OrderDBHelper.TABLE_NAME, <span class="keyword">null</span>, contentValues);</div><div class="line"></div><div class="line">db.setTransactionSuccessful();</div></pre></td></tr></table></figure>
<h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p><code>delete(String table, String WhereClause, String[] WhereArgs)</code>,whereClause是删除条件，whereArgs是删除条件值数组</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db = ordersDBHelper.getWritableDatabase();</div><div class="line">db.beginTransaction();</div><div class="line"></div><div class="line"><span class="comment">// delete from Orders where Id = 7</span></div><div class="line">db.delete(OrderDBHelper.TABLE_NAME, <span class="string">"Id = ?"</span>, <span class="keyword">new</span> String[]&#123;String.valueOf(<span class="number">7</span>)&#125;);</div><div class="line">db.setTransactionSuccessful();</div></pre></td></tr></table></figure>
<h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><p><code>update(String table, ContentValues, String whereClause, String[] whereArgs)</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">db = ordersDBHelper.getWritableDatabase();</div><div class="line">db.beginTransaction();</div><div class="line"></div><div class="line"><span class="comment">// update Orders set OrderPrice = 800 where Id = 6</span></div><div class="line">ContentValues cv = <span class="keyword">new</span> ContentValues();</div><div class="line">cv.put(<span class="string">"OrderPrice"</span>, <span class="number">800</span>);</div><div class="line">db.update(OrderDBHelper.TABLE_NAME,</div><div class="line">        cv,</div><div class="line">        <span class="string">"Id = ?"</span>,</div><div class="line">        <span class="keyword">new</span> String[]&#123;String.valueOf(<span class="number">6</span>)&#125;);</div><div class="line">db.setTransactionSuccessful();</div></pre></td></tr></table></figure>
<h5 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h5><ul>
<li><code>public Cursor query(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy,String limit)</code><br>query中的参数如下：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:right">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">table</td>
<td style="text-align:right">表名</td>
</tr>
<tr>
<td style="text-align:left">columns</td>
<td style="text-align:right">列名称数组</td>
</tr>
<tr>
<td style="text-align:left">selection</td>
<td style="text-align:right">条件字句，相当于where</td>
</tr>
<tr>
<td style="text-align:left">selectionArgs</td>
<td style="text-align:right">条件字句，参数数组</td>
</tr>
<tr>
<td style="text-align:left">groupBy</td>
<td style="text-align:right">分组列</td>
</tr>
<tr>
<td style="text-align:left">having</td>
<td style="text-align:right">分组条件</td>
</tr>
<tr>
<td style="text-align:left">orderBy</td>
<td style="text-align:right">排序列</td>
</tr>
<tr>
<td style="text-align:left">orderBy</td>
<td style="text-align:right">排序列</td>
</tr>
<tr>
<td style="text-align:left">limit</td>
<td style="text-align:right">分页查询限制</td>
</tr>
<tr>
<td style="text-align:left">cursor</td>
<td style="text-align:right">返回值</td>
</tr>
</tbody>
</table>
<p>返回值类型是<code>Cursor</code>，<code>Cursor</code>是一个游标接口，提供了遍历查询结果的方法，如移动指针方法<code>move()</code>，获得列值。<code>Cursor</code>游标常用方法如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/115957-7e7068ef5a687b48.png?imageView2/2/w/1240/q/100" alt="enter image description here"></p>
<ul>
<li><code>public Cursor rawQuery(String sql, String[] selectionArgs)</code></li>
</ul>
<p>类似<code>execSQL</code>方法，不做介绍。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">db = ordersDBHelper.getReadableDatabase();</div><div class="line"></div><div class="line"><span class="comment">// select * from Orders where CustomName = 'Bor'</span></div><div class="line">cursor = db.query(OrderDBHelper.TABLE_NAME,</div><div class="line">        ORDER_COLUMNS,</div><div class="line">        <span class="string">"CustomName = ?"</span>,</div><div class="line">        <span class="keyword">new</span> String[] &#123;<span class="string">"Bor"</span>&#125;,</div><div class="line">        <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (cursor.getCount() &gt; <span class="number">0</span>) &#123;</div><div class="line">    List&lt;Order&gt; orderList = <span class="keyword">new</span> ArrayList&lt;Order&gt;(cursor.getCount());</div><div class="line">    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">        Order order = parseOrder(cursor);</div><div class="line">        orderList.add(order);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> orderList;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-FloatingActionButton的使用"><a href="#2-2-FloatingActionButton的使用" class="headerlink" title="2.2 FloatingActionButton的使用"></a>2.2 FloatingActionButton的使用</h3><p>Floating Action Button（FAB）是众多专家大牛针对Material Design讨论比较细化的一个点，通过圆形元素与分割线、卡片、各种Bar的直线形成鲜明对比，并使用色彩设定中鲜艳的辅色，带来更具突破性的视觉效果。也正因此，在github上，有着许多与FAB相关的开源项目，其具有弹出特效与自动隐藏等功能，虽然本次并没有用到。简单介绍 如何使用：</p>
<h4 id="2-2-1-导入依赖"><a href="#2-2-1-导入依赖" class="headerlink" title="2.2.1 导入依赖"></a>2.2.1 导入依赖</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.getbase:floatingactionbutton:1.10.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-2-添加View到layout的xml文件中"><a href="#2-2-2-添加View到layout的xml文件中" class="headerlink" title="2.2.2 添加View到layout的xml文件中"></a>2.2.2 添加View到layout的xml文件中</h4><ul>
<li>声明自定义命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:fab="http://schemas.android.com/apk/res-auto"</div></pre></td></tr></table></figure>
<ul>
<li>添加<code>com.getbase.floatingactionbutton.FloatingActionButton</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/add"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentEnd</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"15dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_add"</span></div><div class="line">            <span class="attr">fab:fab_colorNormal</span>=<span class="string">"#37c674"</span></div><div class="line">            <span class="attr">fab:fab_colorPressed</span>=<span class="string">"@color/white"</span> /&gt;</div></pre></td></tr></table></figure>
<h4 id="2-2-3-实现弹出菜单功能"><a href="#2-2-3-实现弹出菜单功能" class="headerlink" title="2.2.3 实现弹出菜单功能"></a>2.2.3 实现弹出菜单功能</h4><p>这次我并没有做弹出菜单功能，只是给button绑定了一个监听器进行activity之间的跳转。如果有需要用到其弹窗功能，可以参考以下链接：<a href="http://www.jianshu.com/p/c8ea30b9551b" target="_blank" rel="external">FloatingActionButton的使用</a></p>
<h3 id="2-3-CardView的使用"><a href="#2-3-CardView的使用" class="headerlink" title="2.3 CardView的使用"></a>2.3 CardView的使用</h3><p>CardView继承自FrameLayout类，是一种卡片视图，以卡片形式显示内容。卡片布局可以设置圆角与阴影，还可以布局其他的View。CardView可以作为一般的布局使用，也可以作为ListView和RecyclerView的Item使用。</p>
<h4 id="2-3-1-导入依赖"><a href="#2-3-1-导入依赖" class="headerlink" title="2.3.1 导入依赖"></a>2.3.1 导入依赖</h4><p>CardView的位置在supportV7包之中，因此，在使用时，需要导入v7包的依赖。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:cardview-v7:24.0.0'</span></div></pre></td></tr></table></figure>
<h4 id="2-3-2-CardView属性"><a href="#2-3-2-CardView属性" class="headerlink" title="2.3.2 CardView属性"></a>2.3.2 CardView属性</h4><ul>
<li><code>android:cardCornerRadius</code>：设置card圆角的大小</li>
<li><code>android:cardBackgroundColor</code>：设置card的背景颜色</li>
<li><code>android:elevation</code>：设置阴影的大小</li>
<li><code>android:contentPadding</code>：设置卡片内容与边界的间隔</li>
<li><code>android:cardUseCompatPadding</code>：设置内边距，防止内容与边角的重叠</li>
</ul>
<h4 id="2-3-3-CardView作为listView中单个item的布局"><a href="#2-3-3-CardView作为listView中单个item的布局" class="headerlink" title="2.3.3 CardView作为listView中单个item的布局"></a>2.3.3 CardView作为listView中单个item的布局</h4><p>用来显示单条备忘录内容的布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:card_view</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">card_view:cardCornerRadius</span>=<span class="string">"6dp"</span></div><div class="line">        <span class="attr">card_view:cardElevation</span>=<span class="string">"4dp"</span></div><div class="line">        <span class="attr">card_view:cardUseCompatPadding</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">card_view:contentPadding</span>=<span class="string">"10dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/note_title"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"#ff000000"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></div><div class="line">                <span class="attr">android:textStyle</span>=<span class="string">"bold"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/note_content"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_below</span>=<span class="string">"@+id/note_title"</span></div><div class="line">                <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"#ff000000"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/note_time"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:layout_below</span>=<span class="string">"@+id/note_content"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"#ff2a0f5c"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"12sp"</span></div><div class="line">                <span class="attr">android:textStyle</span>=<span class="string">"italic"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/note_id"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:visibility</span>=<span class="string">"gone"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-备忘录实战"><a href="#3-备忘录实战" class="headerlink" title="3 备忘录实战"></a>3 备忘录实战</h2><h3 id="3-1-数据库相关类封装"><a href="#3-1-数据库相关类封装" class="headerlink" title="3.1 数据库相关类封装"></a>3.1 数据库相关类封装</h3><h4 id="3-1-1-NoteOpenHelper继承自SQLiteOpenHelper"><a href="#3-1-1-NoteOpenHelper继承自SQLiteOpenHelper" class="headerlink" title="3.1.1 NoteOpenHelper继承自SQLiteOpenHelper"></a>3.1.1 NoteOpenHelper继承自SQLiteOpenHelper</h4><p>用于创建数据库及备忘录表，每条记录有4个字段，分别是id（主键，自增）、content（备忘录内容）、title（备忘录标题）、time（备忘录记录时间），其代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME = <span class="string">"note"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TITLE = <span class="string">"title"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT = <span class="string">"content"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TIME = <span class="string">"time"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ID = <span class="string">"_id"</span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoteOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, TABLE_NAME, <span class="keyword">null</span>, VERSION);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase)</span> </span>&#123;</div><div class="line"></div><div class="line">        sqLiteDatabase.execSQL(<span class="string">"create table if not exists "</span> + TABLE_NAME + <span class="string">" ("</span></div><div class="line">                + ID + <span class="string">" integer primary key autoincrement,"</span></div><div class="line">                + CONTENT + <span class="string">" text not null,"</span></div><div class="line">                + TITLE + <span class="string">" text not null,"</span></div><div class="line">                + TIME + <span class="string">" text not null)"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<h4 id="3-1-2-数据库操作类DBManager"><a href="#3-1-2-数据库操作类DBManager" class="headerlink" title="3.1.2 数据库操作类DBManager"></a>3.1.2 数据库操作类DBManager</h4><p>SQLite的数据库的增删查改若不经过一番封装，代码将显得冗余不优雅，因此将其封装在一个操作类中，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBManger</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> NoteOpenHelper databaseOpenHelper;</div><div class="line">    <span class="keyword">private</span> SQLiteDatabase dbReader;</div><div class="line">    <span class="keyword">private</span> SQLiteDatabase dbWriter;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DBManger instance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBManger</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        databaseOpenHelper = <span class="keyword">new</span> NoteOpenHelper(context);</div><div class="line">        <span class="comment">//创建、打开一个数据库</span></div><div class="line">        dbReader = databaseOpenHelper.getReadableDatabase();</div><div class="line">        dbWriter = databaseOpenHelper.getWritableDatabase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * getInstance单例</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> DBManger <span class="title">getInstance</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</div><div class="line">            instance = <span class="keyword">new</span> DBManger(context);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加纪录至数据库</div><div class="line">     * <span class="doctag">@param</span> title</div><div class="line">     * <span class="doctag">@param</span> content</div><div class="line">     * <span class="doctag">@param</span> time</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addToDB</span><span class="params">(String title, String content, String time)</span></span>&#123;</div><div class="line">        <span class="comment">//组装数据</span></div><div class="line">        ContentValues cv = <span class="keyword">new</span> ContentValues();</div><div class="line">        cv.put(NoteOpenHelper.TITLE, title);</div><div class="line">        cv.put(NoteOpenHelper.CONTENT, content);</div><div class="line">        cv.put(NoteOpenHelper.TIME, time);</div><div class="line">        dbWriter.insert(NoteOpenHelper.TABLE_NAME, <span class="keyword">null</span>, cv);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 读取数据</div><div class="line">     * <span class="doctag">@param</span> noteList</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFromDB</span><span class="params">(List&lt;Note&gt; noteList)</span></span>&#123;</div><div class="line">        Cursor cursor = dbReader.query(NoteOpenHelper.TABLE_NAME, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">while</span>(cursor.moveToNext())&#123;</div><div class="line">                Note note = <span class="keyword">new</span> Note();</div><div class="line">                note.setId(cursor.getInt(cursor.getColumnIndex(NoteOpenHelper.ID)));</div><div class="line">                note.setTitle(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.TITLE)));</div><div class="line">                note.setContent(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.CONTENT)));</div><div class="line">                note.setTime(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.TIME)));</div><div class="line">                noteList.add(note);</div><div class="line">            &#125;</div><div class="line">            cursor.close();</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新数据</div><div class="line">     * <span class="doctag">@param</span> noteID</div><div class="line">     * <span class="doctag">@param</span> title</div><div class="line">     * <span class="doctag">@param</span> content</div><div class="line">     * <span class="doctag">@param</span> time</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateNote</span><span class="params">(<span class="keyword">int</span> noteID, String title, String content, String time)</span> </span>&#123;</div><div class="line">        ContentValues cv = <span class="keyword">new</span> ContentValues();</div><div class="line">        cv.put(NoteOpenHelper.ID, noteID);</div><div class="line">        cv.put(NoteOpenHelper.TITLE, title);</div><div class="line">        cv.put(NoteOpenHelper.CONTENT, content);</div><div class="line">        cv.put(NoteOpenHelper.TIME, time);</div><div class="line">        dbWriter.update(NoteOpenHelper.TABLE_NAME, cv, <span class="string">"_id = ?"</span>, <span class="keyword">new</span> String[]&#123;noteID + <span class="string">""</span>&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除数据</div><div class="line">     * <span class="doctag">@param</span> noteID</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNote</span><span class="params">(<span class="keyword">int</span> noteID)</span> </span>&#123;</div><div class="line">        dbWriter.delete(NoteOpenHelper.TABLE_NAME, <span class="string">"_id = ?"</span>, <span class="keyword">new</span> String[]&#123;noteID + <span class="string">""</span>&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据ID查询数据</div><div class="line">     * <span class="doctag">@param</span> noteID</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Note <span class="title">readData</span><span class="params">(<span class="keyword">int</span> noteID)</span> </span>&#123;</div><div class="line">        Cursor cursor = dbReader.rawQuery(<span class="string">"SELECT * FROM note WHERE _id = ?"</span>, <span class="keyword">new</span> String[]&#123;noteID + <span class="string">""</span>&#125;);</div><div class="line">        Note note = <span class="keyword">new</span> Note();</div><div class="line">        System.out.println(<span class="string">"database:cursor:"</span> + cursor);</div><div class="line">        <span class="keyword">if</span>(cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst())&#123;</div><div class="line">            note.setId(cursor.getInt(cursor.getColumnIndex(NoteOpenHelper.ID)));</div><div class="line">            note.setTitle(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.TITLE)));</div><div class="line">            note.setContent(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.CONTENT)));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> note;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-备忘录列表listView适配器"><a href="#3-2-备忘录列表listView适配器" class="headerlink" title="3.2 备忘录列表listView适配器"></a>3.2 备忘录列表listView适配器</h3><p>这个就没什么好说的了，为了提高性能，用了ViewHolder。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> List&lt;Note&gt; notes;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context context, List&lt;Note&gt; notes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="comment">//实现倒序排列</span></div><div class="line">        Collections.reverse(notes);</div><div class="line">        <span class="keyword">this</span>.notes = notes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAllItem</span><span class="params">()</span> </span>&#123;</div><div class="line">        notes.clear();</div><div class="line">        notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        notes.remove(position);</div><div class="line">        notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> notes.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Note <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> notes.get(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, <span class="keyword">final</span> ViewGroup parent)</span> </span>&#123;</div><div class="line">        ViewHolder viewHolder;</div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)&#123;</div><div class="line">            convertView = LayoutInflater.from(context).inflate(R.layout.item_note, <span class="keyword">null</span>);</div><div class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            viewHolder.tvTitle = (TextView) convertView.findViewById(R.id.note_title);</div><div class="line">            viewHolder.tvContent = (TextView) convertView.findViewById(R.id.note_content);</div><div class="line">            viewHolder.tvTime = (TextView) convertView.findViewById(R.id.note_time);</div><div class="line"></div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            viewHolder = (ViewHolder) convertView.getTag();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        viewHolder.setId(notes.get(position).getId());</div><div class="line">        viewHolder.tvTitle.setText(notes.get(position).getTitle());</div><div class="line">        viewHolder.tvContent.setText(notes.get(position).getContent());</div><div class="line">        viewHolder.tvTime.setText(notes.get(position).getTime());</div><div class="line"></div><div class="line">        convertView.setTag(viewHolder);</div><div class="line">        <span class="keyword">return</span> convertView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Id;</div><div class="line">        <span class="keyword">public</span> TextView tvTitle;</div><div class="line">        <span class="keyword">public</span> TextView tvContent;</div><div class="line">        <span class="keyword">public</span> TextView tvTime;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">            Id = id;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-3-主界面和编辑界面"><a href="#3-3-主界面和编辑界面" class="headerlink" title="3.3 主界面和编辑界面"></a>3.3 主界面和编辑界面</h3><h4 id="3-3-1-主界面"><a href="#3-3-1-主界面" class="headerlink" title="3.3.1 主界面"></a>3.3.1 主界面</h4><p>主界面布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:fab</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/head_h"</span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/inc_head"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/list"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:divider</span>=<span class="string">"@null"</span>&gt;<span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/empty"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"点击右下方图标添加备忘"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"16sp"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/add"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentEnd</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"15dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_add"</span></div><div class="line">            <span class="attr">fab:fab_colorNormal</span>=<span class="string">"#37c674"</span></div><div class="line">            <span class="attr">fab:fab_colorPressed</span>=<span class="string">"@color/white"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>主要是一个Listview和FAB，以及一个TextView，用以在当没有备忘录条目时，默认提示“点击右下方按钮增加备忘”。</p>
<p>Activity：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiefNotepadActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> FloatingActionButton addBtn;</div><div class="line">    <span class="keyword">private</span> TextView emptyListTextView;</div><div class="line">    <span class="keyword">private</span> DBManger dm;</div><div class="line">    <span class="keyword">private</span> List&lt;Note&gt; noteDataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> MyAdapter adapter;</div><div class="line">    <span class="keyword">private</span> ListView listView;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_chief_notepad);</div><div class="line">        setTitle(<span class="string">"备忘录"</span>);</div><div class="line">        initHead(R.drawable.ic_head_back, <span class="number">0</span>);</div><div class="line"></div><div class="line">        initNotePad();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initNotePad</span><span class="params">()</span> </span>&#123;</div><div class="line">        dm = <span class="keyword">new</span> DBManger(<span class="keyword">this</span>);</div><div class="line">        dm.readFromDB(noteDataList);</div><div class="line">        listView = (ListView) findViewById(R.id.list);</div><div class="line">        addBtn = (FloatingActionButton) findViewById(R.id.add);</div><div class="line">        emptyListTextView = (TextView) findViewById(R.id.empty);</div><div class="line">        addBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Intent i = <span class="keyword">new</span> Intent(ChiefNotepadActivity.<span class="keyword">this</span>, ChiefEditNoteActivity.class);</div><div class="line">                i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</div><div class="line">                startActivity(i);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"><span class="comment">//        adapter = new MyAdapter(this, noteDataList);</span></div><div class="line">        adapter = <span class="keyword">new</span> MyAdapter(<span class="keyword">this</span>, noteDataList);</div><div class="line">        listView.setAdapter(adapter);</div><div class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> NoteClickListener());</div><div class="line">        listView.setOnItemLongClickListener(<span class="keyword">new</span> NoteLongClickListener());</div><div class="line">        updateView();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">//listView单击事件</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteClickListener</span> <span class="keyword">implements</span> <span class="title">AdapterView</span>.<span class="title">OnItemClickListener</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="keyword">int</span> i, <span class="keyword">long</span> l)</span> </span>&#123;</div><div class="line"></div><div class="line">            MyAdapter.ViewHolder viewHolder = (MyAdapter.ViewHolder) view.getTag();</div><div class="line">            <span class="keyword">int</span> noteId = viewHolder.Id;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(ChiefNotepadActivity.<span class="keyword">this</span>, ChiefEditNoteActivity.class);</div><div class="line">            intent.putExtra(<span class="string">"id"</span>, noteId);</div><div class="line">            startActivity(intent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//listView长按事件</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteLongClickListener</span> <span class="keyword">implements</span> <span class="title">AdapterView</span>.<span class="title">OnItemLongClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onItemLongClick</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="keyword">final</span> <span class="keyword">int</span> i, <span class="keyword">long</span> l)</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> Note note = ((MyAdapter) adapterView.getAdapter()).getItem(i);</div><div class="line">            <span class="keyword">if</span> (note == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> id = note.getId();</div><div class="line">            <span class="keyword">new</span> MaterialDialog.Builder(ChiefNotepadActivity.<span class="keyword">this</span>)</div><div class="line">                    .content(<span class="string">"确定删除此条笔记？"</span>)</div><div class="line">                    .positiveText(<span class="string">"确定"</span>)</div><div class="line">                    .negativeText(<span class="string">"取消"</span>)</div><div class="line">                    .callback(<span class="keyword">new</span> MaterialDialog.ButtonCallback()&#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPositive</span><span class="params">(MaterialDialog dialog)</span> </span>&#123;</div><div class="line">                            DBManger.getInstance(ChiefNotepadActivity.<span class="keyword">this</span>).deleteNote(id);</div><div class="line">                            adapter.removeItem(i);</div><div class="line">                            updateView();</div><div class="line">                        &#125;</div><div class="line">                    &#125;).show();</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//数据更新</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (noteDataList.isEmpty()) &#123;</div><div class="line">            listView.setVisibility(View.GONE);</div><div class="line">            emptyListTextView.setVisibility(View.VISIBLE);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            listView.setVisibility(View.VISIBLE);</div><div class="line">            emptyListTextView.setVisibility(View.GONE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要是初始化和三个监听事件函数：</p>
<ul>
<li>点击addBtn时，跳转至编辑界面</li>
<li>短按listView中的条目时，跳转至编辑界面，修改备忘录内容界面</li>
<li>长按listView中的条目时，弹窗，提示是否删除该条备忘录</li>
</ul>
<p>其中在跳转界面时，给<code>Intent</code>设置标志<code>FLAG_ACTIVITY_CLEAR_TOP</code>的原因在于,怕用户在主界面与编辑界面之间反复跳转时，会在栈中存留多个activity界面，而影响用户体验。</p>
<h4 id="3-3-2-编辑界面"><a href="#3-3-2-编辑界面" class="headerlink" title="3.3.2 编辑界面"></a>3.3.2 编辑界面</h4><p>界面布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:fab</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/head_h"</span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/inc_head"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/note_title"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:hint</span>=<span class="string">"请输入备忘标题"</span></div><div class="line">            <span class="attr">android:maxLength</span>=<span class="string">"50"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"@dimen/news_item_title_textsize"</span></div><div class="line">            <span class="attr">android:maxLines</span>=<span class="string">"1"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">requestFocus</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/note_content"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_below</span>=<span class="string">"@+id/note_title"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"start"</span></div><div class="line">            <span class="attr">android:hint</span>=<span class="string">"请在此输入备忘内容"</span></div><div class="line">            <span class="attr">android:inputType</span>=<span class="string">"textMultiLine"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/note_image"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_below</span>=<span class="string">"@+id/save"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/save"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentEnd</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"15dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_action_save"</span></div><div class="line">            <span class="attr">fab:fab_colorNormal</span>=<span class="string">"#37c674"</span></div><div class="line">            <span class="attr">fab:fab_colorPressed</span>=<span class="string">"@color/white"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zju.hzsz.chief.activity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.text.Selection;</div><div class="line"><span class="keyword">import</span> android.text.Spannable;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.getbase.floatingactionbutton.FloatingActionButton;</div><div class="line"><span class="keyword">import</span> com.zju.hzsz.R;</div><div class="line"><span class="keyword">import</span> com.zju.hzsz.db.DBManger;</div><div class="line"><span class="keyword">import</span> com.zju.hzsz.model.Note;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Wangli on 2017/3/8.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiefEditNoteActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> EditText titleEt;</div><div class="line">    <span class="keyword">private</span> EditText contentEt;</div><div class="line">    <span class="keyword">private</span> FloatingActionButton saveBtn;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> noteID = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> DBManger dbManger;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_chief_editnote);</div><div class="line">        setTitle(<span class="string">"编辑备忘"</span>);</div><div class="line">        initHead(R.drawable.ic_head_back, <span class="number">0</span>);</div><div class="line"></div><div class="line">        initEditNotePad();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initEditNotePad</span><span class="params">()</span> </span>&#123;</div><div class="line">        dbManger = <span class="keyword">new</span> DBManger(<span class="keyword">this</span>);</div><div class="line">        titleEt = (EditText) findViewById(R.id.note_title);</div><div class="line">        contentEt = (EditText) findViewById(R.id.note_content);</div><div class="line">        saveBtn = (FloatingActionButton) findViewById(R.id.save);</div><div class="line">        saveBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                String title = titleEt.getText().toString();</div><div class="line">                String content = contentEt.getText().toString();</div><div class="line">                String time = getTime();</div><div class="line"></div><div class="line">                <span class="comment">//将最新修改的放最前面</span></div><div class="line">                <span class="keyword">if</span> ( noteID != -<span class="number">1</span>) &#123;</div><div class="line">                    dbManger.deleteNote(noteID);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                dbManger.addToDB(title, content, time);</div><div class="line"></div><div class="line">                Intent i = <span class="keyword">new</span> Intent(ChiefEditNoteActivity.<span class="keyword">this</span>, ChiefNotepadActivity.class);</div><div class="line">                i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</div><div class="line">                startActivity(i);</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        noteID = getIntent().getIntExtra(<span class="string">"id"</span>, -<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (noteID != -<span class="number">1</span>) &#123;</div><div class="line">            showNoteData(noteID);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showNoteData</span><span class="params">(<span class="keyword">int</span> noteID)</span> </span>&#123;</div><div class="line">        Note note = dbManger.readData(noteID);</div><div class="line">        titleEt.setText(note.getTitle());</div><div class="line">        contentEt.setText(note.getContent());</div><div class="line">        <span class="comment">//控制光标</span></div><div class="line">        Spannable spannable = titleEt.getText();</div><div class="line">        Selection.setSelection(spannable, titleEt.getText().length());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        java.text.SimpleDateFormat format = <span class="keyword">new</span> java.text.SimpleDateFormat(<span class="string">"MM-dd HH:mm E"</span>);</div><div class="line">        Date curDate = <span class="keyword">new</span> Date();</div><div class="line">        String str = format.format(curDate);</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以及Note类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> noteId;</div><div class="line">    <span class="keyword">public</span> String title;</div><div class="line">    <span class="keyword">public</span> String content;</div><div class="line">    <span class="keyword">public</span> String time;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> noteId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.noteId = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> time;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(String time)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.time = time;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>值得一说的是，将listView倒序排列。用到的语句是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collections.reverse(List&lt; ? &gt;);</div></pre></td></tr></table></figure>
<p>以及重新编辑一条备忘之后，要将这条备忘的原记录删除，再将新编辑后的备忘置顶。</p>
<p>整个开发流程，大致就是这样。</p>
<p>上两张图吧：</p>
<p><img src="http://omdld2kxe.bkt.clouddn.com/2017-03-19-14-20-12.png" alt="@备忘录主界面"></p>
<p><img src="http://omdld2kxe.bkt.clouddn.com/2017-03-19-14-21-21.png" alt="@备忘录编辑界面"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h2&gt;&lt;p&gt;由于项目需求，最近需要开发一个备忘录，备忘录对于Android是一个很普遍的功能。其实我内心os是每台手机自带的系统就有备忘录功能，在一个App中再开发一个备忘录功能实在是鸡肋。然鹅，做项目就是这样，老板喊做，那我就做着呗。由于为了毕业还要看文献看算法什么的，平时也没什么时间，所以这次只是简单的做了一个可以基于SQLite本地数据库进行备忘录增删查改操作的一个功能。主要实现以下几点功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备忘录的增删查改功能&lt;/li&gt;
&lt;li&gt;每条备忘录包含标题、内容、时间&lt;/li&gt;
&lt;li&gt;备忘录的排列顺序按照时间来，后来居上&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="wanglilin.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="wanglilin.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之异常</title>
    <link href="wanglilin.github.io/2017/03/11/java-exception/"/>
    <id>wanglilin.github.io/2017/03/11/java-exception/</id>
    <published>2017-03-11T12:51:50.000Z</published>
    <updated>2017-03-11T13:17:27.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>A clever person solves a problem, a wise person avoids it.<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;   ——那你，会如何处理异常，try or throw？</p>
</blockquote>
<h2 id="1-异常是什么"><a href="#1-异常是什么" class="headerlink" title="1 异常是什么"></a>1 异常是什么</h2><p>我有一辆车（不是自行车，四轮的！！诶，更不是拖拉机！！！），我要开车去隔壁村见小王（不是隔壁老王），开到半路爆胎了，此时，我有两个选择：</p>
<ul>
<li>如果我车上有备胎（诶，可惜我备胎这东西是建立在有女朋友的基础之上的，女朋友是个好东西，然而我并没有），我可以选择在当前就换个轮胎，然后将坏了的车胎放到后备箱，车子仍然可以继续开；</li>
<li>我车上没有备胎，那我只能放个警示牌，打个电话给能处理这个车爆胎的人来处理，而这并不妨碍我走着去见隔壁村的小王。</li>
</ul>
<p>这就是在Java中遇到异常的两个常用的方法，你可以处理它（try）或抛出它（throw），即将锅交给别人去处理。</p>
<a id="more"></a>
<blockquote>
<p>“异常”这个词通常有“我对此感到很意外”的意思。问题出现了，你也许不清楚该如何处理，但你的确知道不应该置之不理；你要停下来，看看是不是有别人或在别的地方，能够处理这个问题。只是在当前的环境中，还没有足够的信息来解决这个问题，所以就把这个问题提交到一个更高级别的环境中，在那里将做出正确的决定。<br>&emsp;&emsp;&emsp;——《Java编程思想》 P248</p>
</blockquote>
<p>异常指不期而遇的各种状况，如：文件找不到、网络连接失败，非法参数等。异常是一个事件，它发生在程序运行期间，干扰了正常的指令流程。Java通过API中Throwable类的众多子类描述各种不同的异常。因而，Java异常都是对象，是Throwable子类的实例。Java异常类的层次结构图如下：<br><img src="http://omdld2kxe.bkt.clouddn.com/1354020417_5176.jpg" alt="Java异常类层次结构图"></p>
<ul>
<li>Throwable：Java语言中所有错误或异常的超类，有两个重要的子类，Exception（异常）和Error（错误），二者都是Java异常处理的重要子类，各自都包含大量子类。</li>
<li>Error：表示仅靠程序本身无法恢复的严重错误。与代码编写者无关，是代码运行时JVM出现的错误，发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（VirtualMachineError）、类定义错误（NoClassDefFoundError）等。这些错误都是不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li>
<li>Exception：表示程序本身可以处理的异常。<ul>
<li>RuntimeException：那些可能在Java虚拟机正常运行期间抛出的异常的超类。Java编译器不去检查它，也就是说，当程序中可能出现这类异常时，即使没有用<code>try...catch</code>语句捕获它，也没有用<code>throws</code>子句声明抛出它，也还是会编译通过。例如：若试图使用空值对象引用、除数为零或数组越界，则分别引发运行时异常（NullPointerException/ArithmeticException/ArrayIndexOutOfBoundException）。</li>
<li>CheckedException：正确的程序在运行中，很容易出现的、情理可容的异常状况，可查异常状况虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。即Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用<code>try-catch</code>语句捕获它，要么用throws字句声明抛出它，否则编译不会通过。如IOException/SQLException等。</li>
</ul>
</li>
</ul>
<p>PS：Java中RuntimeException这个类名起的并不恰当，因为任何异常都是运行时出现的。（在编译时出现的错误并不是异常，换句话说，异常就是为了解决程序运行时出现的的错误）。</p>
<p>PPS：如何区分，如果出现RuntimeException，那么一定是程序员的错误。例如，可以通过检查数组下标和数组边界来避免数组越界访问异常。 非RutimeException一般是外部错误，例如试图从文件尾后读取数据等，这并不是程序本身的错误，而是在应用环境中出现的外部错误。</p>
<h2 id="2-异常处理机制"><a href="#2-异常处理机制" class="headerlink" title="2 异常处理机制"></a>2 异常处理机制</h2><p> 异常机制是指当程序出现错误后，程序如何处理。具体来说，异常机制提供了程序退出的安全通道。当出现错误后，程序执行的流程发生改变，程序的控制权转移到异常处理器。在Java应用程序中，异常处理机制为：抛出异常、捕获异常。异常处理的流程：</p>
<ul>
<li>遇到错误，方法立即结束，并不返回一个值；同时，抛出一个异常对象 。</li>
<li>调用该方法的程序也不会继续执行下去，而是搜索一个可以处理该异常的异常处理器，并执行其中的代码。</li>
</ul>
<h3 id="2-1-try-catch"><a href="#2-1-try-catch" class="headerlink" title="2.1 try-catch"></a>2.1 try-catch</h3><ul>
<li><p><strong>抛出异常：</strong> 当遇到异常情形时，程序无法继续向下执行，因为在当前的环境下无法获得必要的信息来解决问题。只能从当前环境跳出，将问题提交至上一级环境。当抛出异常后，会有几件事情随之发生：</p>
<ul>
<li>将使用<code>new</code>在堆上创建异常对象。</li>
<li>当前的执行路径（它不能继续下去了）被终止，并且从当前环境中弹出对异常对象的引用。</li>
<li>异常处理机制接管程序，并开始寻找一个恰当的地方来执行程序。这个恰当的地方就是<strong>异常处理程序</strong>，它的任务是将程序从错误状态中恢复，以使程序要么换一种方式运行，要么继续运行下去。</li>
</ul>
</li>
<li><p><strong>捕获异常：</strong> Java中，异常的捕获通常通过<code>try-catch</code>或<code>try-catch-finally</code>语句实现，即监控区域（一段可能产生异常的代码+处理这些异常的代码）</p>
<ul>
<li>try块：<br>如果在方法内部抛出了异常，这个方法将在抛出异常的过程中结束。要是不希望方法就此结束，可以在方法内设置一个特殊的块来捕获异常。因为在这块里，尝试了各种可能产生异常的方法的调用，所以称为try块。它是跟在try关键字之后的普通程序块：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//code that might generate exceptions</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>catch子句：<br>  抛出的异常必须在某处得到处理。这个地点就是异常处理程序，<strong>而且针对每个要捕获的异常，得准备相应的处理程序。异常程序紧跟在try块之后，以关键字catch表示：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//  code that might generate exceptions</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id1)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type1</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id2)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type2</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id3)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个catch子句看起来就像是接收一个且仅接受一个特殊类型的参数的方法。当异常被抛出后，异常处理机制将负责搜寻参数与异常类型相匹配的第一个处理程序，然后进入catch子句之中执行。只有匹配的catch子句才能得到执行。<br>异常匹配的原则是：如果抛出的异常对象属于catch子句的异常类，或者该异常类的子类，则认为生成的异常类对象与catch块捕获的异常类型相匹配。<br>下面举个例子：</p>
<p><strong>捕获throw语句抛出的“除数为0”异常</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"a/b的值是："</span> + a / b);</div><div class="line">        &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</div><div class="line">            System.out.println(<span class="string">"变量b不能为0"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"程序正常结束"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果：</strong><br>变量b不能为0<br>程序正常结束</p>
<p>事实上，“除数为0”等ArithmeticException，是RuntimeException的子类，而运行时异常将由运行时系统自动抛出，不需要使用throw语句。故可将代码改成如下形式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            System.out.println(<span class="string">"a/b的值是："</span> + a / b);</div><div class="line">        &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</div><div class="line">            System.out.println(<span class="string">"变量b不能为0"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"程序正常结束"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>运行结果：</strong><br> 变量b不能为0<br>程序正常结束</p>
<p>由于检查运行时异常的代价远大于捕捉异常所带来的益处，Java编译器允许忽略运行时异常，一个方法可以既不捕捉，也不声明抛出运行时异常。如下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">        System.out.println(<span class="string">"a/b的值是："</span> + a / b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>运行结果：</strong><br> Exception in thread “main” java.lang.ArithmeticException: / by zero</p>
<h4 id="2-1-1-catch子句注意事项"><a href="#2-1-1-catch子句注意事项" class="headerlink" title="2.1.1 catch子句注意事项"></a>2.1.1 catch子句注意事项</h4><ol>
<li>一旦某个catch子句捕获到匹配的异常类型，将进入异常处理代码。一经处理结束，就意味着整个<code>try-catch</code>语句结束。其他的catch子句不再有匹配和捕获异常类型的机会。</li>
<li>Java通过异常类描述异常类型，对于有多个catch子句的异常程序而言，应该尽量将捕获底层异常类的catch子句放在前面，同时尽量将捕获相对高层的异常类的catch子句放在后面。否则，捕获底层异常类的catch子句可能会被屏蔽。</li>
<li>RuntimeException异常类包括运行时各种常见的异常，ArithmeticException类和ArrayIndexOutOfBoundsException类都是它的子类。因此，RuntimeException异常类的catch子句应该放在最后面，否则可能会屏蔽其后的特定异常处理或引起编译错误。</li>
</ol>
<h3 id="2-2-try-catch-finally"><a href="#2-2-try-catch-finally" class="headerlink" title="2.2 try-catch-finally"></a>2.2 try-catch-finally</h3><p><code>try-catch</code>语句还可以包括第三部分，就是finally子句。它表示无论是否出现异常，都应该执行的内容，<code>try-catch-finally</code>语句的一般语法形式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//  code that might generate exceptions</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id1)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type1</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id2)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type2</span></div><div class="line">&#125;<span class="keyword">catch</span>(Type id3)&#123;</div><div class="line">    <span class="comment">//Handle exceptions of Type3</span></div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">    <span class="comment">//Activities that happen every time</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于一些代码，可能会希望无论try块中的异常是否抛出，它们都能得到执行。图示如下：<br><img src="http://omdld2kxe.bkt.clouddn.com/d0vCr.jpg" alt="try-catch-finally执行顺序"><br>这通常适用于内存回收之外的情况（因为回收由垃圾回收器完成）。为了达到这个效果，可以在异常处理程序后面架上finally子句。如下例所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  </div><div class="line">        String greetings[] = &#123; <span class="string">" Hello world !"</span>, <span class="string">" Hello World !! "</span>,  </div><div class="line">                <span class="string">" HELLO WORLD !!!"</span> &#125;;  </div><div class="line">        <span class="keyword">while</span> (i &lt; <span class="number">4</span>) &#123;  </div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line">                <span class="comment">// 特别注意循环控制变量i的设计，避免造成无限循环  </span></div><div class="line">                System.out.println(greetings[i++]);  </div><div class="line">            &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;  </div><div class="line">                System.out.println(<span class="string">"数组下标越界异常"</span>);  </div><div class="line">            &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">                System.out.println(<span class="string">"--------------------------"</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-1-finally子句注意事项"><a href="#2-2-1-finally子句注意事项" class="headerlink" title="2.2.1 finally子句注意事项"></a>2.2.1 finally子句注意事项</h4><ol>
<li>对于没有垃圾回收和析构函数自动调用机制的语言来说，finally非常重要。它能使程序员保证：无论try块里发生了什么，内存总能得到释放。但Java有垃圾回收机制，所以内存释放不再是问题。而且，Java也没有析构函数可供调用。在Java中，用到finallyde情况主要是在，当要把除内存之外的资源恢复到它们的初始状态时。这种需要清理的资源包括：已经打开的文件或网络连接，在屏幕上画的图形，甚至可以是外部世界的某个开关。</li>
<li>当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。</li>
<li>finally语句块不能给变量赋新值来改变return的返回值，也不建议在finally块中使用return语句。没有意义还容易造成混淆。</li>
</ol>
<h3 id="2-3-throw-throws"><a href="#2-3-throw-throws" class="headerlink" title="2.3 throw/throws"></a>2.3 throw/throws</h3><p>任何Java代码都可以抛出异常，如：自己编写的代码、来自Java开发环境包中的代码，或者Java运行时系统。Java对于处理不了的异常或者要转型的异常，一般用throw/throws语句抛出异常。如果一个方法没有捕获一个检查性异常，那么该方法必须使用throws关键字来声明。throws关键字放在方法签名的尾部，也可以使用throw关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>
<h4 id="2-3-1-throws"><a href="#2-3-1-throws" class="headerlink" title="2.3.1 throws"></a>2.3.1 throws</h4><p>如果与一个方法可能会出现异常，但没有能力处理这种异常，可以在方法声明处用throws子句来声明抛出异常。就好像，初中时经常会有打架时间，几个人打一个人，这个人被打之后，想报仇又无力报仇，所以叫一帮兄弟帮他报仇。<br>throws语句用在方法定义时声明该方法要抛出的异常类型，如果抛出的是Exception异常类型，则该方法被声明为抛出所有de异常；多个异常用逗号分隔，throws语句的语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">methodName <span class="keyword">throws</span> Exception1, Exception2, Exception3&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>throws后为声明要抛出的异常列表。当方法抛出异常列表中的异常的时候，方法将不对这些类型及其子类型进行异常处理，而将异常抛向调用该方法的方法。<br>举例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.Exception;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> NegativeArraySizeException </span>&#123;  </div><div class="line">        <span class="comment">// 定义方法并抛出NegativeArraySizeException异常  </span></div><div class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[-<span class="number">3</span>]; <span class="comment">// 创建数组  </span></div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 主方法  </span></div><div class="line">        <span class="keyword">try</span> &#123; <span class="comment">// try语句处理异常信息  </span></div><div class="line">            pop(); <span class="comment">// 调用pop()方法  </span></div><div class="line">        &#125; <span class="keyword">catch</span> (NegativeArraySizeException e) &#123;  </div><div class="line">            System.out.println(<span class="string">"pop()方法抛出的异常"</span>);<span class="comment">// 输出异常信息  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>pop方法没有处理异常NegativeArraySizeException，而是由main函数来处理。</p>
<p> <strong>throws抛出异常的规则：</strong></p>
<ol>
<li>如果是不可检查异常（Unchecked Exception），即Error、RuntimeException或它们的子类，那么可以不使用throws关键字来声明要抛出的异常，编译仍然能通过，但运行时会被系统抛出。</li>
<li>必须声明方法可抛出的任何可查异常（Checked Exception），即如果一个方法可能出现可查异常，要么用try-catch语句捕获，要么用throws语句声明将它抛出，否则会导致编译错误。</li>
<li>该方法的调用者必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。</li>
<li>调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。</li>
</ol>
<h4 id="2-3-2-throw"><a href="#2-3-2-throw" class="headerlink" title="2.3.2 throw"></a>2.3.2 throw</h4><p><code>throw</code>总是出现在函数体中，用来抛出一个Throwable的异常，程序会在throw语句后立即终止，它后面的语句总是执行不到的。<br>异常是异常类的实力对象，我们可以创建异常类的实例对象通过throw语句抛出，该语句的语法格式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExceptionName();</div></pre></td></tr></table></figure></p>
<p>如果抛出了检查异常，则还应该在方法头部声明方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常，如果所有方法都层层上抛获取的异常，最终JVM会进行处理。处理方式也很简单，即打印异常消息和堆栈消息。</p>
<h4 id="2-3-3-Throwable类中的常用方法"><a href="#2-3-3-Throwable类中的常用方法" class="headerlink" title="2.3.3 Throwable类中的常用方法"></a>2.3.3 Throwable类中的常用方法</h4><p>catch关键字后面括号中的Exception类型的参数e。Exception就是try代码块传递给catch代码块的变量类型，e就是变量名。通常异常处理常用3个函数来获取异常的有关信息：<br><code>getCause()</code>: 返回抛出异常的原因。如果 cause 不存在或未知，则返回 null。<br><code>getMeage()</code>: 返回异常的消息信息。<br><code>printStackTrace()</code>:  对象的堆栈跟踪输出至错误输出流，作为字段 System.err 的值。</p>
<p>有时为了简单会忽略掉catch语句后的代码，这样try-catch语句就成了一种摆设，一旦程序在运行过程中出现了异常，就会忽略处理异常，而错误发生的原因很难查找。</p>
<h3 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3 自定义异常"></a>3 自定义异常</h3><p>所谓自定义异常，通常就是指定义了一个继承自Exception类的子类，那么这个类就是一个自定义异常类。通常情况下，我们都会继承自Exception类，一般不会继承某个运行时的异常类。基于特定的需求，自定义异常在项目中的使用还是很普遍的。</p>
<p>自定义异常类MyException：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String messeage)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(messeage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然也可选用Throwable作为父类。其中无参数构造器为创建缺省参数对象提供了方便。第二个构造器将在创建这个异常对象时提供描述这个异常信息的字符串，通过调用父类构造器向上传递给父类，对父类中的toString()方法中返回的原有信息进行覆盖。作为该异常的异常信息。</p>
<p>测试自定义异常类代码：</p>
<p>1.抛出异常throws：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExxceptionTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String string)</span> <span class="keyword">throws</span> MyException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == string)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"传入的字符串参数不能为null"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(string);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MyException </span>&#123;</div><div class="line">   </div><div class="line">      ExxceptionTest test = <span class="keyword">new</span> ExxceptionTest();</div><div class="line">      test.method(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>运行结果：</strong><br>Exception in thread “main” MyException: 传入的字符串参数不能为null<br>    at ExxceptionTest.method(ExxceptionTest.java:9)<br>    at ExxceptionTest.main(ExxceptionTest.java:29)<br>    ……</p>
<p>2.处理异常try-catch：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String string)</span> <span class="keyword">throws</span> MyException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == string)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"传入的字符串参数不能为null"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(string);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            ExceptionTest test = <span class="keyword">new</span> ExceptionTest();</div><div class="line">            test.method(<span class="keyword">null</span>);</div><div class="line">        &#125;<span class="keyword">catch</span> (MyException e)&#123;</div><div class="line">            <span class="comment">//将错误信息在System.out流中打印出来</span></div><div class="line">            e.printStackTrace(System.out);</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            System.out.println(<span class="string">"异常处理完毕"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"程序执行完毕"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>运行结果：</strong><br>MyException: 传入的字符串参数不能为null<br>        at ExxceptionTest.method(ExceptionTest.java:9)<br>        at ExxceptionTest.main(ExceptionTest.java:19)<br>            ….<br>异常处理完毕<br>程序执行完毕</p>
<p>毋庸置疑，我们不可能期待JVM自动抛出一个自定义异常，也不能够期待JVM会自动处理一个自定义异常。发现异常、抛出异常以及处理异常的工作必须靠编程人员在代码中利用异常处理机制自己完成。而打印异常处理信息可以在抛出时包括在构造器的参数中，或者包括在处理这个异常的catch中。</p>
<p>不定期更新…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A clever person solves a problem, a wise person avoids it.&lt;br&gt;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;   ——那你，会如何处理异常，try or throw？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-异常是什么&quot;&gt;&lt;a href=&quot;#1-异常是什么&quot; class=&quot;headerlink&quot; title=&quot;1 异常是什么&quot;&gt;&lt;/a&gt;1 异常是什么&lt;/h2&gt;&lt;p&gt;我有一辆车（不是自行车，四轮的！！诶，更不是拖拉机！！！），我要开车去隔壁村见小王（不是隔壁老王），开到半路爆胎了，此时，我有两个选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我车上有备胎（诶，可惜我备胎这东西是建立在有女朋友的基础之上的，女朋友是个好东西，然而我并没有），我可以选择在当前就换个轮胎，然后将坏了的车胎放到后备箱，车子仍然可以继续开；&lt;/li&gt;
&lt;li&gt;我车上没有备胎，那我只能放个警示牌，打个电话给能处理这个车爆胎的人来处理，而这并不妨碍我走着去见隔壁村的小王。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是在Java中遇到异常的两个常用的方法，你可以处理它（try）或抛出它（throw），即将锅交给别人去处理。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaSE" scheme="wanglilin.github.io/categories/JavaSE/"/>
    
    
      <category term="Java基础" scheme="wanglilin.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaSE" scheme="wanglilin.github.io/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之字符串</title>
    <link href="wanglilin.github.io/2017/03/04/javase-string/"/>
    <id>wanglilin.github.io/2017/03/04/javase-string/</id>
    <published>2017-03-04T08:08:41.000Z</published>
    <updated>2017-03-11T13:09:38.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h2><p>public final class String<br>extends Object<br>implements Serializable, Comparable, CharSequence</p>
<h2 id="类概述"><a href="#类概述" class="headerlink" title="类概述"></a>类概述</h2><p>Java把内存划分为两种：一种是栈内存，一种是堆内存。<strong>在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配</strong>。当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量分配的内存空间，该内存空间可以立即被另作它用。<br><a id="more"></a></p>
<p><strong>堆内存用来存放由new创建的对象和数组，在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。</strong>在堆中产生了一个数组或者对象之后，还可以在栈中定义一个特殊的变量，让栈中的这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量（以后就可以在程序中使用栈中的引用变量来访问堆中的数组或者对象，引用变量相当于是为数组或者对象起的一个名称）。</p>
<p><strong>PS：</strong>引用变量是普通的变量，定义时在栈中分配，引用变量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，引用变量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，即使程序运行到使用new产生的数组或者对象所在的代码块之外，数组和对象本身占据的内存不会被释放，数组和对象在没有引用变量指向它的时候，才变为垃圾，不能再被使用，但仍然占据内存空间不放，在随后的一个不确定的时间被垃圾回收器收走（释放）。- &gt;这也是Java比较占内存的原因。</p>
<p>String类是一个很特殊的类，它本身是final的，它是不可变的，String类是的本质是字符数组char[], 并且其值不可改变,但StringBuilder也是final，为什么StringBuilder是可变的呢？ 究其原因，String类的内部是char[]数组构成，而String的加号（+）运算符的底层是由StringBuilder实现的，一个String每次“+“上一个String,都会创建一个新的StringBuilder，然后调用它的append()方法，该方法返回一个新形成的String。所以字符串的一些合并操作可以使用StringBuilder来提高效率。</p>
<p>用new String()创建的字符串不是常量，不能在编译期就确定，而因为String是类，所以new String()创建的字符串不放入常量池中，它们有自己的地址空间。即Java中，只要使用new关键字来创建对象，则一定会（在堆区或栈区）创建一个新的对象。而直接初始化则会形成字符串常量，分配到运行时常量池中，这会在编译时确定。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>Java程序中的所有字面值（string literals），即双引号括起来的字符串，如“bia”，都是作为String类的实例实现的。</li>
<li>String类是一个很特殊的类，它本身是final的，它是不可变的，String类的本质是字符数组char[ ]， 并且其值不可改变。String是常量，其对象一旦构造就不能被改变。In other words，String对象是不可变的，每一个看起来会修改String值的方法，实际上都是创造了一个全新的String对象（<strong>构建一个新的StringBuilder，然后调用它的append()方法，该方法方法返回一个新创建的String对象</strong>），以包含修改后的字符串内容。</li>
<li>String对象具有只读特性，指向它的任何引用都不可能改变它的值，因此，也不会对其他的引用有什么影响。</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>1.创建字符串</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World"</span>;</div><div class="line">String str1 = <span class="keyword">new</span> String(<span class="string">"Hello World"</span>);</div><div class="line">String str2 = <span class="keyword">new</span> String();</div><div class="line">str2 = <span class="string">"Hello World"</span></div><div class="line">System.out.println(<span class="string">"str:"</span> + str + <span class="string">"str1:"</span> + str1 + <span class="string">"str2:"</span> + str2);</div></pre></td></tr></table></figure>
<ul>
<li>String类有11种构造方法，这些方法提供不同的参数来初始化字符串</li>
<li>String类是不可改变的，所以一旦创建了String对象，其值就无法改变了</li>
</ul>
<p><strong>2.字符串长度</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World"</span>;</div><div class="line"><span class="keyword">int</span> i = str.length();</div><div class="line">System.out.println(i);</div></pre></td></tr></table></figure>
<p> String类的一个访问器方法是length( )方法，它返回字符串对象包含的字符数。</p>
<p><strong>3.连接字符串</strong></p>
<ul>
<li>字符串常量使用concat( )方法连接</li>
<li>使用’+’操作符来连接字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World"</span>;</div><div class="line">String str1 = <span class="string">"Good Friends"</span>;</div><div class="line">str2 = str.concat(str1);</div><div class="line">str3 = str + str1;</div></pre></td></tr></table></figure>
<p><strong>4.创建格式化字符串</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String str;</div><div class="line"><span class="keyword">int</span> i = <span class="number">100</span>;</div><div class="line"><span class="keyword">double</span> d = <span class="number">10.243</span>;</div><div class="line"><span class="keyword">float</span> f = <span class="number">124124</span>;</div><div class="line">str =  String.format(<span class="string">"NO1 : %d"</span> + <span class="string">"NO2 : %f"</span> + <span class="string">"NO3 : %f"</span>,i,f,d);    <span class="comment">//使用 .format() 方法格式化字符串</span></div><div class="line">System.out.printf(<span class="string">"NO1 : %d"</span> + <span class="string">"NO2 : %f"</span> + <span class="string">"NO3 : %f"</span>,i,f,d);  <span class="comment">//使用 printf()方法 格式化字符串</span></div><div class="line">System.out.println(str);</div></pre></td></tr></table></figure>
<p>我们知道输出格式化数字可以使用printf( )和format( )方法。String类使用静态方法format( )返回一个String对象而不是PrintStream对象。<br>String类的静态方法format( )能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p>
<p><strong>5.char charAt(int index)</strong><br>返回指定索引处的char值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"hello world"</span>;</div><div class="line"><span class="keyword">char</span> c = str.charAt(<span class="number">2</span>);</div><div class="line">System.out.println(c);</div><div class="line"></div><div class="line"><span class="comment">//output: l</span></div></pre></td></tr></table></figure></p>
<p><strong>6.int compareTo(Object o)</strong><br>把这个字符串和另一个对象比较<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello world"</span>;</div><div class="line">String str1 = <span class="string">"Good Friends"</span>;</div><div class="line"><span class="keyword">int</span> i = str.compareTo(str1);</div><div class="line">System.out.println(i);</div><div class="line"></div><div class="line"><span class="comment">//output: 1</span></div></pre></td></tr></table></figure></p>
<p>比较此对象与指定对象的顺序。如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数。<strong>返回整数，1，-1,0；返回1表示大于，返回-1表示小于，返回0表示相等。</strong></p>
<p><strong>7.boolean endsWith(String str)</strong><br>测试此字符串是否以指定的后缀结束。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World"</span>;</div><div class="line"><span class="keyword">boolean</span> b = str.endsWith(<span class="string">"d"</span>);</div><div class="line">System.out.println(b);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//output:true</span></div></pre></td></tr></table></figure></p>
<p><strong>8.boolean equals(Object object)</strong><br>将此字符串与指定的对象比较<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World !"</span>; </div><div class="line">String str1 = <span class="string">"Good Friends"</span>;</div><div class="line"><span class="keyword">boolean</span>  b =  str.equals(str1);</div><div class="line">System.out.println(b);</div></pre></td></tr></table></figure></p>
<p><strong>9.int indexOf(int char)</strong><br>返回指定字符在此字符串中第一次出现处的索引<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Hello World !"</span>;</div><div class="line"><span class="keyword">int</span> i = str.indexOf(<span class="string">'e'</span>);</div><div class="line">System.out.println(i);</div><div class="line"></div><div class="line"><span class="comment">//output: 1</span></div><div class="line"><span class="comment">//若无此字符串，则返回-1</span></div></pre></td></tr></table></figure></p>
<p><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html" target="_blank" rel="external">更多String方法，点击查看</a></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="null和空字符串的区别s"><a href="#null和空字符串的区别s" class="headerlink" title="null和空字符串的区别s"></a>null和空字符串的区别s</h3><blockquote>
<p>String s=null;<br>string.trim()就会抛出为空的exception<br>String s=””;<br>string.trim()就不会抛,为什么?</p>
</blockquote>
<p><strong>答：</strong><br>1）null代表声明了一个空对象，根本就不是一个字符串，对空对象做任何操作都不行，除了 = 和 == ；<br>“”代表声明了一个对象实例，这个对象实例的值是一个长度为0的空字符串，其仍代表一个字符串，只是字符串里面没有内容。<br>2）String s = null;只是定义了一个句柄，也就是说你有了个引用，但是这个引用未指向任何内存空间；<br>String s = “”;这个引用指向了一块是空字符串的内存空间，可对其进行满足字符串操作的任何操作。</p>
<p>所以，题目中为何一个会抛异常，一个不会抛异常就得以解答。</p>
<blockquote>
<p> String s;和String s=null;和String s=”a”;有什么区别？<br> 针对这三种情况，使用out.println(s);的时候，第一个会出现异常，第二个会输出null.第三个则会输出a.<br> 这是为什么呢？这三句声明语句，各自作了什么呢？</p>
</blockquote>
<p><strong>答：</strong><br>第一个只是定义了一个String类型变量s，并没有给它赋值（若是类的成员变量，才默认赋值），在Java中，默认在使用一个对象的时候必须赋予它初值（降低风险）。<br>第二个和第三个都定义了String类型变量s，并赋予它初值，只不过第二个赋予的值为null；<br><strong>Attention：</strong>s为一个引用，它不是对象。第一个是没有初始化的引用，第二个为空引用，第三个是在字符串池里写入一个字符’a’，然后s指向它。<br><strong>Ps：</strong>String s = ‘a’ ;和 String s = new String(“a”);是有本质上的区别的。前者是在字符串池里写入一个字符’a’，然后s指向它，后者是在堆上创建一个内容为’a’的字符串对象。</p>
<blockquote>
<p>声明了一个string a;变量<br>在以后的判断中，a==””和a==null有何不同?</p>
</blockquote>
<p><strong>答：</strong><br>如果没有给a赋过值，a == “” 会导致异常。<br>在实际处理中，往往认为””和null代表相同的含义，即代表无值。<br>此时，建议用如下语法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a == <span class="keyword">null</span> || a == <span class="string">""</span>)&#123;</div><div class="line">   <span class="comment">//处理语句</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果a为null，则不会执行后面的判断，直接返回true。<br><strong>null是用来判断引用类型是否分配了存储空间，””是针对字符串的。</strong>所以如果没有给a赋过值，a == “”会导致异常。</p>
<blockquote>
<p>String abc=null;String abc=””;String abc;三种写法有什么区别？</p>
</blockquote>
<p><strong>答：</strong><br>1：创建一个空字符串对象，<br>2：创建一个字符串为空的字符串对象。<br>3：声明一个字符串对象，但并没有分配内存，而1，2已经分配了内存</p>
<p><strong>tips：</strong><br>在成员变量的定义中,String s;等同于String s=null;<br>而在本地变量(方法变量)的定义中,String s;不等同于String s=null;,这时要使用s必须显式地赋值。</p>
<p>还有一点要说明的是：<br>只要是在方法在中定义变量都要显示赋初值，main()方法也不例外，而在方法之外编译器回自动赋初值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类结构&quot;&gt;&lt;a href=&quot;#类结构&quot; class=&quot;headerlink&quot; title=&quot;类结构&quot;&gt;&lt;/a&gt;类结构&lt;/h2&gt;&lt;p&gt;public final class String&lt;br&gt;extends Object&lt;br&gt;implements Serializable, Comparable, CharSequence&lt;/p&gt;
&lt;h2 id=&quot;类概述&quot;&gt;&lt;a href=&quot;#类概述&quot; class=&quot;headerlink&quot; title=&quot;类概述&quot;&gt;&lt;/a&gt;类概述&lt;/h2&gt;&lt;p&gt;Java把内存划分为两种：一种是栈内存，一种是堆内存。&lt;strong&gt;在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配&lt;/strong&gt;。当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量分配的内存空间，该内存空间可以立即被另作它用。&lt;br&gt;
    
    </summary>
    
      <category term="JavaSE" scheme="wanglilin.github.io/categories/JavaSE/"/>
    
    
      <category term="Java基础" scheme="wanglilin.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaSE" scheme="wanglilin.github.io/tags/JavaSE/"/>
    
  </entry>
  
</feed>
