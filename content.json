{"meta":{"title":"Wangli's Blog","subtitle":null,"description":null,"author":"Wangli Lin","url":"wanglilin.github.io"},"pages":[{"title":"Tags","date":"2017-03-01T08:36:45.544Z","updated":"2017-03-01T08:36:45.544Z","comments":true,"path":"tags/index.html","permalink":"wanglilin.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2017-03-20T09:55:15.979Z","updated":"2017-03-20T09:55:15.979Z","comments":false,"path":"/404.html","permalink":"wanglilin.github.io//404.html","excerpt":"","text":"body { background: #eee; }@keyframes mysnow { 0% { bottom: 100%; opacity: 0; } 50% { opacity: 1; transform: rotate(720deg);} 100% { transform: rotate(0deg); opacity: 0; bottom: 0%;}}.container { position: fixed; }.pic { position: absolute; opacity: 0; animation: mysnow 5s;height: 30px; } window.onload=function(){ // snowFlow(); function snowFlow(left,height,src){ var container=document.createElement(‘div’); var pic=document.createElement(‘img’); var snowFlow=document.getElementById(‘snowFlow’); pic.className=’pic’; container.className=’container’; snowFlow.appendChild(container); container.appendChild(pic); container.style.left=left+’px’; container.style.height=height+’px’; pic.src=src; setTimeout(function(){ snowFlow.removeChild(container); },5000); } setInterval(function(){ var left=Math.random()window.innerWidth; var height=Math.random()window.innerHeight; var src = ‘http://omdld2kxe.bkt.clouddn.com/snow.png‘; snowFlow(left,height,src); },500); };"},{"title":"About","date":"2017-03-01T08:36:45.544Z","updated":"2017-03-01T08:36:45.544Z","comments":true,"path":"about/index.html","permalink":"wanglilin.github.io/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2017-03-01T08:36:45.544Z","updated":"2017-03-01T08:36:45.544Z","comments":true,"path":"categories/index.html","permalink":"wanglilin.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Android-备忘录开发","slug":"android-memo","date":"2017-03-19T06:30:50.000Z","updated":"2017-03-19T06:37:56.566Z","comments":true,"path":"2017/03/19/android-memo/","link":"","permalink":"wanglilin.github.io/blog/2017/03/19/android-memo/","excerpt":"1 前言由于项目需求，最近需要开发一个备忘录，备忘录对于Android是一个很普遍的功能。其实我内心os是每台手机自带的系统就有备忘录功能，在一个App中再开发一个备忘录功能实在是鸡肋。然鹅，做项目就是这样，老板喊做，那我就做着呗。由于为了毕业还要看文献看算法什么的，平时也没什么时间，所以这次只是简单的做了一个可以基于SQLite本地数据库进行备忘录增删查改操作的一个功能。主要实现以下几点功能： 备忘录的增删查改功能 每条备忘录包含标题、内容、时间 备忘录的排列顺序按照时间来，后来居上","text":"1 前言由于项目需求，最近需要开发一个备忘录，备忘录对于Android是一个很普遍的功能。其实我内心os是每台手机自带的系统就有备忘录功能，在一个App中再开发一个备忘录功能实在是鸡肋。然鹅，做项目就是这样，老板喊做，那我就做着呗。由于为了毕业还要看文献看算法什么的，平时也没什么时间，所以这次只是简单的做了一个可以基于SQLite本地数据库进行备忘录增删查改操作的一个功能。主要实现以下几点功能： 备忘录的增删查改功能 每条备忘录包含标题、内容、时间 备忘录的排列顺序按照时间来，后来居上 2 预备知识2.1 SQLite基础在很多项目开发中，我们或多或少都会用到数据库。在Android中，我们一般使用SQLite。因为Android在android.database.sqlite包封装了很多SQLite的API。 继承SQLiteOpenHelper在使用SQLite时，首先创建一个继承SQLiteOpenHelper的类，并重写onCreate()和onUpgrade()方法。 1234567891011121314151617181920212223public class OrderDBHelper extends SQLiteOpenHelper&#123; private static final int DB_VERSION = 1; private static final String DB_NAME = \"myTest.db\"; public static final String TABLE_NAME = \"Orders\"; public OrderDBHelper(Context context) &#123; super(context, DB_NAME, null, DB_VERSION); &#125; @Override public void onCreate(SQLiteDatabase sqLiteDatabase) &#123; // create table Orders(Id integer primary key, CustomName text, OrderPrice integer, Country text); String sql = \"create table if not exists \" + TABLE_NAME + \" (Id integer primary key, CustomName text, OrderPrice integer, Country text)\"; sqLiteDatabase.execSQL(sql); &#125; @Override public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) &#123; String sql = \"DROP TABLE IF EXISTS \" + TABLE_NAME; sqLiteDatabase.execSQL(sql); onCreate(sqLiteDatabase); &#125;&#125; 这个类的作用主要是用来创建数据库和建表用，一般来说，我们会再创建一个OrderDao类用于处理所有的数据操作方法。在OrderDao中实例化OrderDBHelper： 1234public OrderDao(Context context) &#123; this.context = context; ordersDBHelper = new OrderDBHelper(context);&#125; SQLite的增删查改操作数据库操作无外乎“增删查改”，我们依据操作是否对数据库有改动将其分为两类： “增删改”对于“增删改”这类对表内容变换的操作，我们需要先调用getWritableDatabase(),执行的时候可以调用通用的excecSQL(String sql)方法或对应的操作API：insert()、delete()、update()。 “查”对于“查”这种对表内容无影响的操作，我们需要调用getReadableDatabase()，这时就不能用execSQL方法，而该改用query()或rawQuery()方法。 增加数据 数据量较多时开启事物进行添加： 1234567891011db = ordersDBHelper.getWritableDatabase();db.beginTransaction();db.execSQL(\"insert into \" + OrderDBHelper.TABLE_NAME + \" (Id, CustomName, OrderPrice, Country) values (1, 'Arc', 100, 'China')\");db.execSQL(\"insert into \" + OrderDBHelper.TABLE_NAME + \" (Id, CustomName, OrderPrice, Country) values (2, 'Bor', 200, 'USA')\");db.execSQL(\"insert into \" + OrderDBHelper.TABLE_NAME + \" (Id, CustomName, OrderPrice, Country) values (3, 'Cut', 500, 'Japan')\");db.execSQL(\"insert into \" + OrderDBHelper.TABLE_NAME + \" (Id, CustomName, OrderPrice, Country) values (4, 'Bor', 300, 'USA')\");db.execSQL(\"insert into \" + OrderDBHelper.TABLE_NAME + \" (Id, CustomName, OrderPrice, Country) values (5, 'Arc', 600, 'China')\");db.execSQL(\"insert into \" + OrderDBHelper.TABLE_NAME + \" (Id, CustomName, OrderPrice, Country) values (6, 'Doom', 200, 'China')\");db.setTransactionSuccessful(); 插入一条新数据可以使用insert(String table, String nullColumnHack, ContentValues values)方法来插入，ContentValues内部实现就是HashMap，但是两者还是有区别的，ContentValues的Key只能存储String类型，Value只能存储基本数据类型以及String类型这些，不能存储对象。 123456789101112db = ordersDBHelper.getWritableDatabase();db.beginTransaction();// insert into Orders(Id, CustomName, OrderPrice, Country) values (7, \"Jne\", 700, \"China\");ContentValues contentValues = new ContentValues();contentValues.put(\"Id\", 7);contentValues.put(\"CustomName\", \"Jne\");contentValues.put(\"OrderPrice\", 700);contentValues.put(\"Country\", \"China\");db.insertOrThrow(OrderDBHelper.TABLE_NAME, null, contentValues);db.setTransactionSuccessful(); 删除数据delete(String table, String WhereClause, String[] WhereArgs),whereClause是删除条件，whereArgs是删除条件值数组 123456db = ordersDBHelper.getWritableDatabase();db.beginTransaction();// delete from Orders where Id = 7db.delete(OrderDBHelper.TABLE_NAME, \"Id = ?\", new String[]&#123;String.valueOf(7)&#125;);db.setTransactionSuccessful(); 修改数据update(String table, ContentValues, String whereClause, String[] whereArgs)： 1234567891011db = ordersDBHelper.getWritableDatabase();db.beginTransaction();// update Orders set OrderPrice = 800 where Id = 6ContentValues cv = new ContentValues();cv.put(\"OrderPrice\", 800);db.update(OrderDBHelper.TABLE_NAME, cv, \"Id = ?\", new String[]&#123;String.valueOf(6)&#125;);db.setTransactionSuccessful(); 查找数据 public Cursor query(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy,String limit)query中的参数如下： 参数 含义 table 表名 columns 列名称数组 selection 条件字句，相当于where selectionArgs 条件字句，参数数组 groupBy 分组列 having 分组条件 orderBy 排序列 orderBy 排序列 limit 分页查询限制 cursor 返回值 返回值类型是Cursor，Cursor是一个游标接口，提供了遍历查询结果的方法，如移动指针方法move()，获得列值。Cursor游标常用方法如下： public Cursor rawQuery(String sql, String[] selectionArgs) 类似execSQL方法，不做介绍。 1234567891011121314151617db = ordersDBHelper.getReadableDatabase();// select * from Orders where CustomName = 'Bor'cursor = db.query(OrderDBHelper.TABLE_NAME, ORDER_COLUMNS, \"CustomName = ?\", new String[] &#123;\"Bor\"&#125;, null, null, null);if (cursor.getCount() &gt; 0) &#123; List&lt;Order&gt; orderList = new ArrayList&lt;Order&gt;(cursor.getCount()); while (cursor.moveToNext()) &#123; Order order = parseOrder(cursor); orderList.add(order); &#125; return orderList;&#125; 2.2 FloatingActionButton的使用Floating Action Button（FAB）是众多专家大牛针对Material Design讨论比较细化的一个点，通过圆形元素与分割线、卡片、各种Bar的直线形成鲜明对比，并使用色彩设定中鲜艳的辅色，带来更具突破性的视觉效果。也正因此，在github上，有着许多与FAB相关的开源项目，其具有弹出特效与自动隐藏等功能，虽然本次并没有用到。简单介绍 如何使用： 2.2.1 导入依赖123dependencies &#123; compile 'com.getbase:floatingactionbutton:1.10.1'&#125; 2.2.2 添加View到layout的xml文件中 声明自定义命名空间 1xmlns:fab=\"http://schemas.android.com/apk/res-auto\" 添加com.getbase.floatingactionbutton.FloatingActionButton 1234567891011&lt;com.getbase.floatingactionbutton.FloatingActionButton android:id=\"@+id/add\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_alignParentBottom=\"true\" android:layout_alignParentEnd=\"true\" android:layout_alignParentRight=\"true\" android:layout_margin=\"15dp\" android:src=\"@drawable/ic_add\" fab:fab_colorNormal=\"#37c674\" fab:fab_colorPressed=\"@color/white\" /&gt; 2.2.3 实现弹出菜单功能这次我并没有做弹出菜单功能，只是给button绑定了一个监听器进行activity之间的跳转。如果有需要用到其弹窗功能，可以参考以下链接：FloatingActionButton的使用 2.3 CardView的使用CardView继承自FrameLayout类，是一种卡片视图，以卡片形式显示内容。卡片布局可以设置圆角与阴影，还可以布局其他的View。CardView可以作为一般的布局使用，也可以作为ListView和RecyclerView的Item使用。 2.3.1 导入依赖CardView的位置在supportV7包之中，因此，在使用时，需要导入v7包的依赖。 1compile 'com.android.support:cardview-v7:24.0.0' 2.3.2 CardView属性 android:cardCornerRadius：设置card圆角的大小 android:cardBackgroundColor：设置card的背景颜色 android:elevation：设置阴影的大小 android:contentPadding：设置卡片内容与边界的间隔 android:cardUseCompatPadding：设置内边距，防止内容与边角的重叠 2.3.3 CardView作为listView中单个item的布局用来显示单条备忘录内容的布局： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:card_view=\"http://schemas.android.com/apk/res-auto\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"&gt; &lt;android.support.v7.widget.CardView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" card_view:cardCornerRadius=\"6dp\" card_view:cardElevation=\"4dp\" card_view:cardUseCompatPadding=\"true\" card_view:contentPadding=\"10dp\"&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"&gt; &lt;TextView android:id=\"@+id/note_title\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_alignParentLeft=\"true\" android:layout_alignParentTop=\"true\" android:layout_marginBottom=\"8dp\" android:textColor=\"#ff000000\" android:textSize=\"20sp\" android:textStyle=\"bold\" /&gt; &lt;TextView android:id=\"@+id/note_content\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_below=\"@+id/note_title\" android:layout_marginBottom=\"8dp\" android:textColor=\"#ff000000\" /&gt; &lt;TextView android:id=\"@+id/note_time\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_alignParentBottom=\"true\" android:layout_alignParentRight=\"true\" android:layout_below=\"@+id/note_content\" android:textColor=\"#ff2a0f5c\" android:textSize=\"12sp\" android:textStyle=\"italic\" /&gt; &lt;TextView android:id=\"@+id/note_id\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:visibility=\"gone\" /&gt; &lt;/RelativeLayout&gt; &lt;/android.support.v7.widget.CardView&gt;&lt;/RelativeLayout&gt; 3 备忘录实战3.1 数据库相关类封装3.1.1 NoteOpenHelper继承自SQLiteOpenHelper用于创建数据库及备忘录表，每条记录有4个字段，分别是id（主键，自增）、content（备忘录内容）、title（备忘录标题）、time（备忘录记录时间），其代码如下： 1234567891011121314151617181920212223242526272829303132public class NoteOpenHelper extends SQLiteOpenHelper &#123; public static final String TABLE_NAME = \"note\"; public static final int VERSION = 1; public static final String TITLE = \"title\"; public static final String CONTENT = \"content\"; public static final String TIME = \"time\"; public static final String ID = \"_id\"; public NoteOpenHelper(Context context) &#123; super(context, TABLE_NAME, null, VERSION); &#125; @Override public void onCreate(SQLiteDatabase sqLiteDatabase) &#123; sqLiteDatabase.execSQL(\"create table if not exists \" + TABLE_NAME + \" (\" + ID + \" integer primary key autoincrement,\" + CONTENT + \" text not null,\" + TITLE + \" text not null,\" + TIME + \" text not null)\"); &#125; @Override public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) &#123; &#125;&#125;``` 3.1.2 数据库操作类DBManagerSQLite的数据库的增删查改若不经过一番封装，代码将显得冗余不优雅，因此将其封装在一个操作类中，代码如下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106public class DBManger &#123; private Context context; private NoteOpenHelper databaseOpenHelper; private SQLiteDatabase dbReader; private SQLiteDatabase dbWriter; private static DBManger instance; public DBManger(Context context)&#123; this.context = context; databaseOpenHelper = new NoteOpenHelper(context); //创建、打开一个数据库 dbReader = databaseOpenHelper.getReadableDatabase(); dbWriter = databaseOpenHelper.getWritableDatabase(); &#125; /** * getInstance单例 * @param context * @return */ public static synchronized DBManger getInstance(Context context)&#123; if(instance == null)&#123; instance = new DBManger(context); &#125; return instance; &#125; /** * 添加纪录至数据库 * @param title * @param content * @param time */ public void addToDB(String title, String content, String time)&#123; //组装数据 ContentValues cv = new ContentValues(); cv.put(NoteOpenHelper.TITLE, title); cv.put(NoteOpenHelper.CONTENT, content); cv.put(NoteOpenHelper.TIME, time); dbWriter.insert(NoteOpenHelper.TABLE_NAME, null, cv); &#125; /** * 读取数据 * @param noteList */ public void readFromDB(List&lt;Note&gt; noteList)&#123; Cursor cursor = dbReader.query(NoteOpenHelper.TABLE_NAME, null, null, null, null, null, null); try&#123; while(cursor.moveToNext())&#123; Note note = new Note(); note.setId(cursor.getInt(cursor.getColumnIndex(NoteOpenHelper.ID))); note.setTitle(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.TITLE))); note.setContent(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.CONTENT))); note.setTime(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.TIME))); noteList.add(note); &#125; cursor.close(); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; &#125; /** * 更新数据 * @param noteID * @param title * @param content * @param time */ public void updateNote(int noteID, String title, String content, String time) &#123; ContentValues cv = new ContentValues(); cv.put(NoteOpenHelper.ID, noteID); cv.put(NoteOpenHelper.TITLE, title); cv.put(NoteOpenHelper.CONTENT, content); cv.put(NoteOpenHelper.TIME, time); dbWriter.update(NoteOpenHelper.TABLE_NAME, cv, \"_id = ?\", new String[]&#123;noteID + \"\"&#125;); &#125; /** * 删除数据 * @param noteID */ public void deleteNote(int noteID) &#123; dbWriter.delete(NoteOpenHelper.TABLE_NAME, \"_id = ?\", new String[]&#123;noteID + \"\"&#125;); &#125; /** * 根据ID查询数据 * @param noteID * @return */ public Note readData(int noteID) &#123; Cursor cursor = dbReader.rawQuery(\"SELECT * FROM note WHERE _id = ?\", new String[]&#123;noteID + \"\"&#125;); Note note = new Note(); System.out.println(\"database:cursor:\" + cursor); if(cursor != null &amp;&amp; cursor.moveToFirst())&#123; note.setId(cursor.getInt(cursor.getColumnIndex(NoteOpenHelper.ID))); note.setTitle(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.TITLE))); note.setContent(cursor.getString(cursor.getColumnIndex(NoteOpenHelper.CONTENT))); &#125; return note; &#125;&#125; 3.2 备忘录列表listView适配器这个就没什么好说的了，为了提高性能，用了ViewHolder。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172public class MyAdapter extends BaseAdapter &#123; private Context context; private List&lt;Note&gt; notes; public MyAdapter(Context context, List&lt;Note&gt; notes) &#123; this.context = context; //实现倒序排列 Collections.reverse(notes); this.notes = notes; &#125; public void removeAllItem() &#123; notes.clear(); notifyDataSetChanged(); &#125; public void removeItem(int position) &#123; notes.remove(position); notifyDataSetChanged(); &#125; @Override public int getCount() &#123; return notes.size(); &#125; @Override public Note getItem(int i) &#123; return notes.get(i); &#125; @Override public long getItemId(int i) &#123; return i; &#125; @Override public View getView(int position, View convertView, final ViewGroup parent) &#123; ViewHolder viewHolder; if (convertView == null)&#123; convertView = LayoutInflater.from(context).inflate(R.layout.item_note, null); viewHolder = new ViewHolder(); viewHolder.tvTitle = (TextView) convertView.findViewById(R.id.note_title); viewHolder.tvContent = (TextView) convertView.findViewById(R.id.note_content); viewHolder.tvTime = (TextView) convertView.findViewById(R.id.note_time); &#125; else &#123; viewHolder = (ViewHolder) convertView.getTag(); &#125; viewHolder.setId(notes.get(position).getId()); viewHolder.tvTitle.setText(notes.get(position).getTitle()); viewHolder.tvContent.setText(notes.get(position).getContent()); viewHolder.tvTime.setText(notes.get(position).getTime()); convertView.setTag(viewHolder); return convertView; &#125; public static class ViewHolder &#123; public int Id; public TextView tvTitle; public TextView tvContent; public TextView tvTime; public void setId(int id) &#123; Id = id; &#125; &#125;&#125; 3.3 主界面和编辑界面3.3.1 主界面主界面布局： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:fab=\"http://schemas.android.com/apk/res-auto\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;include android:layout_width=\"fill_parent\" android:layout_height=\"@dimen/head_h\" layout=\"@layout/inc_head\" /&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:fitsSystemWindows=\"true\"&gt; &lt;ListView android:id=\"@+id/list\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:divider=\"@null\"&gt;&lt;/ListView&gt; &lt;TextView android:id=\"@+id/empty\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_centerVertical=\"true\" android:gravity=\"center\" android:text=\"点击右下方图标添加备忘\" android:textSize=\"16sp\" /&gt; &lt;com.getbase.floatingactionbutton.FloatingActionButton android:id=\"@+id/add\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_alignParentBottom=\"true\" android:layout_alignParentEnd=\"true\" android:layout_alignParentRight=\"true\" android:layout_margin=\"15dp\" android:src=\"@drawable/ic_add\" fab:fab_colorNormal=\"#37c674\" fab:fab_colorPressed=\"@color/white\" /&gt; &lt;/RelativeLayout&gt;&lt;/LinearLayout&gt; 主要是一个Listview和FAB，以及一个TextView，用以在当没有备忘录条目时，默认提示“点击右下方按钮增加备忘”。 Activity：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102public class ChiefNotepadActivity extends BaseActivity &#123; private FloatingActionButton addBtn; private TextView emptyListTextView; private DBManger dm; private List&lt;Note&gt; noteDataList = new ArrayList&lt;&gt;(); private MyAdapter adapter; private ListView listView; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_chief_notepad); setTitle(\"备忘录\"); initHead(R.drawable.ic_head_back, 0); initNotePad(); &#125; private void initNotePad() &#123; dm = new DBManger(this); dm.readFromDB(noteDataList); listView = (ListView) findViewById(R.id.list); addBtn = (FloatingActionButton) findViewById(R.id.add); emptyListTextView = (TextView) findViewById(R.id.empty); addBtn.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Intent i = new Intent(ChiefNotepadActivity.this, ChiefEditNoteActivity.class); i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); startActivity(i); &#125; &#125;);// adapter = new MyAdapter(this, noteDataList); adapter = new MyAdapter(this, noteDataList); listView.setAdapter(adapter); listView.setOnItemClickListener(new NoteClickListener()); listView.setOnItemLongClickListener(new NoteLongClickListener()); updateView(); &#125; //listView单击事件 private class NoteClickListener implements AdapterView.OnItemClickListener&#123; @Override public void onItemClick(AdapterView&lt;?&gt; adapterView, View view, int i, long l) &#123; MyAdapter.ViewHolder viewHolder = (MyAdapter.ViewHolder) view.getTag(); int noteId = viewHolder.Id; Intent intent = new Intent(ChiefNotepadActivity.this, ChiefEditNoteActivity.class); intent.putExtra(\"id\", noteId); startActivity(intent); &#125; &#125; //listView长按事件 private class NoteLongClickListener implements AdapterView.OnItemLongClickListener &#123; @Override public boolean onItemLongClick(AdapterView&lt;?&gt; adapterView, View view, final int i, long l) &#123; final Note note = ((MyAdapter) adapterView.getAdapter()).getItem(i); if (note == null) &#123; return true; &#125; final int id = note.getId(); new MaterialDialog.Builder(ChiefNotepadActivity.this) .content(\"确定删除此条笔记？\") .positiveText(\"确定\") .negativeText(\"取消\") .callback(new MaterialDialog.ButtonCallback()&#123; @Override public void onPositive(MaterialDialog dialog) &#123; DBManger.getInstance(ChiefNotepadActivity.this).deleteNote(id); adapter.removeItem(i); updateView(); &#125; &#125;).show(); return true; &#125; &#125; //数据更新 private void updateView() &#123; if (noteDataList.isEmpty()) &#123; listView.setVisibility(View.GONE); emptyListTextView.setVisibility(View.VISIBLE); &#125; else &#123; listView.setVisibility(View.VISIBLE); emptyListTextView.setVisibility(View.GONE); &#125; &#125;&#125; 主要是初始化和三个监听事件函数： 点击addBtn时，跳转至编辑界面 短按listView中的条目时，跳转至编辑界面，修改备忘录内容界面 长按listView中的条目时，弹窗，提示是否删除该条备忘录 其中在跳转界面时，给Intent设置标志FLAG_ACTIVITY_CLEAR_TOP的原因在于,怕用户在主界面与编辑界面之间反复跳转时，会在栈中存留多个activity界面，而影响用户体验。 3.3.2 编辑界面界面布局： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:fab=\"http://schemas.android.com/apk/res-auto\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;include android:layout_width=\"fill_parent\" android:layout_height=\"@dimen/head_h\" layout=\"@layout/inc_head\" /&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:fitsSystemWindows=\"true\" android:orientation=\"vertical\"&gt; &lt;EditText android:id=\"@+id/note_title\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:hint=\"请输入备忘标题\" android:maxLength=\"50\" android:textSize=\"@dimen/news_item_title_textsize\" android:maxLines=\"1\"&gt; &lt;requestFocus /&gt; &lt;/EditText&gt; &lt;EditText android:id=\"@+id/note_content\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:layout_alignParentBottom=\"true\" android:layout_alignParentLeft=\"true\" android:layout_alignParentStart=\"true\" android:layout_below=\"@+id/note_title\" android:gravity=\"start\" android:hint=\"请在此输入备忘内容\" android:inputType=\"textMultiLine\" /&gt; &lt;ImageView android:id=\"@+id/note_image\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_below=\"@+id/save\" /&gt; &lt;com.getbase.floatingactionbutton.FloatingActionButton android:id=\"@+id/save\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_alignParentBottom=\"true\" android:layout_alignParentEnd=\"true\" android:layout_alignParentRight=\"true\" android:layout_margin=\"15dp\" android:src=\"@drawable/ic_action_save\" fab:fab_colorNormal=\"#37c674\" fab:fab_colorPressed=\"@color/white\" /&gt; &lt;/RelativeLayout&gt;&lt;/LinearLayout&gt; 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788package com.zju.hzsz.chief.activity;import android.content.Intent;import android.os.Bundle;import android.text.Selection;import android.text.Spannable;import android.view.View;import android.widget.EditText;import com.getbase.floatingactionbutton.FloatingActionButton;import com.zju.hzsz.R;import com.zju.hzsz.db.DBManger;import com.zju.hzsz.model.Note;import java.util.Date;/** * Created by Wangli on 2017/3/8. */public class ChiefEditNoteActivity extends BaseActivity &#123; private EditText titleEt; private EditText contentEt; private FloatingActionButton saveBtn; private int noteID = -1; private DBManger dbManger; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_chief_editnote); setTitle(\"编辑备忘\"); initHead(R.drawable.ic_head_back, 0); initEditNotePad(); &#125; private void initEditNotePad() &#123; dbManger = new DBManger(this); titleEt = (EditText) findViewById(R.id.note_title); contentEt = (EditText) findViewById(R.id.note_content); saveBtn = (FloatingActionButton) findViewById(R.id.save); saveBtn.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; String title = titleEt.getText().toString(); String content = contentEt.getText().toString(); String time = getTime(); //将最新修改的放最前面 if ( noteID != -1) &#123; dbManger.deleteNote(noteID); &#125; dbManger.addToDB(title, content, time); Intent i = new Intent(ChiefEditNoteActivity.this, ChiefNotepadActivity.class); i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); startActivity(i); finish(); &#125; &#125;); noteID = getIntent().getIntExtra(\"id\", -1); if (noteID != -1) &#123; showNoteData(noteID); &#125; &#125; private void showNoteData(int noteID) &#123; Note note = dbManger.readData(noteID); titleEt.setText(note.getTitle()); contentEt.setText(note.getContent()); //控制光标 Spannable spannable = titleEt.getText(); Selection.setSelection(spannable, titleEt.getText().length()); &#125; private String getTime() &#123; java.text.SimpleDateFormat format = new java.text.SimpleDateFormat(\"MM-dd HH:mm E\"); Date curDate = new Date(); String str = format.format(curDate); return str; &#125;&#125; 以及Note类： 123456789101112131415161718192021222324252627282930313233343536373839public class Note &#123; public int noteId; public String title; public String content; public String time; public String getContent() &#123; return content; &#125; public void setContent(String content) &#123; this.content = content; &#125; public int getId() &#123; return noteId; &#125; public void setId(int id) &#123; this.noteId = id; &#125; public String getTime() &#123; return time; &#125; public void setTime(String time) &#123; this.time = time; &#125; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125;&#125; 值得一说的是，将listView倒序排列。用到的语句是： 1Collections.reverse(List&lt; ? &gt;); 以及重新编辑一条备忘之后，要将这条备忘的原记录删除，再将新编辑后的备忘置顶。 整个开发流程，大致就是这样。 上两张图吧：","categories":[{"name":"Android","slug":"Android","permalink":"wanglilin.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"wanglilin.github.io/tags/Android/"}]},{"title":"Java基础之异常","slug":"java-exception","date":"2017-03-11T12:51:50.000Z","updated":"2017-03-11T13:17:27.612Z","comments":true,"path":"2017/03/11/java-exception/","link":"","permalink":"wanglilin.github.io/blog/2017/03/11/java-exception/","excerpt":"前言 A clever person solves a problem, a wise person avoids it.&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; ——那你，会如何处理异常，try or throw？ 1 异常是什么我有一辆车（不是自行车，四轮的！！诶，更不是拖拉机！！！），我要开车去隔壁村见小王（不是隔壁老王），开到半路爆胎了，此时，我有两个选择： 如果我车上有备胎（诶，可惜我备胎这东西是建立在有女朋友的基础之上的，女朋友是个好东西，然而我并没有），我可以选择在当前就换个轮胎，然后将坏了的车胎放到后备箱，车子仍然可以继续开； 我车上没有备胎，那我只能放个警示牌，打个电话给能处理这个车爆胎的人来处理，而这并不妨碍我走着去见隔壁村的小王。 这就是在Java中遇到异常的两个常用的方法，你可以处理它（try）或抛出它（throw），即将锅交给别人去处理。","text":"前言 A clever person solves a problem, a wise person avoids it.&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; ——那你，会如何处理异常，try or throw？ 1 异常是什么我有一辆车（不是自行车，四轮的！！诶，更不是拖拉机！！！），我要开车去隔壁村见小王（不是隔壁老王），开到半路爆胎了，此时，我有两个选择： 如果我车上有备胎（诶，可惜我备胎这东西是建立在有女朋友的基础之上的，女朋友是个好东西，然而我并没有），我可以选择在当前就换个轮胎，然后将坏了的车胎放到后备箱，车子仍然可以继续开； 我车上没有备胎，那我只能放个警示牌，打个电话给能处理这个车爆胎的人来处理，而这并不妨碍我走着去见隔壁村的小王。 这就是在Java中遇到异常的两个常用的方法，你可以处理它（try）或抛出它（throw），即将锅交给别人去处理。 “异常”这个词通常有“我对此感到很意外”的意思。问题出现了，你也许不清楚该如何处理，但你的确知道不应该置之不理；你要停下来，看看是不是有别人或在别的地方，能够处理这个问题。只是在当前的环境中，还没有足够的信息来解决这个问题，所以就把这个问题提交到一个更高级别的环境中，在那里将做出正确的决定。&emsp;&emsp;&emsp;——《Java编程思想》 P248 异常指不期而遇的各种状况，如：文件找不到、网络连接失败，非法参数等。异常是一个事件，它发生在程序运行期间，干扰了正常的指令流程。Java通过API中Throwable类的众多子类描述各种不同的异常。因而，Java异常都是对象，是Throwable子类的实例。Java异常类的层次结构图如下： Throwable：Java语言中所有错误或异常的超类，有两个重要的子类，Exception（异常）和Error（错误），二者都是Java异常处理的重要子类，各自都包含大量子类。 Error：表示仅靠程序本身无法恢复的严重错误。与代码编写者无关，是代码运行时JVM出现的错误，发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（VirtualMachineError）、类定义错误（NoClassDefFoundError）等。这些错误都是不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。 Exception：表示程序本身可以处理的异常。 RuntimeException：那些可能在Java虚拟机正常运行期间抛出的异常的超类。Java编译器不去检查它，也就是说，当程序中可能出现这类异常时，即使没有用try...catch语句捕获它，也没有用throws子句声明抛出它，也还是会编译通过。例如：若试图使用空值对象引用、除数为零或数组越界，则分别引发运行时异常（NullPointerException/ArithmeticException/ArrayIndexOutOfBoundException）。 CheckedException：正确的程序在运行中，很容易出现的、情理可容的异常状况，可查异常状况虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。即Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws字句声明抛出它，否则编译不会通过。如IOException/SQLException等。 PS：Java中RuntimeException这个类名起的并不恰当，因为任何异常都是运行时出现的。（在编译时出现的错误并不是异常，换句话说，异常就是为了解决程序运行时出现的的错误）。 PPS：如何区分，如果出现RuntimeException，那么一定是程序员的错误。例如，可以通过检查数组下标和数组边界来避免数组越界访问异常。 非RutimeException一般是外部错误，例如试图从文件尾后读取数据等，这并不是程序本身的错误，而是在应用环境中出现的外部错误。 2 异常处理机制 异常机制是指当程序出现错误后，程序如何处理。具体来说，异常机制提供了程序退出的安全通道。当出现错误后，程序执行的流程发生改变，程序的控制权转移到异常处理器。在Java应用程序中，异常处理机制为：抛出异常、捕获异常。异常处理的流程： 遇到错误，方法立即结束，并不返回一个值；同时，抛出一个异常对象 。 调用该方法的程序也不会继续执行下去，而是搜索一个可以处理该异常的异常处理器，并执行其中的代码。 2.1 try-catch 抛出异常： 当遇到异常情形时，程序无法继续向下执行，因为在当前的环境下无法获得必要的信息来解决问题。只能从当前环境跳出，将问题提交至上一级环境。当抛出异常后，会有几件事情随之发生： 将使用new在堆上创建异常对象。 当前的执行路径（它不能继续下去了）被终止，并且从当前环境中弹出对异常对象的引用。 异常处理机制接管程序，并开始寻找一个恰当的地方来执行程序。这个恰当的地方就是异常处理程序，它的任务是将程序从错误状态中恢复，以使程序要么换一种方式运行，要么继续运行下去。 捕获异常： Java中，异常的捕获通常通过try-catch或try-catch-finally语句实现，即监控区域（一段可能产生异常的代码+处理这些异常的代码） try块：如果在方法内部抛出了异常，这个方法将在抛出异常的过程中结束。要是不希望方法就此结束，可以在方法内设置一个特殊的块来捕获异常。因为在这块里，尝试了各种可能产生异常的方法的调用，所以称为try块。它是跟在try关键字之后的普通程序块： 123try&#123; //code that might generate exceptions&#125; catch子句： 抛出的异常必须在某处得到处理。这个地点就是异常处理程序，而且针对每个要捕获的异常，得准备相应的处理程序。异常程序紧跟在try块之后，以关键字catch表示： 123456789try&#123; // code that might generate exceptions&#125;catch(Type id1)&#123; //Handle exceptions of Type1&#125;catch(Type id2)&#123; //Handle exceptions of Type2&#125;catch(Type id3)&#123; //Handle exceptions of Type3&#125; 每个catch子句看起来就像是接收一个且仅接受一个特殊类型的参数的方法。当异常被抛出后，异常处理机制将负责搜寻参数与异常类型相匹配的第一个处理程序，然后进入catch子句之中执行。只有匹配的catch子句才能得到执行。异常匹配的原则是：如果抛出的异常对象属于catch子句的异常类，或者该异常类的子类，则认为生成的异常类对象与catch块捕获的异常类型相匹配。下面举个例子： 捕获throw语句抛出的“除数为0”异常 12345678910111213141516public class TestException &#123; public static void main(String[] args)&#123; int a = 1; int b = 0; try&#123; if (b == 0) &#123; throw new ArithmeticException(); &#125; System.out.println(\"a/b的值是：\" + a / b); &#125;catch(ArithmeticException e)&#123; System.out.println(\"变量b不能为0\"); &#125; System.out.println(\"程序正常结束\"); &#125;&#125; 运行结果：变量b不能为0程序正常结束 事实上，“除数为0”等ArithmeticException，是RuntimeException的子类，而运行时异常将由运行时系统自动抛出，不需要使用throw语句。故可将代码改成如下形式：12345678910111213public class TestException &#123; public static void main(String[] args)&#123; int a = 1; int b = 0; try&#123; System.out.println(\"a/b的值是：\" + a / b); &#125;catch(ArithmeticException e)&#123; System.out.println(\"变量b不能为0\"); &#125; System.out.println(\"程序正常结束\"); &#125;&#125; 运行结果： 变量b不能为0程序正常结束 由于检查运行时异常的代价远大于捕捉异常所带来的益处，Java编译器允许忽略运行时异常，一个方法可以既不捕捉，也不声明抛出运行时异常。如下代码所示：1234567public class TestException &#123; public static void main(String[] args)&#123; int a = 1; int b = 0; System.out.println(\"a/b的值是：\" + a / b); &#125;&#125; 运行结果： Exception in thread “main” java.lang.ArithmeticException: / by zero 2.1.1 catch子句注意事项 一旦某个catch子句捕获到匹配的异常类型，将进入异常处理代码。一经处理结束，就意味着整个try-catch语句结束。其他的catch子句不再有匹配和捕获异常类型的机会。 Java通过异常类描述异常类型，对于有多个catch子句的异常程序而言，应该尽量将捕获底层异常类的catch子句放在前面，同时尽量将捕获相对高层的异常类的catch子句放在后面。否则，捕获底层异常类的catch子句可能会被屏蔽。 RuntimeException异常类包括运行时各种常见的异常，ArithmeticException类和ArrayIndexOutOfBoundsException类都是它的子类。因此，RuntimeException异常类的catch子句应该放在最后面，否则可能会屏蔽其后的特定异常处理或引起编译错误。 2.2 try-catch-finallytry-catch语句还可以包括第三部分，就是finally子句。它表示无论是否出现异常，都应该执行的内容，try-catch-finally语句的一般语法形式如下： 1234567891011try&#123; // code that might generate exceptions&#125;catch(Type id1)&#123; //Handle exceptions of Type1&#125;catch(Type id2)&#123; //Handle exceptions of Type2&#125;catch(Type id3)&#123; //Handle exceptions of Type3&#125;finally&#123; //Activities that happen every time&#125; 对于一些代码，可能会希望无论try块中的异常是否抛出，它们都能得到执行。图示如下：这通常适用于内存回收之外的情况（因为回收由垃圾回收器完成）。为了达到这个效果，可以在异常处理程序后面架上finally子句。如下例所示： 1234567891011121314151617public class TestException &#123; public static void main(String args[]) &#123; int i = 0; String greetings[] = &#123; \" Hello world !\", \" Hello World !! \", \" HELLO WORLD !!!\" &#125;; while (i &lt; 4) &#123; try &#123; // 特别注意循环控制变量i的设计，避免造成无限循环 System.out.println(greetings[i++]); &#125; catch (ArrayIndexOutOfBoundsException e) &#123; System.out.println(\"数组下标越界异常\"); &#125; finally &#123; System.out.println(\"--------------------------\"); &#125; &#125; &#125; &#125; 2.2.1 finally子句注意事项 对于没有垃圾回收和析构函数自动调用机制的语言来说，finally非常重要。它能使程序员保证：无论try块里发生了什么，内存总能得到释放。但Java有垃圾回收机制，所以内存释放不再是问题。而且，Java也没有析构函数可供调用。在Java中，用到finallyde情况主要是在，当要把除内存之外的资源恢复到它们的初始状态时。这种需要清理的资源包括：已经打开的文件或网络连接，在屏幕上画的图形，甚至可以是外部世界的某个开关。 当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。 finally语句块不能给变量赋新值来改变return的返回值，也不建议在finally块中使用return语句。没有意义还容易造成混淆。 2.3 throw/throws任何Java代码都可以抛出异常，如：自己编写的代码、来自Java开发环境包中的代码，或者Java运行时系统。Java对于处理不了的异常或者要转型的异常，一般用throw/throws语句抛出异常。如果一个方法没有捕获一个检查性异常，那么该方法必须使用throws关键字来声明。throws关键字放在方法签名的尾部，也可以使用throw关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。 2.3.1 throws如果与一个方法可能会出现异常，但没有能力处理这种异常，可以在方法声明处用throws子句来声明抛出异常。就好像，初中时经常会有打架时间，几个人打一个人，这个人被打之后，想报仇又无力报仇，所以叫一帮兄弟帮他报仇。throws语句用在方法定义时声明该方法要抛出的异常类型，如果抛出的是Exception异常类型，则该方法被声明为抛出所有de异常；多个异常用逗号分隔，throws语句的语法格式如下： 123methodName throws Exception1, Exception2, Exception3&#123;&#125; throws后为声明要抛出的异常列表。当方法抛出异常列表中的异常的时候，方法将不对这些类型及其子类型进行异常处理，而将异常抛向调用该方法的方法。举例如下： 123456789101112131415import java.lang.Exception; public class TestException &#123; static void pop() throws NegativeArraySizeException &#123; // 定义方法并抛出NegativeArraySizeException异常 int[] arr = new int[-3]; // 创建数组 &#125; public static void main(String[] args) &#123; // 主方法 try &#123; // try语句处理异常信息 pop(); // 调用pop()方法 &#125; catch (NegativeArraySizeException e) &#123; System.out.println(\"pop()方法抛出的异常\");// 输出异常信息 &#125; &#125; &#125; pop方法没有处理异常NegativeArraySizeException，而是由main函数来处理。 throws抛出异常的规则： 如果是不可检查异常（Unchecked Exception），即Error、RuntimeException或它们的子类，那么可以不使用throws关键字来声明要抛出的异常，编译仍然能通过，但运行时会被系统抛出。 必须声明方法可抛出的任何可查异常（Checked Exception），即如果一个方法可能出现可查异常，要么用try-catch语句捕获，要么用throws语句声明将它抛出，否则会导致编译错误。 该方法的调用者必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。 调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。 2.3.2 throwthrow总是出现在函数体中，用来抛出一个Throwable的异常，程序会在throw语句后立即终止，它后面的语句总是执行不到的。异常是异常类的实力对象，我们可以创建异常类的实例对象通过throw语句抛出，该语句的语法格式如下：1throw new ExceptionName(); 如果抛出了检查异常，则还应该在方法头部声明方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常，如果所有方法都层层上抛获取的异常，最终JVM会进行处理。处理方式也很简单，即打印异常消息和堆栈消息。 2.3.3 Throwable类中的常用方法catch关键字后面括号中的Exception类型的参数e。Exception就是try代码块传递给catch代码块的变量类型，e就是变量名。通常异常处理常用3个函数来获取异常的有关信息：getCause(): 返回抛出异常的原因。如果 cause 不存在或未知，则返回 null。getMeage(): 返回异常的消息信息。printStackTrace(): 对象的堆栈跟踪输出至错误输出流，作为字段 System.err 的值。 有时为了简单会忽略掉catch语句后的代码，这样try-catch语句就成了一种摆设，一旦程序在运行过程中出现了异常，就会忽略处理异常，而错误发生的原因很难查找。 3 自定义异常所谓自定义异常，通常就是指定义了一个继承自Exception类的子类，那么这个类就是一个自定义异常类。通常情况下，我们都会继承自Exception类，一般不会继承某个运行时的异常类。基于特定的需求，自定义异常在项目中的使用还是很普遍的。 自定义异常类MyException： 1234567891011public class MyException extends Exception &#123; public MyException()&#123; super(); &#125; public MyException(String messeage)&#123; super(messeage); &#125;&#125; 当然也可选用Throwable作为父类。其中无参数构造器为创建缺省参数对象提供了方便。第二个构造器将在创建这个异常对象时提供描述这个异常信息的字符串，通过调用父类构造器向上传递给父类，对父类中的toString()方法中返回的原有信息进行覆盖。作为该异常的异常信息。 测试自定义异常类代码： 1.抛出异常throws：12345678910111213141516171819public class ExxceptionTest &#123; public void method(String string) throws MyException &#123; if (null == string)&#123; throw new MyException(\"传入的字符串参数不能为null\"); &#125;else &#123; System.out.println(string); &#125; &#125; public static void main(String[] args) throws MyException &#123; ExxceptionTest test = new ExxceptionTest(); test.method(null); &#125;&#125; 运行结果：Exception in thread “main” MyException: 传入的字符串参数不能为null at ExxceptionTest.method(ExxceptionTest.java:9) at ExxceptionTest.main(ExxceptionTest.java:29) …… 2.处理异常try-catch：123456789101112131415161718192021222324252627public class ExceptionTest &#123; public void method(String string) throws MyException &#123; if (null == string)&#123; throw new MyException(\"传入的字符串参数不能为null\"); &#125;else &#123; System.out.println(string); &#125; &#125; public static void main(String[] args) &#123; try&#123; ExceptionTest test = new ExceptionTest(); test.method(null); &#125;catch (MyException e)&#123; //将错误信息在System.out流中打印出来 e.printStackTrace(System.out); &#125;finally &#123; System.out.println(\"异常处理完毕\"); &#125; System.out.println(\"程序执行完毕\"); &#125;&#125; 运行结果：MyException: 传入的字符串参数不能为null at ExxceptionTest.method(ExceptionTest.java:9) at ExxceptionTest.main(ExceptionTest.java:19) ….异常处理完毕程序执行完毕 毋庸置疑，我们不可能期待JVM自动抛出一个自定义异常，也不能够期待JVM会自动处理一个自定义异常。发现异常、抛出异常以及处理异常的工作必须靠编程人员在代码中利用异常处理机制自己完成。而打印异常处理信息可以在抛出时包括在构造器的参数中，或者包括在处理这个异常的catch中。 不定期更新…","categories":[{"name":"JavaSE","slug":"JavaSE","permalink":"wanglilin.github.io/categories/JavaSE/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"wanglilin.github.io/tags/Java基础/"},{"name":"JavaSE","slug":"JavaSE","permalink":"wanglilin.github.io/tags/JavaSE/"}]},{"title":"Java基础之字符串","slug":"javase-string","date":"2017-03-04T08:08:41.000Z","updated":"2017-03-11T13:09:38.106Z","comments":true,"path":"2017/03/04/javase-string/","link":"","permalink":"wanglilin.github.io/blog/2017/03/04/javase-string/","excerpt":"类结构public final class Stringextends Objectimplements Serializable, Comparable, CharSequence 类概述Java把内存划分为两种：一种是栈内存，一种是堆内存。在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配。当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量分配的内存空间，该内存空间可以立即被另作它用。","text":"类结构public final class Stringextends Objectimplements Serializable, Comparable, CharSequence 类概述Java把内存划分为两种：一种是栈内存，一种是堆内存。在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配。当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量分配的内存空间，该内存空间可以立即被另作它用。 堆内存用来存放由new创建的对象和数组，在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。在堆中产生了一个数组或者对象之后，还可以在栈中定义一个特殊的变量，让栈中的这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量（以后就可以在程序中使用栈中的引用变量来访问堆中的数组或者对象，引用变量相当于是为数组或者对象起的一个名称）。 PS：引用变量是普通的变量，定义时在栈中分配，引用变量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，引用变量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，即使程序运行到使用new产生的数组或者对象所在的代码块之外，数组和对象本身占据的内存不会被释放，数组和对象在没有引用变量指向它的时候，才变为垃圾，不能再被使用，但仍然占据内存空间不放，在随后的一个不确定的时间被垃圾回收器收走（释放）。- &gt;这也是Java比较占内存的原因。 String类是一个很特殊的类，它本身是final的，它是不可变的，String类是的本质是字符数组char[], 并且其值不可改变,但StringBuilder也是final，为什么StringBuilder是可变的呢？ 究其原因，String类的内部是char[]数组构成，而String的加号（+）运算符的底层是由StringBuilder实现的，一个String每次“+“上一个String,都会创建一个新的StringBuilder，然后调用它的append()方法，该方法返回一个新形成的String。所以字符串的一些合并操作可以使用StringBuilder来提高效率。 用new String()创建的字符串不是常量，不能在编译期就确定，而因为String是类，所以new String()创建的字符串不放入常量池中，它们有自己的地址空间。即Java中，只要使用new关键字来创建对象，则一定会（在堆区或栈区）创建一个新的对象。而直接初始化则会形成字符串常量，分配到运行时常量池中，这会在编译时确定。 小结 Java程序中的所有字面值（string literals），即双引号括起来的字符串，如“bia”，都是作为String类的实例实现的。 String类是一个很特殊的类，它本身是final的，它是不可变的，String类的本质是字符数组char[ ]， 并且其值不可改变。String是常量，其对象一旦构造就不能被改变。In other words，String对象是不可变的，每一个看起来会修改String值的方法，实际上都是创造了一个全新的String对象（构建一个新的StringBuilder，然后调用它的append()方法，该方法方法返回一个新创建的String对象），以包含修改后的字符串内容。 String对象具有只读特性，指向它的任何引用都不可能改变它的值，因此，也不会对其他的引用有什么影响。 方法1.创建字符串 12345String str = \"Hello World\";String str1 = new String(\"Hello World\");String str2 = new String();str2 = \"Hello World\"System.out.println(\"str:\" + str + \"str1:\" + str1 + \"str2:\" + str2); String类有11种构造方法，这些方法提供不同的参数来初始化字符串 String类是不可改变的，所以一旦创建了String对象，其值就无法改变了 2.字符串长度 123String str = \"Hello World\";int i = str.length();System.out.println(i); String类的一个访问器方法是length( )方法，它返回字符串对象包含的字符数。 3.连接字符串 字符串常量使用concat( )方法连接 使用’+’操作符来连接字符串 1234String str = \"Hello World\";String str1 = \"Good Friends\";str2 = str.concat(str1);str3 = str + str1; 4.创建格式化字符串 1234567String str;int i = 100;double d = 10.243;float f = 124124;str = String.format(\"NO1 : %d\" + \"NO2 : %f\" + \"NO3 : %f\",i,f,d); //使用 .format() 方法格式化字符串System.out.printf(\"NO1 : %d\" + \"NO2 : %f\" + \"NO3 : %f\",i,f,d); //使用 printf()方法 格式化字符串System.out.println(str); 我们知道输出格式化数字可以使用printf( )和format( )方法。String类使用静态方法format( )返回一个String对象而不是PrintStream对象。String类的静态方法format( )能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。 5.char charAt(int index)返回指定索引处的char值12345String str = \"hello world\";char c = str.charAt(2);System.out.println(c);//output: l 6.int compareTo(Object o)把这个字符串和另一个对象比较123456String str = \"Hello world\";String str1 = \"Good Friends\";int i = str.compareTo(str1);System.out.println(i);//output: 1 比较此对象与指定对象的顺序。如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数。返回整数，1，-1,0；返回1表示大于，返回-1表示小于，返回0表示相等。 7.boolean endsWith(String str)测试此字符串是否以指定的后缀结束。123456String str = \"Hello World\";boolean b = str.endsWith(\"d\");System.out.println(b);//output:true 8.boolean equals(Object object)将此字符串与指定的对象比较1234String str = \"Hello World !\"; String str1 = \"Good Friends\";boolean b = str.equals(str1);System.out.println(b); 9.int indexOf(int char)返回指定字符在此字符串中第一次出现处的索引123456String str = \"Hello World !\";int i = str.indexOf('e');System.out.println(i);//output: 1//若无此字符串，则返回-1 更多String方法，点击查看 思考null和空字符串的区别s String s=null;string.trim()就会抛出为空的exceptionString s=””;string.trim()就不会抛,为什么? 答：1）null代表声明了一个空对象，根本就不是一个字符串，对空对象做任何操作都不行，除了 = 和 == ；“”代表声明了一个对象实例，这个对象实例的值是一个长度为0的空字符串，其仍代表一个字符串，只是字符串里面没有内容。2）String s = null;只是定义了一个句柄，也就是说你有了个引用，但是这个引用未指向任何内存空间；String s = “”;这个引用指向了一块是空字符串的内存空间，可对其进行满足字符串操作的任何操作。 所以，题目中为何一个会抛异常，一个不会抛异常就得以解答。 String s;和String s=null;和String s=”a”;有什么区别？ 针对这三种情况，使用out.println(s);的时候，第一个会出现异常，第二个会输出null.第三个则会输出a. 这是为什么呢？这三句声明语句，各自作了什么呢？ 答：第一个只是定义了一个String类型变量s，并没有给它赋值（若是类的成员变量，才默认赋值），在Java中，默认在使用一个对象的时候必须赋予它初值（降低风险）。第二个和第三个都定义了String类型变量s，并赋予它初值，只不过第二个赋予的值为null；Attention：s为一个引用，它不是对象。第一个是没有初始化的引用，第二个为空引用，第三个是在字符串池里写入一个字符’a’，然后s指向它。Ps：String s = ‘a’ ;和 String s = new String(“a”);是有本质上的区别的。前者是在字符串池里写入一个字符’a’，然后s指向它，后者是在堆上创建一个内容为’a’的字符串对象。 声明了一个string a;变量在以后的判断中，a==””和a==null有何不同? 答：如果没有给a赋过值，a == “” 会导致异常。在实际处理中，往往认为””和null代表相同的含义，即代表无值。此时，建议用如下语法：123if (a == null || a == \"\")&#123; //处理语句&#125; 如果a为null，则不会执行后面的判断，直接返回true。null是用来判断引用类型是否分配了存储空间，””是针对字符串的。所以如果没有给a赋过值，a == “”会导致异常。 String abc=null;String abc=””;String abc;三种写法有什么区别？ 答：1：创建一个空字符串对象，2：创建一个字符串为空的字符串对象。3：声明一个字符串对象，但并没有分配内存，而1，2已经分配了内存 tips：在成员变量的定义中,String s;等同于String s=null;而在本地变量(方法变量)的定义中,String s;不等同于String s=null;,这时要使用s必须显式地赋值。 还有一点要说明的是：只要是在方法在中定义变量都要显示赋初值，main()方法也不例外，而在方法之外编译器回自动赋初值。","categories":[{"name":"JavaSE","slug":"JavaSE","permalink":"wanglilin.github.io/categories/JavaSE/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"wanglilin.github.io/tags/Java基础/"},{"name":"JavaSE","slug":"JavaSE","permalink":"wanglilin.github.io/tags/JavaSE/"}]}]}